// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/dialogflow/v2/conversation_profile.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { Operation } from "../../../longrunning/operations.js";
import { Duration } from "../../../protobuf/duration.js";
import { Empty } from "../../../protobuf/empty.js";
import { FieldMask } from "../../../protobuf/field_mask.js";
import { Timestamp } from "../../../protobuf/timestamp.js";
import { SpeechToTextConfig, SynthesizeSpeechConfig } from "./audio_config.js";
import { Participant_Role, participant_RoleFromJSON, participant_RoleToJSON } from "./participant.js";

export const protobufPackage = "google.cloud.dialogflow.v2";

/** Defines the services to connect to incoming Dialogflow conversations. */
export interface ConversationProfile {
  /**
   * The unique identifier of this conversation profile.
   * Format: `projects/<Project ID>/locations/<Location
   * ID>/conversationProfiles/<Conversation Profile ID>`.
   */
  name: string;
  /** Required. Human readable name for this profile. Max length 1024 bytes. */
  displayName: string;
  /** Output only. Create time of the conversation profile. */
  createTime:
    | Date
    | undefined;
  /** Output only. Update time of the conversation profile. */
  updateTime:
    | Date
    | undefined;
  /** Configuration for an automated agent to use with this profile. */
  automatedAgentConfig:
    | AutomatedAgentConfig
    | undefined;
  /** Configuration for agent assistance to use with this profile. */
  humanAgentAssistantConfig:
    | HumanAgentAssistantConfig
    | undefined;
  /**
   * Configuration for connecting to a live agent.
   *
   * Currently, this feature is not general available, please contact Google
   * to get access.
   */
  humanAgentHandoffConfig:
    | HumanAgentHandoffConfig
    | undefined;
  /** Configuration for publishing conversation lifecycle events. */
  notificationConfig:
    | NotificationConfig
    | undefined;
  /** Configuration for logging conversation lifecycle events. */
  loggingConfig:
    | LoggingConfig
    | undefined;
  /**
   * Configuration for publishing new message events. Event will be sent in
   * format of [ConversationEvent][google.cloud.dialogflow.v2.ConversationEvent]
   */
  newMessageEventNotificationConfig:
    | NotificationConfig
    | undefined;
  /** Settings for speech transcription. */
  sttConfig:
    | SpeechToTextConfig
    | undefined;
  /**
   * Language code for the conversation profile. If not specified, the language
   * is en-US. Language at ConversationProfile should be set for all non en-US
   * languages.
   * This should be a [BCP-47](https://www.rfc-editor.org/rfc/bcp/bcp47.txt)
   * language tag. Example: "en-US".
   */
  languageCode: string;
  /**
   * The time zone of this conversational profile from the
   * [time zone database](https://www.iana.org/time-zones), e.g.,
   * America/New_York, Europe/Paris. Defaults to America/New_York.
   */
  timeZone: string;
  /**
   * Name of the CX SecuritySettings reference for the agent.
   * Format: `projects/<Project ID>/locations/<Location
   * ID>/securitySettings/<Security Settings ID>`.
   */
  securitySettings: string;
  /**
   * Configuration for Text-to-Speech synthesization.
   *
   * Used by Phone Gateway to specify synthesization options. If agent defines
   * synthesization options as well, agent settings overrides the option here.
   */
  ttsConfig: SynthesizeSpeechConfig | undefined;
}

/**
 * The request message for
 * [ConversationProfiles.ListConversationProfiles][google.cloud.dialogflow.v2.ConversationProfiles.ListConversationProfiles].
 */
export interface ListConversationProfilesRequest {
  /**
   * Required. The project to list all conversation profiles from.
   * Format: `projects/<Project ID>/locations/<Location ID>`.
   */
  parent: string;
  /**
   * The maximum number of items to return in a single page. By
   * default 100 and at most 1000.
   */
  pageSize: number;
  /** The next_page_token value returned from a previous list request. */
  pageToken: string;
}

/**
 * The response message for
 * [ConversationProfiles.ListConversationProfiles][google.cloud.dialogflow.v2.ConversationProfiles.ListConversationProfiles].
 */
export interface ListConversationProfilesResponse {
  /**
   * The list of project conversation profiles. There is a maximum number
   * of items returned based on the page_size field in the request.
   */
  conversationProfiles: ConversationProfile[];
  /**
   * Token to retrieve the next page of results, or empty if there are no
   * more results in the list.
   */
  nextPageToken: string;
}

/**
 * The request message for
 * [ConversationProfiles.GetConversationProfile][google.cloud.dialogflow.v2.ConversationProfiles.GetConversationProfile].
 */
export interface GetConversationProfileRequest {
  /**
   * Required. The resource name of the conversation profile.
   * Format: `projects/<Project ID>/locations/<Location
   * ID>/conversationProfiles/<Conversation Profile ID>`.
   */
  name: string;
}

/**
 * The request message for
 * [ConversationProfiles.CreateConversationProfile][google.cloud.dialogflow.v2.ConversationProfiles.CreateConversationProfile].
 */
export interface CreateConversationProfileRequest {
  /**
   * Required. The project to create a conversation profile for.
   * Format: `projects/<Project ID>/locations/<Location ID>`.
   */
  parent: string;
  /** Required. The conversation profile to create. */
  conversationProfile: ConversationProfile | undefined;
}

/**
 * The request message for
 * [ConversationProfiles.UpdateConversationProfile][google.cloud.dialogflow.v2.ConversationProfiles.UpdateConversationProfile].
 */
export interface UpdateConversationProfileRequest {
  /** Required. The conversation profile to update. */
  conversationProfile:
    | ConversationProfile
    | undefined;
  /** Required. The mask to control which fields to update. */
  updateMask: string[] | undefined;
}

/**
 * The request message for
 * [ConversationProfiles.DeleteConversationProfile][google.cloud.dialogflow.v2.ConversationProfiles.DeleteConversationProfile].
 *
 * This operation fails if the conversation profile is still referenced from
 * a phone number.
 */
export interface DeleteConversationProfileRequest {
  /**
   * Required. The name of the conversation profile to delete.
   * Format: `projects/<Project ID>/locations/<Location
   * ID>/conversationProfiles/<Conversation Profile ID>`.
   */
  name: string;
}

/** Defines the Automated Agent to connect to a conversation. */
export interface AutomatedAgentConfig {
  /**
   * Required. ID of the Dialogflow agent environment to use.
   *
   * This project needs to either be the same project as the conversation or you
   * need to grant `service-<Conversation Project
   * Number>@gcp-sa-dialogflow.iam.gserviceaccount.com` the `Dialogflow API
   * Service Agent` role in this project.
   *
   * - For ES agents, use format: `projects/<Project ID>/locations/<Location
   * ID>/agent/environments/<Environment ID or '-'>`. If environment is not
   * specified, the default `draft` environment is used. Refer to
   * [DetectIntentRequest](/dialogflow/docs/reference/rpc/google.cloud.dialogflow.v2#google.cloud.dialogflow.v2.DetectIntentRequest)
   * for more details.
   *
   * - For CX agents, use format `projects/<Project ID>/locations/<Location
   * ID>/agents/<Agent ID>/environments/<Environment ID
   * or '-'>`. If environment is not specified, the default `draft` environment
   * is used.
   */
  agent: string;
  /**
   * Optional. Configure lifetime of the Dialogflow session.
   * By default, a Dialogflow CX session remains active and its data is stored
   * for 30 minutes after the last request is sent for the session.
   * This value should be no longer than 1 day.
   */
  sessionTtl: Duration | undefined;
}

/** Defines the Human Agent Assist to connect to a conversation. */
export interface HumanAgentAssistantConfig {
  /** Pub/Sub topic on which to publish new agent assistant events. */
  notificationConfig:
    | NotificationConfig
    | undefined;
  /** Configuration for agent assistance of human agent participant. */
  humanAgentSuggestionConfig:
    | HumanAgentAssistantConfig_SuggestionConfig
    | undefined;
  /**
   * Configuration for agent assistance of end user participant.
   *
   * Currently, this feature is not general available, please contact Google
   * to get access.
   */
  endUserSuggestionConfig:
    | HumanAgentAssistantConfig_SuggestionConfig
    | undefined;
  /** Configuration for message analysis. */
  messageAnalysisConfig: HumanAgentAssistantConfig_MessageAnalysisConfig | undefined;
}

/** Settings of suggestion trigger. */
export interface HumanAgentAssistantConfig_SuggestionTriggerSettings {
  /** Do not trigger if last utterance is small talk. */
  noSmalltalk: boolean;
  /**
   * Only trigger suggestion if participant role of last utterance is
   * END_USER.
   */
  onlyEndUser: boolean;
}

/** Config for suggestion features. */
export interface HumanAgentAssistantConfig_SuggestionFeatureConfig {
  /** The suggestion feature. */
  suggestionFeature:
    | SuggestionFeature
    | undefined;
  /**
   * Automatically iterates all participants and tries to compile
   * suggestions.
   *
   * Supported features: ARTICLE_SUGGESTION, FAQ, DIALOGFLOW_ASSIST,
   * KNOWLEDGE_ASSIST.
   */
  enableEventBasedSuggestion: boolean;
  /**
   * Optional. Disable the logging of search queries sent by human agents. It
   * can prevent those queries from being stored at answer records.
   *
   * Supported features: KNOWLEDGE_SEARCH.
   */
  disableAgentQueryLogging: boolean;
  /**
   * Optional. Enable query suggestion even if we can't find its answer.
   * By default, queries are suggested only if we find its answer.
   * Supported features: KNOWLEDGE_ASSIST
   */
  enableQuerySuggestionWhenNoAnswer: boolean;
  /**
   * Optional. Enable including conversation context during query answer
   * generation. Supported features: KNOWLEDGE_SEARCH.
   */
  enableConversationAugmentedQuery: boolean;
  /**
   * Optional. Enable query suggestion only.
   * Supported features: KNOWLEDGE_ASSIST
   */
  enableQuerySuggestionOnly: boolean;
  /**
   * Settings of suggestion trigger.
   *
   * Currently, only ARTICLE_SUGGESTION and FAQ will use this field.
   */
  suggestionTriggerSettings:
    | HumanAgentAssistantConfig_SuggestionTriggerSettings
    | undefined;
  /** Configs of query. */
  queryConfig:
    | HumanAgentAssistantConfig_SuggestionQueryConfig
    | undefined;
  /** Configs of custom conversation model. */
  conversationModelConfig:
    | HumanAgentAssistantConfig_ConversationModelConfig
    | undefined;
  /** Configs for processing conversation. */
  conversationProcessConfig: HumanAgentAssistantConfig_ConversationProcessConfig | undefined;
}

/** Detail human agent assistant config. */
export interface HumanAgentAssistantConfig_SuggestionConfig {
  /**
   * Configuration of different suggestion features. One feature can have only
   * one config.
   */
  featureConfigs: HumanAgentAssistantConfig_SuggestionFeatureConfig[];
  /**
   * If `group_suggestion_responses` is false, and there are multiple
   * `feature_configs` in `event based suggestion` or
   * StreamingAnalyzeContent, we will try to deliver suggestions to customers
   * as soon as we get new suggestion. Different type of suggestions based on
   * the same context will be in  separate Pub/Sub event or
   * `StreamingAnalyzeContentResponse`.
   *
   * If `group_suggestion_responses` set to true. All the suggestions to the
   * same participant based on the same context will be grouped into a single
   * Pub/Sub event or StreamingAnalyzeContentResponse.
   */
  groupSuggestionResponses: boolean;
  /**
   * Optional. List of various generator resource names used in the
   * conversation profile.
   */
  generators: string[];
  /**
   * Optional. When disable_high_latency_features_sync_delivery is true and
   * using the AnalyzeContent API, we will not deliver the responses from high
   * latency features in the API response. The
   * human_agent_assistant_config.notification_config must be configured and
   * enable_event_based_suggestion must be set to true to receive the
   * responses from high latency features in Pub/Sub. High latency feature(s):
   * KNOWLEDGE_ASSIST
   */
  disableHighLatencyFeaturesSyncDelivery: boolean;
}

/** Config for suggestion query. */
export interface HumanAgentAssistantConfig_SuggestionQueryConfig {
  /**
   * Query from knowledgebase. It is used by:
   * ARTICLE_SUGGESTION, FAQ.
   */
  knowledgeBaseQuerySource?:
    | HumanAgentAssistantConfig_SuggestionQueryConfig_KnowledgeBaseQuerySource
    | undefined;
  /**
   * Query from knowledge base document. It is used by:
   * SMART_REPLY, SMART_COMPOSE.
   */
  documentQuerySource?:
    | HumanAgentAssistantConfig_SuggestionQueryConfig_DocumentQuerySource
    | undefined;
  /** Query from Dialogflow agent. It is used by DIALOGFLOW_ASSIST. */
  dialogflowQuerySource?:
    | HumanAgentAssistantConfig_SuggestionQueryConfig_DialogflowQuerySource
    | undefined;
  /**
   * Maximum number of results to return. Currently, if unset, defaults to 10.
   * And the max number is 20.
   */
  maxResults: number;
  /**
   * Confidence threshold of query result.
   *
   * Agent Assist gives each suggestion a score in the range [0.0, 1.0], based
   * on the relevance between the suggestion and the current conversation
   * context. A score of 0.0 has no relevance, while a score of 1.0 has high
   * relevance. Only suggestions with a score greater than or equal to the
   * value of this field are included in the results.
   *
   * For a baseline model (the default), the recommended value is in the range
   * [0.05, 0.1].
   *
   * For a custom model, there is no recommended value. Tune this value by
   * starting from a very low value and slowly increasing until you have
   * desired results.
   *
   * If this field is not set, it defaults to 0.0, which means that all
   * suggestions are returned.
   *
   * Supported features: ARTICLE_SUGGESTION, FAQ, SMART_REPLY, SMART_COMPOSE,
   * KNOWLEDGE_SEARCH, KNOWLEDGE_ASSIST, ENTITY_EXTRACTION.
   */
  confidenceThreshold: number;
  /**
   * Determines how recent conversation context is filtered when generating
   * suggestions. If unspecified, no messages will be dropped.
   */
  contextFilterSettings:
    | HumanAgentAssistantConfig_SuggestionQueryConfig_ContextFilterSettings
    | undefined;
  /**
   * Optional. The customized sections chosen to return when requesting a
   * summary of a conversation.
   */
  sections: HumanAgentAssistantConfig_SuggestionQueryConfig_Sections | undefined;
}

/**
 * Knowledge base source settings.
 *
 * Supported features: ARTICLE_SUGGESTION, FAQ.
 */
export interface HumanAgentAssistantConfig_SuggestionQueryConfig_KnowledgeBaseQuerySource {
  /**
   * Required. Knowledge bases to query. Format:
   * `projects/<Project ID>/locations/<Location
   * ID>/knowledgeBases/<Knowledge Base ID>`. Currently, at most 5 knowledge
   * bases are supported.
   */
  knowledgeBases: string[];
}

/**
 * Document source settings.
 *
 * Supported features: SMART_REPLY, SMART_COMPOSE.
 */
export interface HumanAgentAssistantConfig_SuggestionQueryConfig_DocumentQuerySource {
  /**
   * Required. Knowledge documents to query from. Format:
   * `projects/<Project ID>/locations/<Location
   * ID>/knowledgeBases/<KnowledgeBase ID>/documents/<Document ID>`.
   * Currently, at most 5 documents are supported.
   */
  documents: string[];
}

/**
 * Dialogflow source setting.
 *
 * Supported feature: DIALOGFLOW_ASSIST.
 */
export interface HumanAgentAssistantConfig_SuggestionQueryConfig_DialogflowQuerySource {
  /**
   * Required. The name of a Dialogflow virtual agent used for end user side
   * intent detection and suggestion. Format: `projects/<Project
   * ID>/locations/<Location ID>/agent`. When multiple agents are allowed in
   * the same Dialogflow project.
   */
  agent: string;
  /** Optional. The Dialogflow assist configuration for human agent. */
  humanAgentSideConfig:
    | HumanAgentAssistantConfig_SuggestionQueryConfig_DialogflowQuerySource_HumanAgentSideConfig
    | undefined;
}

/**
 * The configuration used for human agent side Dialogflow assist
 * suggestion.
 */
export interface HumanAgentAssistantConfig_SuggestionQueryConfig_DialogflowQuerySource_HumanAgentSideConfig {
  /**
   * Optional. The name of a dialogflow virtual agent used for intent
   * detection and suggestion triggered by human agent.
   * Format: `projects/<Project ID>/locations/<Location ID>/agent`.
   */
  agent: string;
}

/**
 * Settings that determine how to filter recent conversation context when
 * generating suggestions.
 */
export interface HumanAgentAssistantConfig_SuggestionQueryConfig_ContextFilterSettings {
  /**
   * If set to true, the last message from virtual agent (hand off message)
   * and the message before it (trigger message of hand off) are dropped.
   */
  dropHandoffMessages: boolean;
  /** If set to true, all messages from virtual agent are dropped. */
  dropVirtualAgentMessages: boolean;
  /** If set to true, all messages from ivr stage are dropped. */
  dropIvrMessages: boolean;
}

/**
 * Custom sections to return when requesting a summary of a conversation.
 * This is only supported when `baseline_model_version` == '2.0'.
 *
 * Supported features: CONVERSATION_SUMMARIZATION,
 * CONVERSATION_SUMMARIZATION_VOICE.
 */
export interface HumanAgentAssistantConfig_SuggestionQueryConfig_Sections {
  /**
   * The selected sections chosen to return when requesting a summary of a
   * conversation. A duplicate selected section will be treated as a single
   * selected section. If section types are not provided, the default will
   * be {SITUATION, ACTION, RESULT}.
   */
  sectionTypes: HumanAgentAssistantConfig_SuggestionQueryConfig_Sections_SectionType[];
}

/**
 * Selectable sections to return when requesting a summary of a
 * conversation.
 */
export enum HumanAgentAssistantConfig_SuggestionQueryConfig_Sections_SectionType {
  /** SECTION_TYPE_UNSPECIFIED - Undefined section type, does not return anything. */
  SECTION_TYPE_UNSPECIFIED = 0,
  /**
   * SITUATION - What the customer needs help with or has question about.
   * Section name: "situation".
   */
  SITUATION = 1,
  /**
   * ACTION - What the agent does to help the customer.
   * Section name: "action".
   */
  ACTION = 2,
  /**
   * RESOLUTION - Result of the customer service. A single word describing the result
   * of the conversation.
   * Section name: "resolution".
   */
  RESOLUTION = 3,
  /**
   * REASON_FOR_CANCELLATION - Reason for cancellation if the customer requests for a cancellation.
   * "N/A" otherwise.
   * Section name: "reason_for_cancellation".
   */
  REASON_FOR_CANCELLATION = 4,
  /**
   * CUSTOMER_SATISFACTION - "Unsatisfied" or "Satisfied" depending on the customer's feelings at
   * the end of the conversation.
   * Section name: "customer_satisfaction".
   */
  CUSTOMER_SATISFACTION = 5,
  /**
   * ENTITIES - Key entities extracted from the conversation, such as ticket number,
   * order number, dollar amount, etc.
   * Section names are prefixed by "entities/".
   */
  ENTITIES = 6,
  UNRECOGNIZED = -1,
}

export function humanAgentAssistantConfig_SuggestionQueryConfig_Sections_SectionTypeFromJSON(
  object: any,
): HumanAgentAssistantConfig_SuggestionQueryConfig_Sections_SectionType {
  switch (object) {
    case 0:
    case "SECTION_TYPE_UNSPECIFIED":
      return HumanAgentAssistantConfig_SuggestionQueryConfig_Sections_SectionType.SECTION_TYPE_UNSPECIFIED;
    case 1:
    case "SITUATION":
      return HumanAgentAssistantConfig_SuggestionQueryConfig_Sections_SectionType.SITUATION;
    case 2:
    case "ACTION":
      return HumanAgentAssistantConfig_SuggestionQueryConfig_Sections_SectionType.ACTION;
    case 3:
    case "RESOLUTION":
      return HumanAgentAssistantConfig_SuggestionQueryConfig_Sections_SectionType.RESOLUTION;
    case 4:
    case "REASON_FOR_CANCELLATION":
      return HumanAgentAssistantConfig_SuggestionQueryConfig_Sections_SectionType.REASON_FOR_CANCELLATION;
    case 5:
    case "CUSTOMER_SATISFACTION":
      return HumanAgentAssistantConfig_SuggestionQueryConfig_Sections_SectionType.CUSTOMER_SATISFACTION;
    case 6:
    case "ENTITIES":
      return HumanAgentAssistantConfig_SuggestionQueryConfig_Sections_SectionType.ENTITIES;
    case -1:
    case "UNRECOGNIZED":
    default:
      return HumanAgentAssistantConfig_SuggestionQueryConfig_Sections_SectionType.UNRECOGNIZED;
  }
}

export function humanAgentAssistantConfig_SuggestionQueryConfig_Sections_SectionTypeToJSON(
  object: HumanAgentAssistantConfig_SuggestionQueryConfig_Sections_SectionType,
): string {
  switch (object) {
    case HumanAgentAssistantConfig_SuggestionQueryConfig_Sections_SectionType.SECTION_TYPE_UNSPECIFIED:
      return "SECTION_TYPE_UNSPECIFIED";
    case HumanAgentAssistantConfig_SuggestionQueryConfig_Sections_SectionType.SITUATION:
      return "SITUATION";
    case HumanAgentAssistantConfig_SuggestionQueryConfig_Sections_SectionType.ACTION:
      return "ACTION";
    case HumanAgentAssistantConfig_SuggestionQueryConfig_Sections_SectionType.RESOLUTION:
      return "RESOLUTION";
    case HumanAgentAssistantConfig_SuggestionQueryConfig_Sections_SectionType.REASON_FOR_CANCELLATION:
      return "REASON_FOR_CANCELLATION";
    case HumanAgentAssistantConfig_SuggestionQueryConfig_Sections_SectionType.CUSTOMER_SATISFACTION:
      return "CUSTOMER_SATISFACTION";
    case HumanAgentAssistantConfig_SuggestionQueryConfig_Sections_SectionType.ENTITIES:
      return "ENTITIES";
    case HumanAgentAssistantConfig_SuggestionQueryConfig_Sections_SectionType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/**
 * Custom conversation models used in agent assist feature.
 *
 * Supported feature: ARTICLE_SUGGESTION, SMART_COMPOSE, SMART_REPLY,
 * CONVERSATION_SUMMARIZATION.
 */
export interface HumanAgentAssistantConfig_ConversationModelConfig {
  /**
   * Conversation model resource name. Format: `projects/<Project
   * ID>/conversationModels/<Model ID>`.
   */
  model: string;
  /**
   * Version of current baseline model. It will be ignored if
   * [model][google.cloud.dialogflow.v2.HumanAgentAssistantConfig.ConversationModelConfig.model]
   * is set. Valid versions are:
   *   Article Suggestion baseline model:
   *     - 0.9
   *     - 1.0 (default)
   *   Summarization baseline model:
   *     - 1.0
   */
  baselineModelVersion: string;
}

/** Config to process conversation. */
export interface HumanAgentAssistantConfig_ConversationProcessConfig {
  /**
   * Number of recent non-small-talk sentences to use as context for article
   * and FAQ suggestion
   */
  recentSentencesCount: number;
}

/** Configuration for analyses to run on each conversation message. */
export interface HumanAgentAssistantConfig_MessageAnalysisConfig {
  /**
   * Enable entity extraction in conversation messages on [agent assist
   * stage](https://cloud.google.com/dialogflow/priv/docs/contact-center/basics#stages).
   * If unspecified, defaults to false.
   *
   * Currently, this feature is not general available, please contact Google
   * to get access.
   */
  enableEntityExtraction: boolean;
  /**
   * Enable sentiment analysis in conversation messages on [agent assist
   * stage](https://cloud.google.com/dialogflow/priv/docs/contact-center/basics#stages).
   * If unspecified, defaults to false. Sentiment analysis inspects user input
   * and identifies the prevailing subjective opinion, especially to determine
   * a user's attitude as positive, negative, or neutral:
   * https://cloud.google.com/natural-language/docs/basics#sentiment_analysis
   * For
   * [Participants.StreamingAnalyzeContent][google.cloud.dialogflow.v2.Participants.StreamingAnalyzeContent]
   * method, result will be in
   * [StreamingAnalyzeContentResponse.message.SentimentAnalysisResult][google.cloud.dialogflow.v2.StreamingAnalyzeContentResponse.message].
   * For
   * [Participants.AnalyzeContent][google.cloud.dialogflow.v2.Participants.AnalyzeContent]
   * method, result will be in
   * [AnalyzeContentResponse.message.SentimentAnalysisResult][google.cloud.dialogflow.v2.AnalyzeContentResponse.message]
   * For
   * [Conversations.ListMessages][google.cloud.dialogflow.v2.Conversations.ListMessages]
   * method, result will be in
   * [ListMessagesResponse.messages.SentimentAnalysisResult][google.cloud.dialogflow.v2.ListMessagesResponse.messages]
   * If Pub/Sub notification is configured, result will be in
   * [ConversationEvent.new_message_payload.SentimentAnalysisResult][google.cloud.dialogflow.v2.ConversationEvent.new_message_payload].
   */
  enableSentimentAnalysis: boolean;
}

/**
 * Defines the hand off to a live agent, typically on which external agent
 * service provider to connect to a conversation.
 *
 * Currently, this feature is not general available, please contact Google
 * to get access.
 */
export interface HumanAgentHandoffConfig {
  /** Uses [LivePerson](https://www.liveperson.com). */
  livePersonConfig?:
    | HumanAgentHandoffConfig_LivePersonConfig
    | undefined;
  /** Uses Salesforce Live Agent. */
  salesforceLiveAgentConfig?: HumanAgentHandoffConfig_SalesforceLiveAgentConfig | undefined;
}

/** Configuration specific to [LivePerson](https://www.liveperson.com). */
export interface HumanAgentHandoffConfig_LivePersonConfig {
  /**
   * Required. Account number of the LivePerson account to connect. This is
   * the account number you input at the login page.
   */
  accountNumber: string;
}

/** Configuration specific to Salesforce Live Agent. */
export interface HumanAgentHandoffConfig_SalesforceLiveAgentConfig {
  /** Required. The organization ID of the Salesforce account. */
  organizationId: string;
  /** Required. Live Agent deployment ID. */
  deploymentId: string;
  /** Required. Live Agent chat button ID. */
  buttonId: string;
  /**
   * Required. Domain of the Live Agent endpoint for this agent. You can find
   * the endpoint URL in the `Live Agent settings` page. For example if URL
   * has the form https://d.la4-c2-phx.salesforceliveagent.com/...,
   * you should fill in d.la4-c2-phx.salesforceliveagent.com.
   */
  endpointDomain: string;
}

/** Defines notification behavior. */
export interface NotificationConfig {
  /**
   * Name of the Pub/Sub topic to publish conversation
   * events like
   * [CONVERSATION_STARTED][google.cloud.dialogflow.v2.ConversationEvent.Type.CONVERSATION_STARTED]
   * as serialized
   * [ConversationEvent][google.cloud.dialogflow.v2.ConversationEvent] protos.
   *
   * For telephony integration to receive notification, make sure either this
   * topic is in the same project as the conversation or you grant
   * `service-<Conversation Project
   * Number>@gcp-sa-dialogflow.iam.gserviceaccount.com` the `Dialogflow Service
   * Agent` role in the topic project.
   *
   * For chat integration to receive notification, make sure API caller has been
   * granted the `Dialogflow Service Agent` role for the topic.
   *
   * Format: `projects/<Project ID>/locations/<Location ID>/topics/<Topic ID>`.
   */
  topic: string;
  /** Format of message. */
  messageFormat: NotificationConfig_MessageFormat;
}

/** Format of cloud pub/sub message. */
export enum NotificationConfig_MessageFormat {
  /** MESSAGE_FORMAT_UNSPECIFIED - If it is unspecified, PROTO will be used. */
  MESSAGE_FORMAT_UNSPECIFIED = 0,
  /** PROTO - Pub/Sub message will be serialized proto. */
  PROTO = 1,
  /** JSON - Pub/Sub message will be json. */
  JSON = 2,
  UNRECOGNIZED = -1,
}

export function notificationConfig_MessageFormatFromJSON(object: any): NotificationConfig_MessageFormat {
  switch (object) {
    case 0:
    case "MESSAGE_FORMAT_UNSPECIFIED":
      return NotificationConfig_MessageFormat.MESSAGE_FORMAT_UNSPECIFIED;
    case 1:
    case "PROTO":
      return NotificationConfig_MessageFormat.PROTO;
    case 2:
    case "JSON":
      return NotificationConfig_MessageFormat.JSON;
    case -1:
    case "UNRECOGNIZED":
    default:
      return NotificationConfig_MessageFormat.UNRECOGNIZED;
  }
}

export function notificationConfig_MessageFormatToJSON(object: NotificationConfig_MessageFormat): string {
  switch (object) {
    case NotificationConfig_MessageFormat.MESSAGE_FORMAT_UNSPECIFIED:
      return "MESSAGE_FORMAT_UNSPECIFIED";
    case NotificationConfig_MessageFormat.PROTO:
      return "PROTO";
    case NotificationConfig_MessageFormat.JSON:
      return "JSON";
    case NotificationConfig_MessageFormat.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Defines logging behavior for conversation lifecycle events. */
export interface LoggingConfig {
  /**
   * Whether to log conversation events like
   * [CONVERSATION_STARTED][google.cloud.dialogflow.v2.ConversationEvent.Type.CONVERSATION_STARTED]
   * to Stackdriver in the conversation project as JSON format
   * [ConversationEvent][google.cloud.dialogflow.v2.ConversationEvent] protos.
   */
  enableStackdriverLogging: boolean;
}

/**
 * The type of Human Agent Assistant API suggestion to perform, and the maximum
 * number of results to return for that type. Multiple `Feature` objects can
 * be specified in the `features` list.
 */
export interface SuggestionFeature {
  /** Type of Human Agent Assistant API feature to request. */
  type: SuggestionFeature_Type;
}

/** Defines the type of Human Agent Assistant feature. */
export enum SuggestionFeature_Type {
  /** TYPE_UNSPECIFIED - Unspecified feature type. */
  TYPE_UNSPECIFIED = 0,
  /** ARTICLE_SUGGESTION - Run article suggestion model for chat. */
  ARTICLE_SUGGESTION = 1,
  /** FAQ - Run FAQ model for chat. */
  FAQ = 2,
  /** SMART_REPLY - Run smart reply model for chat. */
  SMART_REPLY = 3,
  /** KNOWLEDGE_SEARCH - Run knowledge search with text input from agent or text generated query. */
  KNOWLEDGE_SEARCH = 14,
  /** KNOWLEDGE_ASSIST - Run knowledge assist with automatic query generation. */
  KNOWLEDGE_ASSIST = 15,
  UNRECOGNIZED = -1,
}

export function suggestionFeature_TypeFromJSON(object: any): SuggestionFeature_Type {
  switch (object) {
    case 0:
    case "TYPE_UNSPECIFIED":
      return SuggestionFeature_Type.TYPE_UNSPECIFIED;
    case 1:
    case "ARTICLE_SUGGESTION":
      return SuggestionFeature_Type.ARTICLE_SUGGESTION;
    case 2:
    case "FAQ":
      return SuggestionFeature_Type.FAQ;
    case 3:
    case "SMART_REPLY":
      return SuggestionFeature_Type.SMART_REPLY;
    case 14:
    case "KNOWLEDGE_SEARCH":
      return SuggestionFeature_Type.KNOWLEDGE_SEARCH;
    case 15:
    case "KNOWLEDGE_ASSIST":
      return SuggestionFeature_Type.KNOWLEDGE_ASSIST;
    case -1:
    case "UNRECOGNIZED":
    default:
      return SuggestionFeature_Type.UNRECOGNIZED;
  }
}

export function suggestionFeature_TypeToJSON(object: SuggestionFeature_Type): string {
  switch (object) {
    case SuggestionFeature_Type.TYPE_UNSPECIFIED:
      return "TYPE_UNSPECIFIED";
    case SuggestionFeature_Type.ARTICLE_SUGGESTION:
      return "ARTICLE_SUGGESTION";
    case SuggestionFeature_Type.FAQ:
      return "FAQ";
    case SuggestionFeature_Type.SMART_REPLY:
      return "SMART_REPLY";
    case SuggestionFeature_Type.KNOWLEDGE_SEARCH:
      return "KNOWLEDGE_SEARCH";
    case SuggestionFeature_Type.KNOWLEDGE_ASSIST:
      return "KNOWLEDGE_ASSIST";
    case SuggestionFeature_Type.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/**
 * The request message for
 * [ConversationProfiles.SetSuggestionFeature][].
 */
export interface SetSuggestionFeatureConfigRequest {
  /**
   * Required. The Conversation Profile to add or update the suggestion feature
   * config. Format: `projects/<Project ID>/locations/<Location
   * ID>/conversationProfiles/<Conversation Profile ID>`.
   */
  conversationProfile: string;
  /**
   * Required. The participant role to add or update the suggestion feature
   * config. Only HUMAN_AGENT or END_USER can be used.
   */
  participantRole: Participant_Role;
  /** Required. The suggestion feature config to add or update. */
  suggestionFeatureConfig: HumanAgentAssistantConfig_SuggestionFeatureConfig | undefined;
}

/** The request message for [ConversationProfiles.ClearFeature][]. */
export interface ClearSuggestionFeatureConfigRequest {
  /**
   * Required. The Conversation Profile to add or update the suggestion feature
   * config. Format: `projects/<Project ID>/locations/<Location
   * ID>/conversationProfiles/<Conversation Profile ID>`.
   */
  conversationProfile: string;
  /**
   * Required. The participant role to remove the suggestion feature
   * config. Only HUMAN_AGENT or END_USER can be used.
   */
  participantRole: Participant_Role;
  /** Required. The type of the suggestion feature to remove. */
  suggestionFeatureType: SuggestionFeature_Type;
}

/**
 * Metadata for a [ConversationProfile.SetSuggestionFeatureConfig][]
 * operation.
 */
export interface SetSuggestionFeatureConfigOperationMetadata {
  /**
   * The resource name of the conversation profile. Format:
   * `projects/<Project ID>/locations/<Location
   * ID>/conversationProfiles/<Conversation Profile ID>`
   */
  conversationProfile: string;
  /**
   * Required. The participant role to add or update the suggestion feature
   * config. Only HUMAN_AGENT or END_USER can be used.
   */
  participantRole: Participant_Role;
  /** Required. The type of the suggestion feature to add or update. */
  suggestionFeatureType: SuggestionFeature_Type;
  /** Timestamp whe the request was created. The time is measured on server side. */
  createTime: Date | undefined;
}

/**
 * Metadata for a [ConversationProfile.ClearSuggestionFeatureConfig][]
 * operation.
 */
export interface ClearSuggestionFeatureConfigOperationMetadata {
  /**
   * The resource name of the conversation profile. Format:
   * `projects/<Project ID>/locations/<Location
   * ID>/conversationProfiles/<Conversation Profile ID>`
   */
  conversationProfile: string;
  /**
   * Required. The participant role to remove the suggestion feature
   * config. Only HUMAN_AGENT or END_USER can be used.
   */
  participantRole: Participant_Role;
  /** Required. The type of the suggestion feature to remove. */
  suggestionFeatureType: SuggestionFeature_Type;
  /** Timestamp whe the request was created. The time is measured on server side. */
  createTime: Date | undefined;
}

function createBaseConversationProfile(): ConversationProfile {
  return {
    name: "",
    displayName: "",
    createTime: undefined,
    updateTime: undefined,
    automatedAgentConfig: undefined,
    humanAgentAssistantConfig: undefined,
    humanAgentHandoffConfig: undefined,
    notificationConfig: undefined,
    loggingConfig: undefined,
    newMessageEventNotificationConfig: undefined,
    sttConfig: undefined,
    languageCode: "",
    timeZone: "",
    securitySettings: "",
    ttsConfig: undefined,
  };
}

export const ConversationProfile: MessageFns<ConversationProfile> = {
  encode(message: ConversationProfile, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.displayName !== "") {
      writer.uint32(18).string(message.displayName);
    }
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(90).fork()).join();
    }
    if (message.updateTime !== undefined) {
      Timestamp.encode(toTimestamp(message.updateTime), writer.uint32(98).fork()).join();
    }
    if (message.automatedAgentConfig !== undefined) {
      AutomatedAgentConfig.encode(message.automatedAgentConfig, writer.uint32(26).fork()).join();
    }
    if (message.humanAgentAssistantConfig !== undefined) {
      HumanAgentAssistantConfig.encode(message.humanAgentAssistantConfig, writer.uint32(34).fork()).join();
    }
    if (message.humanAgentHandoffConfig !== undefined) {
      HumanAgentHandoffConfig.encode(message.humanAgentHandoffConfig, writer.uint32(42).fork()).join();
    }
    if (message.notificationConfig !== undefined) {
      NotificationConfig.encode(message.notificationConfig, writer.uint32(50).fork()).join();
    }
    if (message.loggingConfig !== undefined) {
      LoggingConfig.encode(message.loggingConfig, writer.uint32(58).fork()).join();
    }
    if (message.newMessageEventNotificationConfig !== undefined) {
      NotificationConfig.encode(message.newMessageEventNotificationConfig, writer.uint32(66).fork()).join();
    }
    if (message.sttConfig !== undefined) {
      SpeechToTextConfig.encode(message.sttConfig, writer.uint32(74).fork()).join();
    }
    if (message.languageCode !== "") {
      writer.uint32(82).string(message.languageCode);
    }
    if (message.timeZone !== "") {
      writer.uint32(114).string(message.timeZone);
    }
    if (message.securitySettings !== "") {
      writer.uint32(106).string(message.securitySettings);
    }
    if (message.ttsConfig !== undefined) {
      SynthesizeSpeechConfig.encode(message.ttsConfig, writer.uint32(146).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ConversationProfile {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseConversationProfile();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.displayName = reader.string();
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }

          message.updateTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.automatedAgentConfig = AutomatedAgentConfig.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.humanAgentAssistantConfig = HumanAgentAssistantConfig.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.humanAgentHandoffConfig = HumanAgentHandoffConfig.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.notificationConfig = NotificationConfig.decode(reader, reader.uint32());
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.loggingConfig = LoggingConfig.decode(reader, reader.uint32());
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.newMessageEventNotificationConfig = NotificationConfig.decode(reader, reader.uint32());
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.sttConfig = SpeechToTextConfig.decode(reader, reader.uint32());
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.languageCode = reader.string();
          continue;
        case 14:
          if (tag !== 114) {
            break;
          }

          message.timeZone = reader.string();
          continue;
        case 13:
          if (tag !== 106) {
            break;
          }

          message.securitySettings = reader.string();
          continue;
        case 18:
          if (tag !== 146) {
            break;
          }

          message.ttsConfig = SynthesizeSpeechConfig.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ConversationProfile {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      displayName: isSet(object.displayName) ? globalThis.String(object.displayName) : "",
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      updateTime: isSet(object.updateTime) ? fromJsonTimestamp(object.updateTime) : undefined,
      automatedAgentConfig: isSet(object.automatedAgentConfig)
        ? AutomatedAgentConfig.fromJSON(object.automatedAgentConfig)
        : undefined,
      humanAgentAssistantConfig: isSet(object.humanAgentAssistantConfig)
        ? HumanAgentAssistantConfig.fromJSON(object.humanAgentAssistantConfig)
        : undefined,
      humanAgentHandoffConfig: isSet(object.humanAgentHandoffConfig)
        ? HumanAgentHandoffConfig.fromJSON(object.humanAgentHandoffConfig)
        : undefined,
      notificationConfig: isSet(object.notificationConfig)
        ? NotificationConfig.fromJSON(object.notificationConfig)
        : undefined,
      loggingConfig: isSet(object.loggingConfig) ? LoggingConfig.fromJSON(object.loggingConfig) : undefined,
      newMessageEventNotificationConfig: isSet(object.newMessageEventNotificationConfig)
        ? NotificationConfig.fromJSON(object.newMessageEventNotificationConfig)
        : undefined,
      sttConfig: isSet(object.sttConfig) ? SpeechToTextConfig.fromJSON(object.sttConfig) : undefined,
      languageCode: isSet(object.languageCode) ? globalThis.String(object.languageCode) : "",
      timeZone: isSet(object.timeZone) ? globalThis.String(object.timeZone) : "",
      securitySettings: isSet(object.securitySettings) ? globalThis.String(object.securitySettings) : "",
      ttsConfig: isSet(object.ttsConfig) ? SynthesizeSpeechConfig.fromJSON(object.ttsConfig) : undefined,
    };
  },

  toJSON(message: ConversationProfile): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.displayName !== "") {
      obj.displayName = message.displayName;
    }
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.updateTime !== undefined) {
      obj.updateTime = message.updateTime.toISOString();
    }
    if (message.automatedAgentConfig !== undefined) {
      obj.automatedAgentConfig = AutomatedAgentConfig.toJSON(message.automatedAgentConfig);
    }
    if (message.humanAgentAssistantConfig !== undefined) {
      obj.humanAgentAssistantConfig = HumanAgentAssistantConfig.toJSON(message.humanAgentAssistantConfig);
    }
    if (message.humanAgentHandoffConfig !== undefined) {
      obj.humanAgentHandoffConfig = HumanAgentHandoffConfig.toJSON(message.humanAgentHandoffConfig);
    }
    if (message.notificationConfig !== undefined) {
      obj.notificationConfig = NotificationConfig.toJSON(message.notificationConfig);
    }
    if (message.loggingConfig !== undefined) {
      obj.loggingConfig = LoggingConfig.toJSON(message.loggingConfig);
    }
    if (message.newMessageEventNotificationConfig !== undefined) {
      obj.newMessageEventNotificationConfig = NotificationConfig.toJSON(message.newMessageEventNotificationConfig);
    }
    if (message.sttConfig !== undefined) {
      obj.sttConfig = SpeechToTextConfig.toJSON(message.sttConfig);
    }
    if (message.languageCode !== "") {
      obj.languageCode = message.languageCode;
    }
    if (message.timeZone !== "") {
      obj.timeZone = message.timeZone;
    }
    if (message.securitySettings !== "") {
      obj.securitySettings = message.securitySettings;
    }
    if (message.ttsConfig !== undefined) {
      obj.ttsConfig = SynthesizeSpeechConfig.toJSON(message.ttsConfig);
    }
    return obj;
  },

  create(base?: DeepPartial<ConversationProfile>): ConversationProfile {
    return ConversationProfile.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ConversationProfile>): ConversationProfile {
    const message = createBaseConversationProfile();
    message.name = object.name ?? "";
    message.displayName = object.displayName ?? "";
    message.createTime = object.createTime ?? undefined;
    message.updateTime = object.updateTime ?? undefined;
    message.automatedAgentConfig = (object.automatedAgentConfig !== undefined && object.automatedAgentConfig !== null)
      ? AutomatedAgentConfig.fromPartial(object.automatedAgentConfig)
      : undefined;
    message.humanAgentAssistantConfig =
      (object.humanAgentAssistantConfig !== undefined && object.humanAgentAssistantConfig !== null)
        ? HumanAgentAssistantConfig.fromPartial(object.humanAgentAssistantConfig)
        : undefined;
    message.humanAgentHandoffConfig =
      (object.humanAgentHandoffConfig !== undefined && object.humanAgentHandoffConfig !== null)
        ? HumanAgentHandoffConfig.fromPartial(object.humanAgentHandoffConfig)
        : undefined;
    message.notificationConfig = (object.notificationConfig !== undefined && object.notificationConfig !== null)
      ? NotificationConfig.fromPartial(object.notificationConfig)
      : undefined;
    message.loggingConfig = (object.loggingConfig !== undefined && object.loggingConfig !== null)
      ? LoggingConfig.fromPartial(object.loggingConfig)
      : undefined;
    message.newMessageEventNotificationConfig =
      (object.newMessageEventNotificationConfig !== undefined && object.newMessageEventNotificationConfig !== null)
        ? NotificationConfig.fromPartial(object.newMessageEventNotificationConfig)
        : undefined;
    message.sttConfig = (object.sttConfig !== undefined && object.sttConfig !== null)
      ? SpeechToTextConfig.fromPartial(object.sttConfig)
      : undefined;
    message.languageCode = object.languageCode ?? "";
    message.timeZone = object.timeZone ?? "";
    message.securitySettings = object.securitySettings ?? "";
    message.ttsConfig = (object.ttsConfig !== undefined && object.ttsConfig !== null)
      ? SynthesizeSpeechConfig.fromPartial(object.ttsConfig)
      : undefined;
    return message;
  },
};

function createBaseListConversationProfilesRequest(): ListConversationProfilesRequest {
  return { parent: "", pageSize: 0, pageToken: "" };
}

export const ListConversationProfilesRequest: MessageFns<ListConversationProfilesRequest> = {
  encode(message: ListConversationProfilesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListConversationProfilesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListConversationProfilesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListConversationProfilesRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: ListConversationProfilesRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListConversationProfilesRequest>): ListConversationProfilesRequest {
    return ListConversationProfilesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListConversationProfilesRequest>): ListConversationProfilesRequest {
    const message = createBaseListConversationProfilesRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseListConversationProfilesResponse(): ListConversationProfilesResponse {
  return { conversationProfiles: [], nextPageToken: "" };
}

export const ListConversationProfilesResponse: MessageFns<ListConversationProfilesResponse> = {
  encode(message: ListConversationProfilesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.conversationProfiles) {
      ConversationProfile.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListConversationProfilesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListConversationProfilesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.conversationProfiles.push(ConversationProfile.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListConversationProfilesResponse {
    return {
      conversationProfiles: globalThis.Array.isArray(object?.conversationProfiles)
        ? object.conversationProfiles.map((e: any) => ConversationProfile.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListConversationProfilesResponse): unknown {
    const obj: any = {};
    if (message.conversationProfiles?.length) {
      obj.conversationProfiles = message.conversationProfiles.map((e) => ConversationProfile.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListConversationProfilesResponse>): ListConversationProfilesResponse {
    return ListConversationProfilesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListConversationProfilesResponse>): ListConversationProfilesResponse {
    const message = createBaseListConversationProfilesResponse();
    message.conversationProfiles = object.conversationProfiles?.map((e) => ConversationProfile.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseGetConversationProfileRequest(): GetConversationProfileRequest {
  return { name: "" };
}

export const GetConversationProfileRequest: MessageFns<GetConversationProfileRequest> = {
  encode(message: GetConversationProfileRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetConversationProfileRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetConversationProfileRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetConversationProfileRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetConversationProfileRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetConversationProfileRequest>): GetConversationProfileRequest {
    return GetConversationProfileRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetConversationProfileRequest>): GetConversationProfileRequest {
    const message = createBaseGetConversationProfileRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseCreateConversationProfileRequest(): CreateConversationProfileRequest {
  return { parent: "", conversationProfile: undefined };
}

export const CreateConversationProfileRequest: MessageFns<CreateConversationProfileRequest> = {
  encode(message: CreateConversationProfileRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.conversationProfile !== undefined) {
      ConversationProfile.encode(message.conversationProfile, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateConversationProfileRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateConversationProfileRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.conversationProfile = ConversationProfile.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateConversationProfileRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      conversationProfile: isSet(object.conversationProfile)
        ? ConversationProfile.fromJSON(object.conversationProfile)
        : undefined,
    };
  },

  toJSON(message: CreateConversationProfileRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.conversationProfile !== undefined) {
      obj.conversationProfile = ConversationProfile.toJSON(message.conversationProfile);
    }
    return obj;
  },

  create(base?: DeepPartial<CreateConversationProfileRequest>): CreateConversationProfileRequest {
    return CreateConversationProfileRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateConversationProfileRequest>): CreateConversationProfileRequest {
    const message = createBaseCreateConversationProfileRequest();
    message.parent = object.parent ?? "";
    message.conversationProfile = (object.conversationProfile !== undefined && object.conversationProfile !== null)
      ? ConversationProfile.fromPartial(object.conversationProfile)
      : undefined;
    return message;
  },
};

function createBaseUpdateConversationProfileRequest(): UpdateConversationProfileRequest {
  return { conversationProfile: undefined, updateMask: undefined };
}

export const UpdateConversationProfileRequest: MessageFns<UpdateConversationProfileRequest> = {
  encode(message: UpdateConversationProfileRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.conversationProfile !== undefined) {
      ConversationProfile.encode(message.conversationProfile, writer.uint32(10).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateConversationProfileRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateConversationProfileRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.conversationProfile = ConversationProfile.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateConversationProfileRequest {
    return {
      conversationProfile: isSet(object.conversationProfile)
        ? ConversationProfile.fromJSON(object.conversationProfile)
        : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
    };
  },

  toJSON(message: UpdateConversationProfileRequest): unknown {
    const obj: any = {};
    if (message.conversationProfile !== undefined) {
      obj.conversationProfile = ConversationProfile.toJSON(message.conversationProfile);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateConversationProfileRequest>): UpdateConversationProfileRequest {
    return UpdateConversationProfileRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateConversationProfileRequest>): UpdateConversationProfileRequest {
    const message = createBaseUpdateConversationProfileRequest();
    message.conversationProfile = (object.conversationProfile !== undefined && object.conversationProfile !== null)
      ? ConversationProfile.fromPartial(object.conversationProfile)
      : undefined;
    message.updateMask = object.updateMask ?? undefined;
    return message;
  },
};

function createBaseDeleteConversationProfileRequest(): DeleteConversationProfileRequest {
  return { name: "" };
}

export const DeleteConversationProfileRequest: MessageFns<DeleteConversationProfileRequest> = {
  encode(message: DeleteConversationProfileRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteConversationProfileRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteConversationProfileRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteConversationProfileRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: DeleteConversationProfileRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteConversationProfileRequest>): DeleteConversationProfileRequest {
    return DeleteConversationProfileRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteConversationProfileRequest>): DeleteConversationProfileRequest {
    const message = createBaseDeleteConversationProfileRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseAutomatedAgentConfig(): AutomatedAgentConfig {
  return { agent: "", sessionTtl: undefined };
}

export const AutomatedAgentConfig: MessageFns<AutomatedAgentConfig> = {
  encode(message: AutomatedAgentConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.agent !== "") {
      writer.uint32(10).string(message.agent);
    }
    if (message.sessionTtl !== undefined) {
      Duration.encode(message.sessionTtl, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AutomatedAgentConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAutomatedAgentConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.agent = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.sessionTtl = Duration.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AutomatedAgentConfig {
    return {
      agent: isSet(object.agent) ? globalThis.String(object.agent) : "",
      sessionTtl: isSet(object.sessionTtl) ? Duration.fromJSON(object.sessionTtl) : undefined,
    };
  },

  toJSON(message: AutomatedAgentConfig): unknown {
    const obj: any = {};
    if (message.agent !== "") {
      obj.agent = message.agent;
    }
    if (message.sessionTtl !== undefined) {
      obj.sessionTtl = Duration.toJSON(message.sessionTtl);
    }
    return obj;
  },

  create(base?: DeepPartial<AutomatedAgentConfig>): AutomatedAgentConfig {
    return AutomatedAgentConfig.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AutomatedAgentConfig>): AutomatedAgentConfig {
    const message = createBaseAutomatedAgentConfig();
    message.agent = object.agent ?? "";
    message.sessionTtl = (object.sessionTtl !== undefined && object.sessionTtl !== null)
      ? Duration.fromPartial(object.sessionTtl)
      : undefined;
    return message;
  },
};

function createBaseHumanAgentAssistantConfig(): HumanAgentAssistantConfig {
  return {
    notificationConfig: undefined,
    humanAgentSuggestionConfig: undefined,
    endUserSuggestionConfig: undefined,
    messageAnalysisConfig: undefined,
  };
}

export const HumanAgentAssistantConfig: MessageFns<HumanAgentAssistantConfig> = {
  encode(message: HumanAgentAssistantConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.notificationConfig !== undefined) {
      NotificationConfig.encode(message.notificationConfig, writer.uint32(18).fork()).join();
    }
    if (message.humanAgentSuggestionConfig !== undefined) {
      HumanAgentAssistantConfig_SuggestionConfig.encode(message.humanAgentSuggestionConfig, writer.uint32(26).fork())
        .join();
    }
    if (message.endUserSuggestionConfig !== undefined) {
      HumanAgentAssistantConfig_SuggestionConfig.encode(message.endUserSuggestionConfig, writer.uint32(34).fork())
        .join();
    }
    if (message.messageAnalysisConfig !== undefined) {
      HumanAgentAssistantConfig_MessageAnalysisConfig.encode(message.messageAnalysisConfig, writer.uint32(42).fork())
        .join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): HumanAgentAssistantConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHumanAgentAssistantConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2:
          if (tag !== 18) {
            break;
          }

          message.notificationConfig = NotificationConfig.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.humanAgentSuggestionConfig = HumanAgentAssistantConfig_SuggestionConfig.decode(
            reader,
            reader.uint32(),
          );
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.endUserSuggestionConfig = HumanAgentAssistantConfig_SuggestionConfig.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.messageAnalysisConfig = HumanAgentAssistantConfig_MessageAnalysisConfig.decode(
            reader,
            reader.uint32(),
          );
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): HumanAgentAssistantConfig {
    return {
      notificationConfig: isSet(object.notificationConfig)
        ? NotificationConfig.fromJSON(object.notificationConfig)
        : undefined,
      humanAgentSuggestionConfig: isSet(object.humanAgentSuggestionConfig)
        ? HumanAgentAssistantConfig_SuggestionConfig.fromJSON(object.humanAgentSuggestionConfig)
        : undefined,
      endUserSuggestionConfig: isSet(object.endUserSuggestionConfig)
        ? HumanAgentAssistantConfig_SuggestionConfig.fromJSON(object.endUserSuggestionConfig)
        : undefined,
      messageAnalysisConfig: isSet(object.messageAnalysisConfig)
        ? HumanAgentAssistantConfig_MessageAnalysisConfig.fromJSON(object.messageAnalysisConfig)
        : undefined,
    };
  },

  toJSON(message: HumanAgentAssistantConfig): unknown {
    const obj: any = {};
    if (message.notificationConfig !== undefined) {
      obj.notificationConfig = NotificationConfig.toJSON(message.notificationConfig);
    }
    if (message.humanAgentSuggestionConfig !== undefined) {
      obj.humanAgentSuggestionConfig = HumanAgentAssistantConfig_SuggestionConfig.toJSON(
        message.humanAgentSuggestionConfig,
      );
    }
    if (message.endUserSuggestionConfig !== undefined) {
      obj.endUserSuggestionConfig = HumanAgentAssistantConfig_SuggestionConfig.toJSON(message.endUserSuggestionConfig);
    }
    if (message.messageAnalysisConfig !== undefined) {
      obj.messageAnalysisConfig = HumanAgentAssistantConfig_MessageAnalysisConfig.toJSON(message.messageAnalysisConfig);
    }
    return obj;
  },

  create(base?: DeepPartial<HumanAgentAssistantConfig>): HumanAgentAssistantConfig {
    return HumanAgentAssistantConfig.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<HumanAgentAssistantConfig>): HumanAgentAssistantConfig {
    const message = createBaseHumanAgentAssistantConfig();
    message.notificationConfig = (object.notificationConfig !== undefined && object.notificationConfig !== null)
      ? NotificationConfig.fromPartial(object.notificationConfig)
      : undefined;
    message.humanAgentSuggestionConfig =
      (object.humanAgentSuggestionConfig !== undefined && object.humanAgentSuggestionConfig !== null)
        ? HumanAgentAssistantConfig_SuggestionConfig.fromPartial(object.humanAgentSuggestionConfig)
        : undefined;
    message.endUserSuggestionConfig =
      (object.endUserSuggestionConfig !== undefined && object.endUserSuggestionConfig !== null)
        ? HumanAgentAssistantConfig_SuggestionConfig.fromPartial(object.endUserSuggestionConfig)
        : undefined;
    message.messageAnalysisConfig =
      (object.messageAnalysisConfig !== undefined && object.messageAnalysisConfig !== null)
        ? HumanAgentAssistantConfig_MessageAnalysisConfig.fromPartial(object.messageAnalysisConfig)
        : undefined;
    return message;
  },
};

function createBaseHumanAgentAssistantConfig_SuggestionTriggerSettings(): HumanAgentAssistantConfig_SuggestionTriggerSettings {
  return { noSmalltalk: false, onlyEndUser: false };
}

export const HumanAgentAssistantConfig_SuggestionTriggerSettings: MessageFns<
  HumanAgentAssistantConfig_SuggestionTriggerSettings
> = {
  encode(
    message: HumanAgentAssistantConfig_SuggestionTriggerSettings,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.noSmalltalk !== false) {
      writer.uint32(8).bool(message.noSmalltalk);
    }
    if (message.onlyEndUser !== false) {
      writer.uint32(16).bool(message.onlyEndUser);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): HumanAgentAssistantConfig_SuggestionTriggerSettings {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHumanAgentAssistantConfig_SuggestionTriggerSettings();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.noSmalltalk = reader.bool();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.onlyEndUser = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): HumanAgentAssistantConfig_SuggestionTriggerSettings {
    return {
      noSmalltalk: isSet(object.noSmalltalk) ? globalThis.Boolean(object.noSmalltalk) : false,
      onlyEndUser: isSet(object.onlyEndUser) ? globalThis.Boolean(object.onlyEndUser) : false,
    };
  },

  toJSON(message: HumanAgentAssistantConfig_SuggestionTriggerSettings): unknown {
    const obj: any = {};
    if (message.noSmalltalk !== false) {
      obj.noSmalltalk = message.noSmalltalk;
    }
    if (message.onlyEndUser !== false) {
      obj.onlyEndUser = message.onlyEndUser;
    }
    return obj;
  },

  create(
    base?: DeepPartial<HumanAgentAssistantConfig_SuggestionTriggerSettings>,
  ): HumanAgentAssistantConfig_SuggestionTriggerSettings {
    return HumanAgentAssistantConfig_SuggestionTriggerSettings.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<HumanAgentAssistantConfig_SuggestionTriggerSettings>,
  ): HumanAgentAssistantConfig_SuggestionTriggerSettings {
    const message = createBaseHumanAgentAssistantConfig_SuggestionTriggerSettings();
    message.noSmalltalk = object.noSmalltalk ?? false;
    message.onlyEndUser = object.onlyEndUser ?? false;
    return message;
  },
};

function createBaseHumanAgentAssistantConfig_SuggestionFeatureConfig(): HumanAgentAssistantConfig_SuggestionFeatureConfig {
  return {
    suggestionFeature: undefined,
    enableEventBasedSuggestion: false,
    disableAgentQueryLogging: false,
    enableQuerySuggestionWhenNoAnswer: false,
    enableConversationAugmentedQuery: false,
    enableQuerySuggestionOnly: false,
    suggestionTriggerSettings: undefined,
    queryConfig: undefined,
    conversationModelConfig: undefined,
    conversationProcessConfig: undefined,
  };
}

export const HumanAgentAssistantConfig_SuggestionFeatureConfig: MessageFns<
  HumanAgentAssistantConfig_SuggestionFeatureConfig
> = {
  encode(
    message: HumanAgentAssistantConfig_SuggestionFeatureConfig,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.suggestionFeature !== undefined) {
      SuggestionFeature.encode(message.suggestionFeature, writer.uint32(42).fork()).join();
    }
    if (message.enableEventBasedSuggestion !== false) {
      writer.uint32(24).bool(message.enableEventBasedSuggestion);
    }
    if (message.disableAgentQueryLogging !== false) {
      writer.uint32(112).bool(message.disableAgentQueryLogging);
    }
    if (message.enableQuerySuggestionWhenNoAnswer !== false) {
      writer.uint32(120).bool(message.enableQuerySuggestionWhenNoAnswer);
    }
    if (message.enableConversationAugmentedQuery !== false) {
      writer.uint32(128).bool(message.enableConversationAugmentedQuery);
    }
    if (message.enableQuerySuggestionOnly !== false) {
      writer.uint32(136).bool(message.enableQuerySuggestionOnly);
    }
    if (message.suggestionTriggerSettings !== undefined) {
      HumanAgentAssistantConfig_SuggestionTriggerSettings.encode(
        message.suggestionTriggerSettings,
        writer.uint32(82).fork(),
      ).join();
    }
    if (message.queryConfig !== undefined) {
      HumanAgentAssistantConfig_SuggestionQueryConfig.encode(message.queryConfig, writer.uint32(50).fork()).join();
    }
    if (message.conversationModelConfig !== undefined) {
      HumanAgentAssistantConfig_ConversationModelConfig.encode(
        message.conversationModelConfig,
        writer.uint32(58).fork(),
      ).join();
    }
    if (message.conversationProcessConfig !== undefined) {
      HumanAgentAssistantConfig_ConversationProcessConfig.encode(
        message.conversationProcessConfig,
        writer.uint32(66).fork(),
      ).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): HumanAgentAssistantConfig_SuggestionFeatureConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHumanAgentAssistantConfig_SuggestionFeatureConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 5:
          if (tag !== 42) {
            break;
          }

          message.suggestionFeature = SuggestionFeature.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.enableEventBasedSuggestion = reader.bool();
          continue;
        case 14:
          if (tag !== 112) {
            break;
          }

          message.disableAgentQueryLogging = reader.bool();
          continue;
        case 15:
          if (tag !== 120) {
            break;
          }

          message.enableQuerySuggestionWhenNoAnswer = reader.bool();
          continue;
        case 16:
          if (tag !== 128) {
            break;
          }

          message.enableConversationAugmentedQuery = reader.bool();
          continue;
        case 17:
          if (tag !== 136) {
            break;
          }

          message.enableQuerySuggestionOnly = reader.bool();
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.suggestionTriggerSettings = HumanAgentAssistantConfig_SuggestionTriggerSettings.decode(
            reader,
            reader.uint32(),
          );
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.queryConfig = HumanAgentAssistantConfig_SuggestionQueryConfig.decode(reader, reader.uint32());
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.conversationModelConfig = HumanAgentAssistantConfig_ConversationModelConfig.decode(
            reader,
            reader.uint32(),
          );
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.conversationProcessConfig = HumanAgentAssistantConfig_ConversationProcessConfig.decode(
            reader,
            reader.uint32(),
          );
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): HumanAgentAssistantConfig_SuggestionFeatureConfig {
    return {
      suggestionFeature: isSet(object.suggestionFeature)
        ? SuggestionFeature.fromJSON(object.suggestionFeature)
        : undefined,
      enableEventBasedSuggestion: isSet(object.enableEventBasedSuggestion)
        ? globalThis.Boolean(object.enableEventBasedSuggestion)
        : false,
      disableAgentQueryLogging: isSet(object.disableAgentQueryLogging)
        ? globalThis.Boolean(object.disableAgentQueryLogging)
        : false,
      enableQuerySuggestionWhenNoAnswer: isSet(object.enableQuerySuggestionWhenNoAnswer)
        ? globalThis.Boolean(object.enableQuerySuggestionWhenNoAnswer)
        : false,
      enableConversationAugmentedQuery: isSet(object.enableConversationAugmentedQuery)
        ? globalThis.Boolean(object.enableConversationAugmentedQuery)
        : false,
      enableQuerySuggestionOnly: isSet(object.enableQuerySuggestionOnly)
        ? globalThis.Boolean(object.enableQuerySuggestionOnly)
        : false,
      suggestionTriggerSettings: isSet(object.suggestionTriggerSettings)
        ? HumanAgentAssistantConfig_SuggestionTriggerSettings.fromJSON(object.suggestionTriggerSettings)
        : undefined,
      queryConfig: isSet(object.queryConfig)
        ? HumanAgentAssistantConfig_SuggestionQueryConfig.fromJSON(object.queryConfig)
        : undefined,
      conversationModelConfig: isSet(object.conversationModelConfig)
        ? HumanAgentAssistantConfig_ConversationModelConfig.fromJSON(object.conversationModelConfig)
        : undefined,
      conversationProcessConfig: isSet(object.conversationProcessConfig)
        ? HumanAgentAssistantConfig_ConversationProcessConfig.fromJSON(object.conversationProcessConfig)
        : undefined,
    };
  },

  toJSON(message: HumanAgentAssistantConfig_SuggestionFeatureConfig): unknown {
    const obj: any = {};
    if (message.suggestionFeature !== undefined) {
      obj.suggestionFeature = SuggestionFeature.toJSON(message.suggestionFeature);
    }
    if (message.enableEventBasedSuggestion !== false) {
      obj.enableEventBasedSuggestion = message.enableEventBasedSuggestion;
    }
    if (message.disableAgentQueryLogging !== false) {
      obj.disableAgentQueryLogging = message.disableAgentQueryLogging;
    }
    if (message.enableQuerySuggestionWhenNoAnswer !== false) {
      obj.enableQuerySuggestionWhenNoAnswer = message.enableQuerySuggestionWhenNoAnswer;
    }
    if (message.enableConversationAugmentedQuery !== false) {
      obj.enableConversationAugmentedQuery = message.enableConversationAugmentedQuery;
    }
    if (message.enableQuerySuggestionOnly !== false) {
      obj.enableQuerySuggestionOnly = message.enableQuerySuggestionOnly;
    }
    if (message.suggestionTriggerSettings !== undefined) {
      obj.suggestionTriggerSettings = HumanAgentAssistantConfig_SuggestionTriggerSettings.toJSON(
        message.suggestionTriggerSettings,
      );
    }
    if (message.queryConfig !== undefined) {
      obj.queryConfig = HumanAgentAssistantConfig_SuggestionQueryConfig.toJSON(message.queryConfig);
    }
    if (message.conversationModelConfig !== undefined) {
      obj.conversationModelConfig = HumanAgentAssistantConfig_ConversationModelConfig.toJSON(
        message.conversationModelConfig,
      );
    }
    if (message.conversationProcessConfig !== undefined) {
      obj.conversationProcessConfig = HumanAgentAssistantConfig_ConversationProcessConfig.toJSON(
        message.conversationProcessConfig,
      );
    }
    return obj;
  },

  create(
    base?: DeepPartial<HumanAgentAssistantConfig_SuggestionFeatureConfig>,
  ): HumanAgentAssistantConfig_SuggestionFeatureConfig {
    return HumanAgentAssistantConfig_SuggestionFeatureConfig.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<HumanAgentAssistantConfig_SuggestionFeatureConfig>,
  ): HumanAgentAssistantConfig_SuggestionFeatureConfig {
    const message = createBaseHumanAgentAssistantConfig_SuggestionFeatureConfig();
    message.suggestionFeature = (object.suggestionFeature !== undefined && object.suggestionFeature !== null)
      ? SuggestionFeature.fromPartial(object.suggestionFeature)
      : undefined;
    message.enableEventBasedSuggestion = object.enableEventBasedSuggestion ?? false;
    message.disableAgentQueryLogging = object.disableAgentQueryLogging ?? false;
    message.enableQuerySuggestionWhenNoAnswer = object.enableQuerySuggestionWhenNoAnswer ?? false;
    message.enableConversationAugmentedQuery = object.enableConversationAugmentedQuery ?? false;
    message.enableQuerySuggestionOnly = object.enableQuerySuggestionOnly ?? false;
    message.suggestionTriggerSettings =
      (object.suggestionTriggerSettings !== undefined && object.suggestionTriggerSettings !== null)
        ? HumanAgentAssistantConfig_SuggestionTriggerSettings.fromPartial(object.suggestionTriggerSettings)
        : undefined;
    message.queryConfig = (object.queryConfig !== undefined && object.queryConfig !== null)
      ? HumanAgentAssistantConfig_SuggestionQueryConfig.fromPartial(object.queryConfig)
      : undefined;
    message.conversationModelConfig =
      (object.conversationModelConfig !== undefined && object.conversationModelConfig !== null)
        ? HumanAgentAssistantConfig_ConversationModelConfig.fromPartial(object.conversationModelConfig)
        : undefined;
    message.conversationProcessConfig =
      (object.conversationProcessConfig !== undefined && object.conversationProcessConfig !== null)
        ? HumanAgentAssistantConfig_ConversationProcessConfig.fromPartial(object.conversationProcessConfig)
        : undefined;
    return message;
  },
};

function createBaseHumanAgentAssistantConfig_SuggestionConfig(): HumanAgentAssistantConfig_SuggestionConfig {
  return {
    featureConfigs: [],
    groupSuggestionResponses: false,
    generators: [],
    disableHighLatencyFeaturesSyncDelivery: false,
  };
}

export const HumanAgentAssistantConfig_SuggestionConfig: MessageFns<HumanAgentAssistantConfig_SuggestionConfig> = {
  encode(message: HumanAgentAssistantConfig_SuggestionConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.featureConfigs) {
      HumanAgentAssistantConfig_SuggestionFeatureConfig.encode(v!, writer.uint32(18).fork()).join();
    }
    if (message.groupSuggestionResponses !== false) {
      writer.uint32(24).bool(message.groupSuggestionResponses);
    }
    for (const v of message.generators) {
      writer.uint32(34).string(v!);
    }
    if (message.disableHighLatencyFeaturesSyncDelivery !== false) {
      writer.uint32(40).bool(message.disableHighLatencyFeaturesSyncDelivery);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): HumanAgentAssistantConfig_SuggestionConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHumanAgentAssistantConfig_SuggestionConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2:
          if (tag !== 18) {
            break;
          }

          message.featureConfigs.push(
            HumanAgentAssistantConfig_SuggestionFeatureConfig.decode(reader, reader.uint32()),
          );
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.groupSuggestionResponses = reader.bool();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.generators.push(reader.string());
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.disableHighLatencyFeaturesSyncDelivery = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): HumanAgentAssistantConfig_SuggestionConfig {
    return {
      featureConfigs: globalThis.Array.isArray(object?.featureConfigs)
        ? object.featureConfigs.map((e: any) => HumanAgentAssistantConfig_SuggestionFeatureConfig.fromJSON(e))
        : [],
      groupSuggestionResponses: isSet(object.groupSuggestionResponses)
        ? globalThis.Boolean(object.groupSuggestionResponses)
        : false,
      generators: globalThis.Array.isArray(object?.generators)
        ? object.generators.map((e: any) => globalThis.String(e))
        : [],
      disableHighLatencyFeaturesSyncDelivery: isSet(object.disableHighLatencyFeaturesSyncDelivery)
        ? globalThis.Boolean(object.disableHighLatencyFeaturesSyncDelivery)
        : false,
    };
  },

  toJSON(message: HumanAgentAssistantConfig_SuggestionConfig): unknown {
    const obj: any = {};
    if (message.featureConfigs?.length) {
      obj.featureConfigs = message.featureConfigs.map((e) =>
        HumanAgentAssistantConfig_SuggestionFeatureConfig.toJSON(e)
      );
    }
    if (message.groupSuggestionResponses !== false) {
      obj.groupSuggestionResponses = message.groupSuggestionResponses;
    }
    if (message.generators?.length) {
      obj.generators = message.generators;
    }
    if (message.disableHighLatencyFeaturesSyncDelivery !== false) {
      obj.disableHighLatencyFeaturesSyncDelivery = message.disableHighLatencyFeaturesSyncDelivery;
    }
    return obj;
  },

  create(base?: DeepPartial<HumanAgentAssistantConfig_SuggestionConfig>): HumanAgentAssistantConfig_SuggestionConfig {
    return HumanAgentAssistantConfig_SuggestionConfig.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<HumanAgentAssistantConfig_SuggestionConfig>,
  ): HumanAgentAssistantConfig_SuggestionConfig {
    const message = createBaseHumanAgentAssistantConfig_SuggestionConfig();
    message.featureConfigs =
      object.featureConfigs?.map((e) => HumanAgentAssistantConfig_SuggestionFeatureConfig.fromPartial(e)) || [];
    message.groupSuggestionResponses = object.groupSuggestionResponses ?? false;
    message.generators = object.generators?.map((e) => e) || [];
    message.disableHighLatencyFeaturesSyncDelivery = object.disableHighLatencyFeaturesSyncDelivery ?? false;
    return message;
  },
};

function createBaseHumanAgentAssistantConfig_SuggestionQueryConfig(): HumanAgentAssistantConfig_SuggestionQueryConfig {
  return {
    knowledgeBaseQuerySource: undefined,
    documentQuerySource: undefined,
    dialogflowQuerySource: undefined,
    maxResults: 0,
    confidenceThreshold: 0,
    contextFilterSettings: undefined,
    sections: undefined,
  };
}

export const HumanAgentAssistantConfig_SuggestionQueryConfig: MessageFns<
  HumanAgentAssistantConfig_SuggestionQueryConfig
> = {
  encode(
    message: HumanAgentAssistantConfig_SuggestionQueryConfig,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.knowledgeBaseQuerySource !== undefined) {
      HumanAgentAssistantConfig_SuggestionQueryConfig_KnowledgeBaseQuerySource.encode(
        message.knowledgeBaseQuerySource,
        writer.uint32(10).fork(),
      ).join();
    }
    if (message.documentQuerySource !== undefined) {
      HumanAgentAssistantConfig_SuggestionQueryConfig_DocumentQuerySource.encode(
        message.documentQuerySource,
        writer.uint32(18).fork(),
      ).join();
    }
    if (message.dialogflowQuerySource !== undefined) {
      HumanAgentAssistantConfig_SuggestionQueryConfig_DialogflowQuerySource.encode(
        message.dialogflowQuerySource,
        writer.uint32(26).fork(),
      ).join();
    }
    if (message.maxResults !== 0) {
      writer.uint32(32).int32(message.maxResults);
    }
    if (message.confidenceThreshold !== 0) {
      writer.uint32(45).float(message.confidenceThreshold);
    }
    if (message.contextFilterSettings !== undefined) {
      HumanAgentAssistantConfig_SuggestionQueryConfig_ContextFilterSettings.encode(
        message.contextFilterSettings,
        writer.uint32(58).fork(),
      ).join();
    }
    if (message.sections !== undefined) {
      HumanAgentAssistantConfig_SuggestionQueryConfig_Sections.encode(message.sections, writer.uint32(66).fork())
        .join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): HumanAgentAssistantConfig_SuggestionQueryConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHumanAgentAssistantConfig_SuggestionQueryConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.knowledgeBaseQuerySource = HumanAgentAssistantConfig_SuggestionQueryConfig_KnowledgeBaseQuerySource
            .decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.documentQuerySource = HumanAgentAssistantConfig_SuggestionQueryConfig_DocumentQuerySource.decode(
            reader,
            reader.uint32(),
          );
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.dialogflowQuerySource = HumanAgentAssistantConfig_SuggestionQueryConfig_DialogflowQuerySource.decode(
            reader,
            reader.uint32(),
          );
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.maxResults = reader.int32();
          continue;
        case 5:
          if (tag !== 45) {
            break;
          }

          message.confidenceThreshold = reader.float();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.contextFilterSettings = HumanAgentAssistantConfig_SuggestionQueryConfig_ContextFilterSettings.decode(
            reader,
            reader.uint32(),
          );
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.sections = HumanAgentAssistantConfig_SuggestionQueryConfig_Sections.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): HumanAgentAssistantConfig_SuggestionQueryConfig {
    return {
      knowledgeBaseQuerySource: isSet(object.knowledgeBaseQuerySource)
        ? HumanAgentAssistantConfig_SuggestionQueryConfig_KnowledgeBaseQuerySource.fromJSON(
          object.knowledgeBaseQuerySource,
        )
        : undefined,
      documentQuerySource: isSet(object.documentQuerySource)
        ? HumanAgentAssistantConfig_SuggestionQueryConfig_DocumentQuerySource.fromJSON(object.documentQuerySource)
        : undefined,
      dialogflowQuerySource: isSet(object.dialogflowQuerySource)
        ? HumanAgentAssistantConfig_SuggestionQueryConfig_DialogflowQuerySource.fromJSON(object.dialogflowQuerySource)
        : undefined,
      maxResults: isSet(object.maxResults) ? globalThis.Number(object.maxResults) : 0,
      confidenceThreshold: isSet(object.confidenceThreshold) ? globalThis.Number(object.confidenceThreshold) : 0,
      contextFilterSettings: isSet(object.contextFilterSettings)
        ? HumanAgentAssistantConfig_SuggestionQueryConfig_ContextFilterSettings.fromJSON(object.contextFilterSettings)
        : undefined,
      sections: isSet(object.sections)
        ? HumanAgentAssistantConfig_SuggestionQueryConfig_Sections.fromJSON(object.sections)
        : undefined,
    };
  },

  toJSON(message: HumanAgentAssistantConfig_SuggestionQueryConfig): unknown {
    const obj: any = {};
    if (message.knowledgeBaseQuerySource !== undefined) {
      obj.knowledgeBaseQuerySource = HumanAgentAssistantConfig_SuggestionQueryConfig_KnowledgeBaseQuerySource.toJSON(
        message.knowledgeBaseQuerySource,
      );
    }
    if (message.documentQuerySource !== undefined) {
      obj.documentQuerySource = HumanAgentAssistantConfig_SuggestionQueryConfig_DocumentQuerySource.toJSON(
        message.documentQuerySource,
      );
    }
    if (message.dialogflowQuerySource !== undefined) {
      obj.dialogflowQuerySource = HumanAgentAssistantConfig_SuggestionQueryConfig_DialogflowQuerySource.toJSON(
        message.dialogflowQuerySource,
      );
    }
    if (message.maxResults !== 0) {
      obj.maxResults = Math.round(message.maxResults);
    }
    if (message.confidenceThreshold !== 0) {
      obj.confidenceThreshold = message.confidenceThreshold;
    }
    if (message.contextFilterSettings !== undefined) {
      obj.contextFilterSettings = HumanAgentAssistantConfig_SuggestionQueryConfig_ContextFilterSettings.toJSON(
        message.contextFilterSettings,
      );
    }
    if (message.sections !== undefined) {
      obj.sections = HumanAgentAssistantConfig_SuggestionQueryConfig_Sections.toJSON(message.sections);
    }
    return obj;
  },

  create(
    base?: DeepPartial<HumanAgentAssistantConfig_SuggestionQueryConfig>,
  ): HumanAgentAssistantConfig_SuggestionQueryConfig {
    return HumanAgentAssistantConfig_SuggestionQueryConfig.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<HumanAgentAssistantConfig_SuggestionQueryConfig>,
  ): HumanAgentAssistantConfig_SuggestionQueryConfig {
    const message = createBaseHumanAgentAssistantConfig_SuggestionQueryConfig();
    message.knowledgeBaseQuerySource =
      (object.knowledgeBaseQuerySource !== undefined && object.knowledgeBaseQuerySource !== null)
        ? HumanAgentAssistantConfig_SuggestionQueryConfig_KnowledgeBaseQuerySource.fromPartial(
          object.knowledgeBaseQuerySource,
        )
        : undefined;
    message.documentQuerySource = (object.documentQuerySource !== undefined && object.documentQuerySource !== null)
      ? HumanAgentAssistantConfig_SuggestionQueryConfig_DocumentQuerySource.fromPartial(object.documentQuerySource)
      : undefined;
    message.dialogflowQuerySource =
      (object.dialogflowQuerySource !== undefined && object.dialogflowQuerySource !== null)
        ? HumanAgentAssistantConfig_SuggestionQueryConfig_DialogflowQuerySource.fromPartial(
          object.dialogflowQuerySource,
        )
        : undefined;
    message.maxResults = object.maxResults ?? 0;
    message.confidenceThreshold = object.confidenceThreshold ?? 0;
    message.contextFilterSettings =
      (object.contextFilterSettings !== undefined && object.contextFilterSettings !== null)
        ? HumanAgentAssistantConfig_SuggestionQueryConfig_ContextFilterSettings.fromPartial(
          object.contextFilterSettings,
        )
        : undefined;
    message.sections = (object.sections !== undefined && object.sections !== null)
      ? HumanAgentAssistantConfig_SuggestionQueryConfig_Sections.fromPartial(object.sections)
      : undefined;
    return message;
  },
};

function createBaseHumanAgentAssistantConfig_SuggestionQueryConfig_KnowledgeBaseQuerySource(): HumanAgentAssistantConfig_SuggestionQueryConfig_KnowledgeBaseQuerySource {
  return { knowledgeBases: [] };
}

export const HumanAgentAssistantConfig_SuggestionQueryConfig_KnowledgeBaseQuerySource: MessageFns<
  HumanAgentAssistantConfig_SuggestionQueryConfig_KnowledgeBaseQuerySource
> = {
  encode(
    message: HumanAgentAssistantConfig_SuggestionQueryConfig_KnowledgeBaseQuerySource,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    for (const v of message.knowledgeBases) {
      writer.uint32(10).string(v!);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): HumanAgentAssistantConfig_SuggestionQueryConfig_KnowledgeBaseQuerySource {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHumanAgentAssistantConfig_SuggestionQueryConfig_KnowledgeBaseQuerySource();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.knowledgeBases.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): HumanAgentAssistantConfig_SuggestionQueryConfig_KnowledgeBaseQuerySource {
    return {
      knowledgeBases: globalThis.Array.isArray(object?.knowledgeBases)
        ? object.knowledgeBases.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: HumanAgentAssistantConfig_SuggestionQueryConfig_KnowledgeBaseQuerySource): unknown {
    const obj: any = {};
    if (message.knowledgeBases?.length) {
      obj.knowledgeBases = message.knowledgeBases;
    }
    return obj;
  },

  create(
    base?: DeepPartial<HumanAgentAssistantConfig_SuggestionQueryConfig_KnowledgeBaseQuerySource>,
  ): HumanAgentAssistantConfig_SuggestionQueryConfig_KnowledgeBaseQuerySource {
    return HumanAgentAssistantConfig_SuggestionQueryConfig_KnowledgeBaseQuerySource.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<HumanAgentAssistantConfig_SuggestionQueryConfig_KnowledgeBaseQuerySource>,
  ): HumanAgentAssistantConfig_SuggestionQueryConfig_KnowledgeBaseQuerySource {
    const message = createBaseHumanAgentAssistantConfig_SuggestionQueryConfig_KnowledgeBaseQuerySource();
    message.knowledgeBases = object.knowledgeBases?.map((e) => e) || [];
    return message;
  },
};

function createBaseHumanAgentAssistantConfig_SuggestionQueryConfig_DocumentQuerySource(): HumanAgentAssistantConfig_SuggestionQueryConfig_DocumentQuerySource {
  return { documents: [] };
}

export const HumanAgentAssistantConfig_SuggestionQueryConfig_DocumentQuerySource: MessageFns<
  HumanAgentAssistantConfig_SuggestionQueryConfig_DocumentQuerySource
> = {
  encode(
    message: HumanAgentAssistantConfig_SuggestionQueryConfig_DocumentQuerySource,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    for (const v of message.documents) {
      writer.uint32(10).string(v!);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): HumanAgentAssistantConfig_SuggestionQueryConfig_DocumentQuerySource {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHumanAgentAssistantConfig_SuggestionQueryConfig_DocumentQuerySource();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.documents.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): HumanAgentAssistantConfig_SuggestionQueryConfig_DocumentQuerySource {
    return {
      documents: globalThis.Array.isArray(object?.documents)
        ? object.documents.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: HumanAgentAssistantConfig_SuggestionQueryConfig_DocumentQuerySource): unknown {
    const obj: any = {};
    if (message.documents?.length) {
      obj.documents = message.documents;
    }
    return obj;
  },

  create(
    base?: DeepPartial<HumanAgentAssistantConfig_SuggestionQueryConfig_DocumentQuerySource>,
  ): HumanAgentAssistantConfig_SuggestionQueryConfig_DocumentQuerySource {
    return HumanAgentAssistantConfig_SuggestionQueryConfig_DocumentQuerySource.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<HumanAgentAssistantConfig_SuggestionQueryConfig_DocumentQuerySource>,
  ): HumanAgentAssistantConfig_SuggestionQueryConfig_DocumentQuerySource {
    const message = createBaseHumanAgentAssistantConfig_SuggestionQueryConfig_DocumentQuerySource();
    message.documents = object.documents?.map((e) => e) || [];
    return message;
  },
};

function createBaseHumanAgentAssistantConfig_SuggestionQueryConfig_DialogflowQuerySource(): HumanAgentAssistantConfig_SuggestionQueryConfig_DialogflowQuerySource {
  return { agent: "", humanAgentSideConfig: undefined };
}

export const HumanAgentAssistantConfig_SuggestionQueryConfig_DialogflowQuerySource: MessageFns<
  HumanAgentAssistantConfig_SuggestionQueryConfig_DialogflowQuerySource
> = {
  encode(
    message: HumanAgentAssistantConfig_SuggestionQueryConfig_DialogflowQuerySource,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.agent !== "") {
      writer.uint32(10).string(message.agent);
    }
    if (message.humanAgentSideConfig !== undefined) {
      HumanAgentAssistantConfig_SuggestionQueryConfig_DialogflowQuerySource_HumanAgentSideConfig.encode(
        message.humanAgentSideConfig,
        writer.uint32(26).fork(),
      ).join();
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): HumanAgentAssistantConfig_SuggestionQueryConfig_DialogflowQuerySource {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHumanAgentAssistantConfig_SuggestionQueryConfig_DialogflowQuerySource();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.agent = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.humanAgentSideConfig =
            HumanAgentAssistantConfig_SuggestionQueryConfig_DialogflowQuerySource_HumanAgentSideConfig.decode(
              reader,
              reader.uint32(),
            );
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): HumanAgentAssistantConfig_SuggestionQueryConfig_DialogflowQuerySource {
    return {
      agent: isSet(object.agent) ? globalThis.String(object.agent) : "",
      humanAgentSideConfig: isSet(object.humanAgentSideConfig)
        ? HumanAgentAssistantConfig_SuggestionQueryConfig_DialogflowQuerySource_HumanAgentSideConfig.fromJSON(
          object.humanAgentSideConfig,
        )
        : undefined,
    };
  },

  toJSON(message: HumanAgentAssistantConfig_SuggestionQueryConfig_DialogflowQuerySource): unknown {
    const obj: any = {};
    if (message.agent !== "") {
      obj.agent = message.agent;
    }
    if (message.humanAgentSideConfig !== undefined) {
      obj.humanAgentSideConfig =
        HumanAgentAssistantConfig_SuggestionQueryConfig_DialogflowQuerySource_HumanAgentSideConfig.toJSON(
          message.humanAgentSideConfig,
        );
    }
    return obj;
  },

  create(
    base?: DeepPartial<HumanAgentAssistantConfig_SuggestionQueryConfig_DialogflowQuerySource>,
  ): HumanAgentAssistantConfig_SuggestionQueryConfig_DialogflowQuerySource {
    return HumanAgentAssistantConfig_SuggestionQueryConfig_DialogflowQuerySource.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<HumanAgentAssistantConfig_SuggestionQueryConfig_DialogflowQuerySource>,
  ): HumanAgentAssistantConfig_SuggestionQueryConfig_DialogflowQuerySource {
    const message = createBaseHumanAgentAssistantConfig_SuggestionQueryConfig_DialogflowQuerySource();
    message.agent = object.agent ?? "";
    message.humanAgentSideConfig = (object.humanAgentSideConfig !== undefined && object.humanAgentSideConfig !== null)
      ? HumanAgentAssistantConfig_SuggestionQueryConfig_DialogflowQuerySource_HumanAgentSideConfig.fromPartial(
        object.humanAgentSideConfig,
      )
      : undefined;
    return message;
  },
};

function createBaseHumanAgentAssistantConfig_SuggestionQueryConfig_DialogflowQuerySource_HumanAgentSideConfig(): HumanAgentAssistantConfig_SuggestionQueryConfig_DialogflowQuerySource_HumanAgentSideConfig {
  return { agent: "" };
}

export const HumanAgentAssistantConfig_SuggestionQueryConfig_DialogflowQuerySource_HumanAgentSideConfig: MessageFns<
  HumanAgentAssistantConfig_SuggestionQueryConfig_DialogflowQuerySource_HumanAgentSideConfig
> = {
  encode(
    message: HumanAgentAssistantConfig_SuggestionQueryConfig_DialogflowQuerySource_HumanAgentSideConfig,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.agent !== "") {
      writer.uint32(10).string(message.agent);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): HumanAgentAssistantConfig_SuggestionQueryConfig_DialogflowQuerySource_HumanAgentSideConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message =
      createBaseHumanAgentAssistantConfig_SuggestionQueryConfig_DialogflowQuerySource_HumanAgentSideConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.agent = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): HumanAgentAssistantConfig_SuggestionQueryConfig_DialogflowQuerySource_HumanAgentSideConfig {
    return { agent: isSet(object.agent) ? globalThis.String(object.agent) : "" };
  },

  toJSON(message: HumanAgentAssistantConfig_SuggestionQueryConfig_DialogflowQuerySource_HumanAgentSideConfig): unknown {
    const obj: any = {};
    if (message.agent !== "") {
      obj.agent = message.agent;
    }
    return obj;
  },

  create(
    base?: DeepPartial<HumanAgentAssistantConfig_SuggestionQueryConfig_DialogflowQuerySource_HumanAgentSideConfig>,
  ): HumanAgentAssistantConfig_SuggestionQueryConfig_DialogflowQuerySource_HumanAgentSideConfig {
    return HumanAgentAssistantConfig_SuggestionQueryConfig_DialogflowQuerySource_HumanAgentSideConfig.fromPartial(
      base ?? {},
    );
  },
  fromPartial(
    object: DeepPartial<HumanAgentAssistantConfig_SuggestionQueryConfig_DialogflowQuerySource_HumanAgentSideConfig>,
  ): HumanAgentAssistantConfig_SuggestionQueryConfig_DialogflowQuerySource_HumanAgentSideConfig {
    const message =
      createBaseHumanAgentAssistantConfig_SuggestionQueryConfig_DialogflowQuerySource_HumanAgentSideConfig();
    message.agent = object.agent ?? "";
    return message;
  },
};

function createBaseHumanAgentAssistantConfig_SuggestionQueryConfig_ContextFilterSettings(): HumanAgentAssistantConfig_SuggestionQueryConfig_ContextFilterSettings {
  return { dropHandoffMessages: false, dropVirtualAgentMessages: false, dropIvrMessages: false };
}

export const HumanAgentAssistantConfig_SuggestionQueryConfig_ContextFilterSettings: MessageFns<
  HumanAgentAssistantConfig_SuggestionQueryConfig_ContextFilterSettings
> = {
  encode(
    message: HumanAgentAssistantConfig_SuggestionQueryConfig_ContextFilterSettings,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.dropHandoffMessages !== false) {
      writer.uint32(8).bool(message.dropHandoffMessages);
    }
    if (message.dropVirtualAgentMessages !== false) {
      writer.uint32(16).bool(message.dropVirtualAgentMessages);
    }
    if (message.dropIvrMessages !== false) {
      writer.uint32(24).bool(message.dropIvrMessages);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): HumanAgentAssistantConfig_SuggestionQueryConfig_ContextFilterSettings {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHumanAgentAssistantConfig_SuggestionQueryConfig_ContextFilterSettings();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.dropHandoffMessages = reader.bool();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.dropVirtualAgentMessages = reader.bool();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.dropIvrMessages = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): HumanAgentAssistantConfig_SuggestionQueryConfig_ContextFilterSettings {
    return {
      dropHandoffMessages: isSet(object.dropHandoffMessages) ? globalThis.Boolean(object.dropHandoffMessages) : false,
      dropVirtualAgentMessages: isSet(object.dropVirtualAgentMessages)
        ? globalThis.Boolean(object.dropVirtualAgentMessages)
        : false,
      dropIvrMessages: isSet(object.dropIvrMessages) ? globalThis.Boolean(object.dropIvrMessages) : false,
    };
  },

  toJSON(message: HumanAgentAssistantConfig_SuggestionQueryConfig_ContextFilterSettings): unknown {
    const obj: any = {};
    if (message.dropHandoffMessages !== false) {
      obj.dropHandoffMessages = message.dropHandoffMessages;
    }
    if (message.dropVirtualAgentMessages !== false) {
      obj.dropVirtualAgentMessages = message.dropVirtualAgentMessages;
    }
    if (message.dropIvrMessages !== false) {
      obj.dropIvrMessages = message.dropIvrMessages;
    }
    return obj;
  },

  create(
    base?: DeepPartial<HumanAgentAssistantConfig_SuggestionQueryConfig_ContextFilterSettings>,
  ): HumanAgentAssistantConfig_SuggestionQueryConfig_ContextFilterSettings {
    return HumanAgentAssistantConfig_SuggestionQueryConfig_ContextFilterSettings.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<HumanAgentAssistantConfig_SuggestionQueryConfig_ContextFilterSettings>,
  ): HumanAgentAssistantConfig_SuggestionQueryConfig_ContextFilterSettings {
    const message = createBaseHumanAgentAssistantConfig_SuggestionQueryConfig_ContextFilterSettings();
    message.dropHandoffMessages = object.dropHandoffMessages ?? false;
    message.dropVirtualAgentMessages = object.dropVirtualAgentMessages ?? false;
    message.dropIvrMessages = object.dropIvrMessages ?? false;
    return message;
  },
};

function createBaseHumanAgentAssistantConfig_SuggestionQueryConfig_Sections(): HumanAgentAssistantConfig_SuggestionQueryConfig_Sections {
  return { sectionTypes: [] };
}

export const HumanAgentAssistantConfig_SuggestionQueryConfig_Sections: MessageFns<
  HumanAgentAssistantConfig_SuggestionQueryConfig_Sections
> = {
  encode(
    message: HumanAgentAssistantConfig_SuggestionQueryConfig_Sections,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    writer.uint32(10).fork();
    for (const v of message.sectionTypes) {
      writer.int32(v);
    }
    writer.join();
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): HumanAgentAssistantConfig_SuggestionQueryConfig_Sections {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHumanAgentAssistantConfig_SuggestionQueryConfig_Sections();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag === 8) {
            message.sectionTypes.push(reader.int32() as any);

            continue;
          }

          if (tag === 10) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.sectionTypes.push(reader.int32() as any);
            }

            continue;
          }

          break;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): HumanAgentAssistantConfig_SuggestionQueryConfig_Sections {
    return {
      sectionTypes: globalThis.Array.isArray(object?.sectionTypes)
        ? object.sectionTypes.map((e: any) =>
          humanAgentAssistantConfig_SuggestionQueryConfig_Sections_SectionTypeFromJSON(e)
        )
        : [],
    };
  },

  toJSON(message: HumanAgentAssistantConfig_SuggestionQueryConfig_Sections): unknown {
    const obj: any = {};
    if (message.sectionTypes?.length) {
      obj.sectionTypes = message.sectionTypes.map((e) =>
        humanAgentAssistantConfig_SuggestionQueryConfig_Sections_SectionTypeToJSON(e)
      );
    }
    return obj;
  },

  create(
    base?: DeepPartial<HumanAgentAssistantConfig_SuggestionQueryConfig_Sections>,
  ): HumanAgentAssistantConfig_SuggestionQueryConfig_Sections {
    return HumanAgentAssistantConfig_SuggestionQueryConfig_Sections.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<HumanAgentAssistantConfig_SuggestionQueryConfig_Sections>,
  ): HumanAgentAssistantConfig_SuggestionQueryConfig_Sections {
    const message = createBaseHumanAgentAssistantConfig_SuggestionQueryConfig_Sections();
    message.sectionTypes = object.sectionTypes?.map((e) => e) || [];
    return message;
  },
};

function createBaseHumanAgentAssistantConfig_ConversationModelConfig(): HumanAgentAssistantConfig_ConversationModelConfig {
  return { model: "", baselineModelVersion: "" };
}

export const HumanAgentAssistantConfig_ConversationModelConfig: MessageFns<
  HumanAgentAssistantConfig_ConversationModelConfig
> = {
  encode(
    message: HumanAgentAssistantConfig_ConversationModelConfig,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.model !== "") {
      writer.uint32(10).string(message.model);
    }
    if (message.baselineModelVersion !== "") {
      writer.uint32(66).string(message.baselineModelVersion);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): HumanAgentAssistantConfig_ConversationModelConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHumanAgentAssistantConfig_ConversationModelConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.model = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.baselineModelVersion = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): HumanAgentAssistantConfig_ConversationModelConfig {
    return {
      model: isSet(object.model) ? globalThis.String(object.model) : "",
      baselineModelVersion: isSet(object.baselineModelVersion) ? globalThis.String(object.baselineModelVersion) : "",
    };
  },

  toJSON(message: HumanAgentAssistantConfig_ConversationModelConfig): unknown {
    const obj: any = {};
    if (message.model !== "") {
      obj.model = message.model;
    }
    if (message.baselineModelVersion !== "") {
      obj.baselineModelVersion = message.baselineModelVersion;
    }
    return obj;
  },

  create(
    base?: DeepPartial<HumanAgentAssistantConfig_ConversationModelConfig>,
  ): HumanAgentAssistantConfig_ConversationModelConfig {
    return HumanAgentAssistantConfig_ConversationModelConfig.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<HumanAgentAssistantConfig_ConversationModelConfig>,
  ): HumanAgentAssistantConfig_ConversationModelConfig {
    const message = createBaseHumanAgentAssistantConfig_ConversationModelConfig();
    message.model = object.model ?? "";
    message.baselineModelVersion = object.baselineModelVersion ?? "";
    return message;
  },
};

function createBaseHumanAgentAssistantConfig_ConversationProcessConfig(): HumanAgentAssistantConfig_ConversationProcessConfig {
  return { recentSentencesCount: 0 };
}

export const HumanAgentAssistantConfig_ConversationProcessConfig: MessageFns<
  HumanAgentAssistantConfig_ConversationProcessConfig
> = {
  encode(
    message: HumanAgentAssistantConfig_ConversationProcessConfig,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.recentSentencesCount !== 0) {
      writer.uint32(16).int32(message.recentSentencesCount);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): HumanAgentAssistantConfig_ConversationProcessConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHumanAgentAssistantConfig_ConversationProcessConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2:
          if (tag !== 16) {
            break;
          }

          message.recentSentencesCount = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): HumanAgentAssistantConfig_ConversationProcessConfig {
    return {
      recentSentencesCount: isSet(object.recentSentencesCount) ? globalThis.Number(object.recentSentencesCount) : 0,
    };
  },

  toJSON(message: HumanAgentAssistantConfig_ConversationProcessConfig): unknown {
    const obj: any = {};
    if (message.recentSentencesCount !== 0) {
      obj.recentSentencesCount = Math.round(message.recentSentencesCount);
    }
    return obj;
  },

  create(
    base?: DeepPartial<HumanAgentAssistantConfig_ConversationProcessConfig>,
  ): HumanAgentAssistantConfig_ConversationProcessConfig {
    return HumanAgentAssistantConfig_ConversationProcessConfig.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<HumanAgentAssistantConfig_ConversationProcessConfig>,
  ): HumanAgentAssistantConfig_ConversationProcessConfig {
    const message = createBaseHumanAgentAssistantConfig_ConversationProcessConfig();
    message.recentSentencesCount = object.recentSentencesCount ?? 0;
    return message;
  },
};

function createBaseHumanAgentAssistantConfig_MessageAnalysisConfig(): HumanAgentAssistantConfig_MessageAnalysisConfig {
  return { enableEntityExtraction: false, enableSentimentAnalysis: false };
}

export const HumanAgentAssistantConfig_MessageAnalysisConfig: MessageFns<
  HumanAgentAssistantConfig_MessageAnalysisConfig
> = {
  encode(
    message: HumanAgentAssistantConfig_MessageAnalysisConfig,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.enableEntityExtraction !== false) {
      writer.uint32(16).bool(message.enableEntityExtraction);
    }
    if (message.enableSentimentAnalysis !== false) {
      writer.uint32(24).bool(message.enableSentimentAnalysis);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): HumanAgentAssistantConfig_MessageAnalysisConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHumanAgentAssistantConfig_MessageAnalysisConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2:
          if (tag !== 16) {
            break;
          }

          message.enableEntityExtraction = reader.bool();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.enableSentimentAnalysis = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): HumanAgentAssistantConfig_MessageAnalysisConfig {
    return {
      enableEntityExtraction: isSet(object.enableEntityExtraction)
        ? globalThis.Boolean(object.enableEntityExtraction)
        : false,
      enableSentimentAnalysis: isSet(object.enableSentimentAnalysis)
        ? globalThis.Boolean(object.enableSentimentAnalysis)
        : false,
    };
  },

  toJSON(message: HumanAgentAssistantConfig_MessageAnalysisConfig): unknown {
    const obj: any = {};
    if (message.enableEntityExtraction !== false) {
      obj.enableEntityExtraction = message.enableEntityExtraction;
    }
    if (message.enableSentimentAnalysis !== false) {
      obj.enableSentimentAnalysis = message.enableSentimentAnalysis;
    }
    return obj;
  },

  create(
    base?: DeepPartial<HumanAgentAssistantConfig_MessageAnalysisConfig>,
  ): HumanAgentAssistantConfig_MessageAnalysisConfig {
    return HumanAgentAssistantConfig_MessageAnalysisConfig.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<HumanAgentAssistantConfig_MessageAnalysisConfig>,
  ): HumanAgentAssistantConfig_MessageAnalysisConfig {
    const message = createBaseHumanAgentAssistantConfig_MessageAnalysisConfig();
    message.enableEntityExtraction = object.enableEntityExtraction ?? false;
    message.enableSentimentAnalysis = object.enableSentimentAnalysis ?? false;
    return message;
  },
};

function createBaseHumanAgentHandoffConfig(): HumanAgentHandoffConfig {
  return { livePersonConfig: undefined, salesforceLiveAgentConfig: undefined };
}

export const HumanAgentHandoffConfig: MessageFns<HumanAgentHandoffConfig> = {
  encode(message: HumanAgentHandoffConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.livePersonConfig !== undefined) {
      HumanAgentHandoffConfig_LivePersonConfig.encode(message.livePersonConfig, writer.uint32(10).fork()).join();
    }
    if (message.salesforceLiveAgentConfig !== undefined) {
      HumanAgentHandoffConfig_SalesforceLiveAgentConfig.encode(
        message.salesforceLiveAgentConfig,
        writer.uint32(18).fork(),
      ).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): HumanAgentHandoffConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHumanAgentHandoffConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.livePersonConfig = HumanAgentHandoffConfig_LivePersonConfig.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.salesforceLiveAgentConfig = HumanAgentHandoffConfig_SalesforceLiveAgentConfig.decode(
            reader,
            reader.uint32(),
          );
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): HumanAgentHandoffConfig {
    return {
      livePersonConfig: isSet(object.livePersonConfig)
        ? HumanAgentHandoffConfig_LivePersonConfig.fromJSON(object.livePersonConfig)
        : undefined,
      salesforceLiveAgentConfig: isSet(object.salesforceLiveAgentConfig)
        ? HumanAgentHandoffConfig_SalesforceLiveAgentConfig.fromJSON(object.salesforceLiveAgentConfig)
        : undefined,
    };
  },

  toJSON(message: HumanAgentHandoffConfig): unknown {
    const obj: any = {};
    if (message.livePersonConfig !== undefined) {
      obj.livePersonConfig = HumanAgentHandoffConfig_LivePersonConfig.toJSON(message.livePersonConfig);
    }
    if (message.salesforceLiveAgentConfig !== undefined) {
      obj.salesforceLiveAgentConfig = HumanAgentHandoffConfig_SalesforceLiveAgentConfig.toJSON(
        message.salesforceLiveAgentConfig,
      );
    }
    return obj;
  },

  create(base?: DeepPartial<HumanAgentHandoffConfig>): HumanAgentHandoffConfig {
    return HumanAgentHandoffConfig.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<HumanAgentHandoffConfig>): HumanAgentHandoffConfig {
    const message = createBaseHumanAgentHandoffConfig();
    message.livePersonConfig = (object.livePersonConfig !== undefined && object.livePersonConfig !== null)
      ? HumanAgentHandoffConfig_LivePersonConfig.fromPartial(object.livePersonConfig)
      : undefined;
    message.salesforceLiveAgentConfig =
      (object.salesforceLiveAgentConfig !== undefined && object.salesforceLiveAgentConfig !== null)
        ? HumanAgentHandoffConfig_SalesforceLiveAgentConfig.fromPartial(object.salesforceLiveAgentConfig)
        : undefined;
    return message;
  },
};

function createBaseHumanAgentHandoffConfig_LivePersonConfig(): HumanAgentHandoffConfig_LivePersonConfig {
  return { accountNumber: "" };
}

export const HumanAgentHandoffConfig_LivePersonConfig: MessageFns<HumanAgentHandoffConfig_LivePersonConfig> = {
  encode(message: HumanAgentHandoffConfig_LivePersonConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.accountNumber !== "") {
      writer.uint32(10).string(message.accountNumber);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): HumanAgentHandoffConfig_LivePersonConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHumanAgentHandoffConfig_LivePersonConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.accountNumber = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): HumanAgentHandoffConfig_LivePersonConfig {
    return { accountNumber: isSet(object.accountNumber) ? globalThis.String(object.accountNumber) : "" };
  },

  toJSON(message: HumanAgentHandoffConfig_LivePersonConfig): unknown {
    const obj: any = {};
    if (message.accountNumber !== "") {
      obj.accountNumber = message.accountNumber;
    }
    return obj;
  },

  create(base?: DeepPartial<HumanAgentHandoffConfig_LivePersonConfig>): HumanAgentHandoffConfig_LivePersonConfig {
    return HumanAgentHandoffConfig_LivePersonConfig.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<HumanAgentHandoffConfig_LivePersonConfig>): HumanAgentHandoffConfig_LivePersonConfig {
    const message = createBaseHumanAgentHandoffConfig_LivePersonConfig();
    message.accountNumber = object.accountNumber ?? "";
    return message;
  },
};

function createBaseHumanAgentHandoffConfig_SalesforceLiveAgentConfig(): HumanAgentHandoffConfig_SalesforceLiveAgentConfig {
  return { organizationId: "", deploymentId: "", buttonId: "", endpointDomain: "" };
}

export const HumanAgentHandoffConfig_SalesforceLiveAgentConfig: MessageFns<
  HumanAgentHandoffConfig_SalesforceLiveAgentConfig
> = {
  encode(
    message: HumanAgentHandoffConfig_SalesforceLiveAgentConfig,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.organizationId !== "") {
      writer.uint32(10).string(message.organizationId);
    }
    if (message.deploymentId !== "") {
      writer.uint32(18).string(message.deploymentId);
    }
    if (message.buttonId !== "") {
      writer.uint32(26).string(message.buttonId);
    }
    if (message.endpointDomain !== "") {
      writer.uint32(34).string(message.endpointDomain);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): HumanAgentHandoffConfig_SalesforceLiveAgentConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHumanAgentHandoffConfig_SalesforceLiveAgentConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.organizationId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.deploymentId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.buttonId = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.endpointDomain = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): HumanAgentHandoffConfig_SalesforceLiveAgentConfig {
    return {
      organizationId: isSet(object.organizationId) ? globalThis.String(object.organizationId) : "",
      deploymentId: isSet(object.deploymentId) ? globalThis.String(object.deploymentId) : "",
      buttonId: isSet(object.buttonId) ? globalThis.String(object.buttonId) : "",
      endpointDomain: isSet(object.endpointDomain) ? globalThis.String(object.endpointDomain) : "",
    };
  },

  toJSON(message: HumanAgentHandoffConfig_SalesforceLiveAgentConfig): unknown {
    const obj: any = {};
    if (message.organizationId !== "") {
      obj.organizationId = message.organizationId;
    }
    if (message.deploymentId !== "") {
      obj.deploymentId = message.deploymentId;
    }
    if (message.buttonId !== "") {
      obj.buttonId = message.buttonId;
    }
    if (message.endpointDomain !== "") {
      obj.endpointDomain = message.endpointDomain;
    }
    return obj;
  },

  create(
    base?: DeepPartial<HumanAgentHandoffConfig_SalesforceLiveAgentConfig>,
  ): HumanAgentHandoffConfig_SalesforceLiveAgentConfig {
    return HumanAgentHandoffConfig_SalesforceLiveAgentConfig.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<HumanAgentHandoffConfig_SalesforceLiveAgentConfig>,
  ): HumanAgentHandoffConfig_SalesforceLiveAgentConfig {
    const message = createBaseHumanAgentHandoffConfig_SalesforceLiveAgentConfig();
    message.organizationId = object.organizationId ?? "";
    message.deploymentId = object.deploymentId ?? "";
    message.buttonId = object.buttonId ?? "";
    message.endpointDomain = object.endpointDomain ?? "";
    return message;
  },
};

function createBaseNotificationConfig(): NotificationConfig {
  return { topic: "", messageFormat: 0 };
}

export const NotificationConfig: MessageFns<NotificationConfig> = {
  encode(message: NotificationConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.topic !== "") {
      writer.uint32(10).string(message.topic);
    }
    if (message.messageFormat !== 0) {
      writer.uint32(16).int32(message.messageFormat);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): NotificationConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNotificationConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.topic = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.messageFormat = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NotificationConfig {
    return {
      topic: isSet(object.topic) ? globalThis.String(object.topic) : "",
      messageFormat: isSet(object.messageFormat) ? notificationConfig_MessageFormatFromJSON(object.messageFormat) : 0,
    };
  },

  toJSON(message: NotificationConfig): unknown {
    const obj: any = {};
    if (message.topic !== "") {
      obj.topic = message.topic;
    }
    if (message.messageFormat !== 0) {
      obj.messageFormat = notificationConfig_MessageFormatToJSON(message.messageFormat);
    }
    return obj;
  },

  create(base?: DeepPartial<NotificationConfig>): NotificationConfig {
    return NotificationConfig.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<NotificationConfig>): NotificationConfig {
    const message = createBaseNotificationConfig();
    message.topic = object.topic ?? "";
    message.messageFormat = object.messageFormat ?? 0;
    return message;
  },
};

function createBaseLoggingConfig(): LoggingConfig {
  return { enableStackdriverLogging: false };
}

export const LoggingConfig: MessageFns<LoggingConfig> = {
  encode(message: LoggingConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.enableStackdriverLogging !== false) {
      writer.uint32(24).bool(message.enableStackdriverLogging);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LoggingConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLoggingConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 3:
          if (tag !== 24) {
            break;
          }

          message.enableStackdriverLogging = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LoggingConfig {
    return {
      enableStackdriverLogging: isSet(object.enableStackdriverLogging)
        ? globalThis.Boolean(object.enableStackdriverLogging)
        : false,
    };
  },

  toJSON(message: LoggingConfig): unknown {
    const obj: any = {};
    if (message.enableStackdriverLogging !== false) {
      obj.enableStackdriverLogging = message.enableStackdriverLogging;
    }
    return obj;
  },

  create(base?: DeepPartial<LoggingConfig>): LoggingConfig {
    return LoggingConfig.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<LoggingConfig>): LoggingConfig {
    const message = createBaseLoggingConfig();
    message.enableStackdriverLogging = object.enableStackdriverLogging ?? false;
    return message;
  },
};

function createBaseSuggestionFeature(): SuggestionFeature {
  return { type: 0 };
}

export const SuggestionFeature: MessageFns<SuggestionFeature> = {
  encode(message: SuggestionFeature, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.type !== 0) {
      writer.uint32(8).int32(message.type);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SuggestionFeature {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSuggestionFeature();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SuggestionFeature {
    return { type: isSet(object.type) ? suggestionFeature_TypeFromJSON(object.type) : 0 };
  },

  toJSON(message: SuggestionFeature): unknown {
    const obj: any = {};
    if (message.type !== 0) {
      obj.type = suggestionFeature_TypeToJSON(message.type);
    }
    return obj;
  },

  create(base?: DeepPartial<SuggestionFeature>): SuggestionFeature {
    return SuggestionFeature.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SuggestionFeature>): SuggestionFeature {
    const message = createBaseSuggestionFeature();
    message.type = object.type ?? 0;
    return message;
  },
};

function createBaseSetSuggestionFeatureConfigRequest(): SetSuggestionFeatureConfigRequest {
  return { conversationProfile: "", participantRole: 0, suggestionFeatureConfig: undefined };
}

export const SetSuggestionFeatureConfigRequest: MessageFns<SetSuggestionFeatureConfigRequest> = {
  encode(message: SetSuggestionFeatureConfigRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.conversationProfile !== "") {
      writer.uint32(10).string(message.conversationProfile);
    }
    if (message.participantRole !== 0) {
      writer.uint32(16).int32(message.participantRole);
    }
    if (message.suggestionFeatureConfig !== undefined) {
      HumanAgentAssistantConfig_SuggestionFeatureConfig.encode(
        message.suggestionFeatureConfig,
        writer.uint32(26).fork(),
      ).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SetSuggestionFeatureConfigRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetSuggestionFeatureConfigRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.conversationProfile = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.participantRole = reader.int32() as any;
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.suggestionFeatureConfig = HumanAgentAssistantConfig_SuggestionFeatureConfig.decode(
            reader,
            reader.uint32(),
          );
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetSuggestionFeatureConfigRequest {
    return {
      conversationProfile: isSet(object.conversationProfile) ? globalThis.String(object.conversationProfile) : "",
      participantRole: isSet(object.participantRole) ? participant_RoleFromJSON(object.participantRole) : 0,
      suggestionFeatureConfig: isSet(object.suggestionFeatureConfig)
        ? HumanAgentAssistantConfig_SuggestionFeatureConfig.fromJSON(object.suggestionFeatureConfig)
        : undefined,
    };
  },

  toJSON(message: SetSuggestionFeatureConfigRequest): unknown {
    const obj: any = {};
    if (message.conversationProfile !== "") {
      obj.conversationProfile = message.conversationProfile;
    }
    if (message.participantRole !== 0) {
      obj.participantRole = participant_RoleToJSON(message.participantRole);
    }
    if (message.suggestionFeatureConfig !== undefined) {
      obj.suggestionFeatureConfig = HumanAgentAssistantConfig_SuggestionFeatureConfig.toJSON(
        message.suggestionFeatureConfig,
      );
    }
    return obj;
  },

  create(base?: DeepPartial<SetSuggestionFeatureConfigRequest>): SetSuggestionFeatureConfigRequest {
    return SetSuggestionFeatureConfigRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SetSuggestionFeatureConfigRequest>): SetSuggestionFeatureConfigRequest {
    const message = createBaseSetSuggestionFeatureConfigRequest();
    message.conversationProfile = object.conversationProfile ?? "";
    message.participantRole = object.participantRole ?? 0;
    message.suggestionFeatureConfig =
      (object.suggestionFeatureConfig !== undefined && object.suggestionFeatureConfig !== null)
        ? HumanAgentAssistantConfig_SuggestionFeatureConfig.fromPartial(object.suggestionFeatureConfig)
        : undefined;
    return message;
  },
};

function createBaseClearSuggestionFeatureConfigRequest(): ClearSuggestionFeatureConfigRequest {
  return { conversationProfile: "", participantRole: 0, suggestionFeatureType: 0 };
}

export const ClearSuggestionFeatureConfigRequest: MessageFns<ClearSuggestionFeatureConfigRequest> = {
  encode(message: ClearSuggestionFeatureConfigRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.conversationProfile !== "") {
      writer.uint32(10).string(message.conversationProfile);
    }
    if (message.participantRole !== 0) {
      writer.uint32(16).int32(message.participantRole);
    }
    if (message.suggestionFeatureType !== 0) {
      writer.uint32(24).int32(message.suggestionFeatureType);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ClearSuggestionFeatureConfigRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseClearSuggestionFeatureConfigRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.conversationProfile = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.participantRole = reader.int32() as any;
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.suggestionFeatureType = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ClearSuggestionFeatureConfigRequest {
    return {
      conversationProfile: isSet(object.conversationProfile) ? globalThis.String(object.conversationProfile) : "",
      participantRole: isSet(object.participantRole) ? participant_RoleFromJSON(object.participantRole) : 0,
      suggestionFeatureType: isSet(object.suggestionFeatureType)
        ? suggestionFeature_TypeFromJSON(object.suggestionFeatureType)
        : 0,
    };
  },

  toJSON(message: ClearSuggestionFeatureConfigRequest): unknown {
    const obj: any = {};
    if (message.conversationProfile !== "") {
      obj.conversationProfile = message.conversationProfile;
    }
    if (message.participantRole !== 0) {
      obj.participantRole = participant_RoleToJSON(message.participantRole);
    }
    if (message.suggestionFeatureType !== 0) {
      obj.suggestionFeatureType = suggestionFeature_TypeToJSON(message.suggestionFeatureType);
    }
    return obj;
  },

  create(base?: DeepPartial<ClearSuggestionFeatureConfigRequest>): ClearSuggestionFeatureConfigRequest {
    return ClearSuggestionFeatureConfigRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ClearSuggestionFeatureConfigRequest>): ClearSuggestionFeatureConfigRequest {
    const message = createBaseClearSuggestionFeatureConfigRequest();
    message.conversationProfile = object.conversationProfile ?? "";
    message.participantRole = object.participantRole ?? 0;
    message.suggestionFeatureType = object.suggestionFeatureType ?? 0;
    return message;
  },
};

function createBaseSetSuggestionFeatureConfigOperationMetadata(): SetSuggestionFeatureConfigOperationMetadata {
  return { conversationProfile: "", participantRole: 0, suggestionFeatureType: 0, createTime: undefined };
}

export const SetSuggestionFeatureConfigOperationMetadata: MessageFns<SetSuggestionFeatureConfigOperationMetadata> = {
  encode(
    message: SetSuggestionFeatureConfigOperationMetadata,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.conversationProfile !== "") {
      writer.uint32(10).string(message.conversationProfile);
    }
    if (message.participantRole !== 0) {
      writer.uint32(16).int32(message.participantRole);
    }
    if (message.suggestionFeatureType !== 0) {
      writer.uint32(24).int32(message.suggestionFeatureType);
    }
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SetSuggestionFeatureConfigOperationMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetSuggestionFeatureConfigOperationMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.conversationProfile = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.participantRole = reader.int32() as any;
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.suggestionFeatureType = reader.int32() as any;
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetSuggestionFeatureConfigOperationMetadata {
    return {
      conversationProfile: isSet(object.conversationProfile) ? globalThis.String(object.conversationProfile) : "",
      participantRole: isSet(object.participantRole) ? participant_RoleFromJSON(object.participantRole) : 0,
      suggestionFeatureType: isSet(object.suggestionFeatureType)
        ? suggestionFeature_TypeFromJSON(object.suggestionFeatureType)
        : 0,
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
    };
  },

  toJSON(message: SetSuggestionFeatureConfigOperationMetadata): unknown {
    const obj: any = {};
    if (message.conversationProfile !== "") {
      obj.conversationProfile = message.conversationProfile;
    }
    if (message.participantRole !== 0) {
      obj.participantRole = participant_RoleToJSON(message.participantRole);
    }
    if (message.suggestionFeatureType !== 0) {
      obj.suggestionFeatureType = suggestionFeature_TypeToJSON(message.suggestionFeatureType);
    }
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    return obj;
  },

  create(base?: DeepPartial<SetSuggestionFeatureConfigOperationMetadata>): SetSuggestionFeatureConfigOperationMetadata {
    return SetSuggestionFeatureConfigOperationMetadata.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<SetSuggestionFeatureConfigOperationMetadata>,
  ): SetSuggestionFeatureConfigOperationMetadata {
    const message = createBaseSetSuggestionFeatureConfigOperationMetadata();
    message.conversationProfile = object.conversationProfile ?? "";
    message.participantRole = object.participantRole ?? 0;
    message.suggestionFeatureType = object.suggestionFeatureType ?? 0;
    message.createTime = object.createTime ?? undefined;
    return message;
  },
};

function createBaseClearSuggestionFeatureConfigOperationMetadata(): ClearSuggestionFeatureConfigOperationMetadata {
  return { conversationProfile: "", participantRole: 0, suggestionFeatureType: 0, createTime: undefined };
}

export const ClearSuggestionFeatureConfigOperationMetadata: MessageFns<ClearSuggestionFeatureConfigOperationMetadata> =
  {
    encode(
      message: ClearSuggestionFeatureConfigOperationMetadata,
      writer: BinaryWriter = new BinaryWriter(),
    ): BinaryWriter {
      if (message.conversationProfile !== "") {
        writer.uint32(10).string(message.conversationProfile);
      }
      if (message.participantRole !== 0) {
        writer.uint32(16).int32(message.participantRole);
      }
      if (message.suggestionFeatureType !== 0) {
        writer.uint32(24).int32(message.suggestionFeatureType);
      }
      if (message.createTime !== undefined) {
        Timestamp.encode(toTimestamp(message.createTime), writer.uint32(34).fork()).join();
      }
      return writer;
    },

    decode(input: BinaryReader | Uint8Array, length?: number): ClearSuggestionFeatureConfigOperationMetadata {
      const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
      let end = length === undefined ? reader.len : reader.pos + length;
      const message = createBaseClearSuggestionFeatureConfigOperationMetadata();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          case 1:
            if (tag !== 10) {
              break;
            }

            message.conversationProfile = reader.string();
            continue;
          case 2:
            if (tag !== 16) {
              break;
            }

            message.participantRole = reader.int32() as any;
            continue;
          case 3:
            if (tag !== 24) {
              break;
            }

            message.suggestionFeatureType = reader.int32() as any;
            continue;
          case 4:
            if (tag !== 34) {
              break;
            }

            message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
            continue;
        }
        if ((tag & 7) === 4 || tag === 0) {
          break;
        }
        reader.skip(tag & 7);
      }
      return message;
    },

    fromJSON(object: any): ClearSuggestionFeatureConfigOperationMetadata {
      return {
        conversationProfile: isSet(object.conversationProfile) ? globalThis.String(object.conversationProfile) : "",
        participantRole: isSet(object.participantRole) ? participant_RoleFromJSON(object.participantRole) : 0,
        suggestionFeatureType: isSet(object.suggestionFeatureType)
          ? suggestionFeature_TypeFromJSON(object.suggestionFeatureType)
          : 0,
        createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      };
    },

    toJSON(message: ClearSuggestionFeatureConfigOperationMetadata): unknown {
      const obj: any = {};
      if (message.conversationProfile !== "") {
        obj.conversationProfile = message.conversationProfile;
      }
      if (message.participantRole !== 0) {
        obj.participantRole = participant_RoleToJSON(message.participantRole);
      }
      if (message.suggestionFeatureType !== 0) {
        obj.suggestionFeatureType = suggestionFeature_TypeToJSON(message.suggestionFeatureType);
      }
      if (message.createTime !== undefined) {
        obj.createTime = message.createTime.toISOString();
      }
      return obj;
    },

    create(
      base?: DeepPartial<ClearSuggestionFeatureConfigOperationMetadata>,
    ): ClearSuggestionFeatureConfigOperationMetadata {
      return ClearSuggestionFeatureConfigOperationMetadata.fromPartial(base ?? {});
    },
    fromPartial(
      object: DeepPartial<ClearSuggestionFeatureConfigOperationMetadata>,
    ): ClearSuggestionFeatureConfigOperationMetadata {
      const message = createBaseClearSuggestionFeatureConfigOperationMetadata();
      message.conversationProfile = object.conversationProfile ?? "";
      message.participantRole = object.participantRole ?? 0;
      message.suggestionFeatureType = object.suggestionFeatureType ?? 0;
      message.createTime = object.createTime ?? undefined;
      return message;
    },
  };

/**
 * Service for managing
 * [ConversationProfiles][google.cloud.dialogflow.v2.ConversationProfile].
 */
export type ConversationProfilesDefinition = typeof ConversationProfilesDefinition;
export const ConversationProfilesDefinition = {
  name: "ConversationProfiles",
  fullName: "google.cloud.dialogflow.v2.ConversationProfiles",
  methods: {
    /** Returns the list of all conversation profiles in the specified project. */
    listConversationProfiles: {
      name: "ListConversationProfiles",
      requestType: ListConversationProfilesRequest,
      requestStream: false,
      responseType: ListConversationProfilesResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              106,
              90,
              58,
              18,
              56,
              47,
              118,
              50,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              99,
              111,
              110,
              118,
              101,
              114,
              115,
              97,
              116,
              105,
              111,
              110,
              80,
              114,
              111,
              102,
              105,
              108,
              101,
              115,
              18,
              44,
              47,
              118,
              50,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              125,
              47,
              99,
              111,
              110,
              118,
              101,
              114,
              115,
              97,
              116,
              105,
              111,
              110,
              80,
              114,
              111,
              102,
              105,
              108,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /** Retrieves the specified conversation profile. */
    getConversationProfile: {
      name: "GetConversationProfile",
      requestType: GetConversationProfileRequest,
      requestStream: false,
      responseType: ConversationProfile,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              106,
              90,
              58,
              18,
              56,
              47,
              118,
              50,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              111,
              110,
              118,
              101,
              114,
              115,
              97,
              116,
              105,
              111,
              110,
              80,
              114,
              111,
              102,
              105,
              108,
              101,
              115,
              47,
              42,
              125,
              18,
              44,
              47,
              118,
              50,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              99,
              111,
              110,
              118,
              101,
              114,
              115,
              97,
              116,
              105,
              111,
              110,
              80,
              114,
              111,
              102,
              105,
              108,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Creates a conversation profile in the specified project.
     *
     * [ConversationProfile.CreateTime][] and [ConversationProfile.UpdateTime][]
     * aren't populated in the response. You can retrieve them via
     * [GetConversationProfile][google.cloud.dialogflow.v2.ConversationProfiles.GetConversationProfile]
     * API.
     */
    createConversationProfile: {
      name: "CreateConversationProfile",
      requestType: CreateConversationProfileRequest,
      requestStream: false,
      responseType: ConversationProfile,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              27,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              99,
              111,
              110,
              118,
              101,
              114,
              115,
              97,
              116,
              105,
              111,
              110,
              95,
              112,
              114,
              111,
              102,
              105,
              108,
              101,
            ]),
          ],
          578365826: [
            Buffer.from([
              150,
              1,
              58,
              20,
              99,
              111,
              110,
              118,
              101,
              114,
              115,
              97,
              116,
              105,
              111,
              110,
              95,
              112,
              114,
              111,
              102,
              105,
              108,
              101,
              90,
              80,
              58,
              20,
              99,
              111,
              110,
              118,
              101,
              114,
              115,
              97,
              116,
              105,
              111,
              110,
              95,
              112,
              114,
              111,
              102,
              105,
              108,
              101,
              34,
              56,
              47,
              118,
              50,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              99,
              111,
              110,
              118,
              101,
              114,
              115,
              97,
              116,
              105,
              111,
              110,
              80,
              114,
              111,
              102,
              105,
              108,
              101,
              115,
              34,
              44,
              47,
              118,
              50,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              125,
              47,
              99,
              111,
              110,
              118,
              101,
              114,
              115,
              97,
              116,
              105,
              111,
              110,
              80,
              114,
              111,
              102,
              105,
              108,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /**
     * Updates the specified conversation profile.
     *
     * [ConversationProfile.CreateTime][] and [ConversationProfile.UpdateTime][]
     * aren't populated in the response. You can retrieve them via
     * [GetConversationProfile][google.cloud.dialogflow.v2.ConversationProfiles.GetConversationProfile]
     * API.
     */
    updateConversationProfile: {
      name: "UpdateConversationProfile",
      requestType: UpdateConversationProfileRequest,
      requestStream: false,
      responseType: ConversationProfile,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              32,
              99,
              111,
              110,
              118,
              101,
              114,
              115,
              97,
              116,
              105,
              111,
              110,
              95,
              112,
              114,
              111,
              102,
              105,
              108,
              101,
              44,
              117,
              112,
              100,
              97,
              116,
              101,
              95,
              109,
              97,
              115,
              107,
            ]),
          ],
          578365826: [
            Buffer.from([
              192,
              1,
              58,
              20,
              99,
              111,
              110,
              118,
              101,
              114,
              115,
              97,
              116,
              105,
              111,
              110,
              95,
              112,
              114,
              111,
              102,
              105,
              108,
              101,
              90,
              101,
              58,
              20,
              99,
              111,
              110,
              118,
              101,
              114,
              115,
              97,
              116,
              105,
              111,
              110,
              95,
              112,
              114,
              111,
              102,
              105,
              108,
              101,
              50,
              77,
              47,
              118,
              50,
              47,
              123,
              99,
              111,
              110,
              118,
              101,
              114,
              115,
              97,
              116,
              105,
              111,
              110,
              95,
              112,
              114,
              111,
              102,
              105,
              108,
              101,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              111,
              110,
              118,
              101,
              114,
              115,
              97,
              116,
              105,
              111,
              110,
              80,
              114,
              111,
              102,
              105,
              108,
              101,
              115,
              47,
              42,
              125,
              50,
              65,
              47,
              118,
              50,
              47,
              123,
              99,
              111,
              110,
              118,
              101,
              114,
              115,
              97,
              116,
              105,
              111,
              110,
              95,
              112,
              114,
              111,
              102,
              105,
              108,
              101,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              99,
              111,
              110,
              118,
              101,
              114,
              115,
              97,
              116,
              105,
              111,
              110,
              80,
              114,
              111,
              102,
              105,
              108,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Deletes the specified conversation profile. */
    deleteConversationProfile: {
      name: "DeleteConversationProfile",
      requestType: DeleteConversationProfileRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              106,
              90,
              58,
              42,
              56,
              47,
              118,
              50,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              111,
              110,
              118,
              101,
              114,
              115,
              97,
              116,
              105,
              111,
              110,
              80,
              114,
              111,
              102,
              105,
              108,
              101,
              115,
              47,
              42,
              125,
              42,
              44,
              47,
              118,
              50,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              99,
              111,
              110,
              118,
              101,
              114,
              115,
              97,
              116,
              105,
              111,
              110,
              80,
              114,
              111,
              102,
              105,
              108,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Adds or updates a suggestion feature in a conversation profile.
     * If the conversation profile contains the type of suggestion feature for
     * the participant role, it will update it. Otherwise it will insert the
     * suggestion feature.
     *
     * This method is a [long-running
     * operation](https://cloud.google.com/dialogflow/es/docs/how/long-running-operations).
     * The returned `Operation` type has the following method-specific fields:
     *
     * - `metadata`:
     * [SetSuggestionFeatureConfigOperationMetadata][google.cloud.dialogflow.v2.SetSuggestionFeatureConfigOperationMetadata]
     * - `response`:
     * [ConversationProfile][google.cloud.dialogflow.v2.ConversationProfile]
     *
     * If a long running operation to add or update suggestion feature
     * config for the same conversation profile, participant role and suggestion
     * feature type exists, please cancel the existing long running operation
     * before sending such request, otherwise the request will be rejected.
     */
    setSuggestionFeatureConfig: {
      name: "SetSuggestionFeatureConfig",
      requestType: SetSuggestionFeatureConfigRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              66,
              10,
              19,
              67,
              111,
              110,
              118,
              101,
              114,
              115,
              97,
              116,
              105,
              111,
              110,
              80,
              114,
              111,
              102,
              105,
              108,
              101,
              18,
              43,
              83,
              101,
              116,
              83,
              117,
              103,
              103,
              101,
              115,
              116,
              105,
              111,
              110,
              70,
              101,
              97,
              116,
              117,
              114,
              101,
              67,
              111,
              110,
              102,
              105,
              103,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [
            Buffer.from([
              20,
              99,
              111,
              110,
              118,
              101,
              114,
              115,
              97,
              116,
              105,
              111,
              110,
              95,
              112,
              114,
              111,
              102,
              105,
              108,
              101,
            ]),
            Buffer.from([
              63,
              99,
              111,
              110,
              118,
              101,
              114,
              115,
              97,
              116,
              105,
              111,
              110,
              95,
              112,
              114,
              111,
              102,
              105,
              108,
              101,
              44,
              112,
              97,
              114,
              116,
              105,
              99,
              105,
              112,
              97,
              110,
              116,
              95,
              114,
              111,
              108,
              101,
              44,
              115,
              117,
              103,
              103,
              101,
              115,
              116,
              105,
              111,
              110,
              95,
              102,
              101,
              97,
              116,
              117,
              114,
              101,
              95,
              99,
              111,
              110,
              102,
              105,
              103,
            ]),
          ],
          578365826: [
            Buffer.from([
              198,
              1,
              58,
              1,
              42,
              90,
              104,
              58,
              1,
              42,
              34,
              99,
              47,
              118,
              50,
              47,
              123,
              99,
              111,
              110,
              118,
              101,
              114,
              115,
              97,
              116,
              105,
              111,
              110,
              95,
              112,
              114,
              111,
              102,
              105,
              108,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              111,
              110,
              118,
              101,
              114,
              115,
              97,
              116,
              105,
              111,
              110,
              80,
              114,
              111,
              102,
              105,
              108,
              101,
              115,
              47,
              42,
              125,
              58,
              115,
              101,
              116,
              83,
              117,
              103,
              103,
              101,
              115,
              116,
              105,
              111,
              110,
              70,
              101,
              97,
              116,
              117,
              114,
              101,
              67,
              111,
              110,
              102,
              105,
              103,
              34,
              87,
              47,
              118,
              50,
              47,
              123,
              99,
              111,
              110,
              118,
              101,
              114,
              115,
              97,
              116,
              105,
              111,
              110,
              95,
              112,
              114,
              111,
              102,
              105,
              108,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              99,
              111,
              110,
              118,
              101,
              114,
              115,
              97,
              116,
              105,
              111,
              110,
              80,
              114,
              111,
              102,
              105,
              108,
              101,
              115,
              47,
              42,
              125,
              58,
              115,
              101,
              116,
              83,
              117,
              103,
              103,
              101,
              115,
              116,
              105,
              111,
              110,
              70,
              101,
              97,
              116,
              117,
              114,
              101,
              67,
              111,
              110,
              102,
              105,
              103,
            ]),
          ],
        },
      },
    },
    /**
     * Clears a suggestion feature from a conversation profile for the given
     * participant role.
     *
     * This method is a [long-running
     * operation](https://cloud.google.com/dialogflow/es/docs/how/long-running-operations).
     * The returned `Operation` type has the following method-specific fields:
     *
     * - `metadata`:
     * [ClearSuggestionFeatureConfigOperationMetadata][google.cloud.dialogflow.v2.ClearSuggestionFeatureConfigOperationMetadata]
     * - `response`:
     * [ConversationProfile][google.cloud.dialogflow.v2.ConversationProfile]
     */
    clearSuggestionFeatureConfig: {
      name: "ClearSuggestionFeatureConfig",
      requestType: ClearSuggestionFeatureConfigRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              68,
              10,
              19,
              67,
              111,
              110,
              118,
              101,
              114,
              115,
              97,
              116,
              105,
              111,
              110,
              80,
              114,
              111,
              102,
              105,
              108,
              101,
              18,
              45,
              67,
              108,
              101,
              97,
              114,
              83,
              117,
              103,
              103,
              101,
              115,
              116,
              105,
              111,
              110,
              70,
              101,
              97,
              116,
              117,
              114,
              101,
              67,
              111,
              110,
              102,
              105,
              103,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [
            Buffer.from([
              20,
              99,
              111,
              110,
              118,
              101,
              114,
              115,
              97,
              116,
              105,
              111,
              110,
              95,
              112,
              114,
              111,
              102,
              105,
              108,
              101,
            ]),
            Buffer.from([
              61,
              99,
              111,
              110,
              118,
              101,
              114,
              115,
              97,
              116,
              105,
              111,
              110,
              95,
              112,
              114,
              111,
              102,
              105,
              108,
              101,
              44,
              112,
              97,
              114,
              116,
              105,
              99,
              105,
              112,
              97,
              110,
              116,
              95,
              114,
              111,
              108,
              101,
              44,
              115,
              117,
              103,
              103,
              101,
              115,
              116,
              105,
              111,
              110,
              95,
              102,
              101,
              97,
              116,
              117,
              114,
              101,
              95,
              116,
              121,
              112,
              101,
            ]),
          ],
          578365826: [
            Buffer.from([
              202,
              1,
              58,
              1,
              42,
              90,
              106,
              58,
              1,
              42,
              34,
              101,
              47,
              118,
              50,
              47,
              123,
              99,
              111,
              110,
              118,
              101,
              114,
              115,
              97,
              116,
              105,
              111,
              110,
              95,
              112,
              114,
              111,
              102,
              105,
              108,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              111,
              110,
              118,
              101,
              114,
              115,
              97,
              116,
              105,
              111,
              110,
              80,
              114,
              111,
              102,
              105,
              108,
              101,
              115,
              47,
              42,
              125,
              58,
              99,
              108,
              101,
              97,
              114,
              83,
              117,
              103,
              103,
              101,
              115,
              116,
              105,
              111,
              110,
              70,
              101,
              97,
              116,
              117,
              114,
              101,
              67,
              111,
              110,
              102,
              105,
              103,
              34,
              89,
              47,
              118,
              50,
              47,
              123,
              99,
              111,
              110,
              118,
              101,
              114,
              115,
              97,
              116,
              105,
              111,
              110,
              95,
              112,
              114,
              111,
              102,
              105,
              108,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              99,
              111,
              110,
              118,
              101,
              114,
              115,
              97,
              116,
              105,
              111,
              110,
              80,
              114,
              111,
              102,
              105,
              108,
              101,
              115,
              47,
              42,
              125,
              58,
              99,
              108,
              101,
              97,
              114,
              83,
              117,
              103,
              103,
              101,
              115,
              116,
              105,
              111,
              110,
              70,
              101,
              97,
              116,
              117,
              114,
              101,
              67,
              111,
              110,
              102,
              105,
              103,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface ConversationProfilesServiceImplementation<CallContextExt = {}> {
  /** Returns the list of all conversation profiles in the specified project. */
  listConversationProfiles(
    request: ListConversationProfilesRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListConversationProfilesResponse>>;
  /** Retrieves the specified conversation profile. */
  getConversationProfile(
    request: GetConversationProfileRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ConversationProfile>>;
  /**
   * Creates a conversation profile in the specified project.
   *
   * [ConversationProfile.CreateTime][] and [ConversationProfile.UpdateTime][]
   * aren't populated in the response. You can retrieve them via
   * [GetConversationProfile][google.cloud.dialogflow.v2.ConversationProfiles.GetConversationProfile]
   * API.
   */
  createConversationProfile(
    request: CreateConversationProfileRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ConversationProfile>>;
  /**
   * Updates the specified conversation profile.
   *
   * [ConversationProfile.CreateTime][] and [ConversationProfile.UpdateTime][]
   * aren't populated in the response. You can retrieve them via
   * [GetConversationProfile][google.cloud.dialogflow.v2.ConversationProfiles.GetConversationProfile]
   * API.
   */
  updateConversationProfile(
    request: UpdateConversationProfileRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ConversationProfile>>;
  /** Deletes the specified conversation profile. */
  deleteConversationProfile(
    request: DeleteConversationProfileRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Empty>>;
  /**
   * Adds or updates a suggestion feature in a conversation profile.
   * If the conversation profile contains the type of suggestion feature for
   * the participant role, it will update it. Otherwise it will insert the
   * suggestion feature.
   *
   * This method is a [long-running
   * operation](https://cloud.google.com/dialogflow/es/docs/how/long-running-operations).
   * The returned `Operation` type has the following method-specific fields:
   *
   * - `metadata`:
   * [SetSuggestionFeatureConfigOperationMetadata][google.cloud.dialogflow.v2.SetSuggestionFeatureConfigOperationMetadata]
   * - `response`:
   * [ConversationProfile][google.cloud.dialogflow.v2.ConversationProfile]
   *
   * If a long running operation to add or update suggestion feature
   * config for the same conversation profile, participant role and suggestion
   * feature type exists, please cancel the existing long running operation
   * before sending such request, otherwise the request will be rejected.
   */
  setSuggestionFeatureConfig(
    request: SetSuggestionFeatureConfigRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /**
   * Clears a suggestion feature from a conversation profile for the given
   * participant role.
   *
   * This method is a [long-running
   * operation](https://cloud.google.com/dialogflow/es/docs/how/long-running-operations).
   * The returned `Operation` type has the following method-specific fields:
   *
   * - `metadata`:
   * [ClearSuggestionFeatureConfigOperationMetadata][google.cloud.dialogflow.v2.ClearSuggestionFeatureConfigOperationMetadata]
   * - `response`:
   * [ConversationProfile][google.cloud.dialogflow.v2.ConversationProfile]
   */
  clearSuggestionFeatureConfig(
    request: ClearSuggestionFeatureConfigRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
}

export interface ConversationProfilesClient<CallOptionsExt = {}> {
  /** Returns the list of all conversation profiles in the specified project. */
  listConversationProfiles(
    request: DeepPartial<ListConversationProfilesRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListConversationProfilesResponse>;
  /** Retrieves the specified conversation profile. */
  getConversationProfile(
    request: DeepPartial<GetConversationProfileRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ConversationProfile>;
  /**
   * Creates a conversation profile in the specified project.
   *
   * [ConversationProfile.CreateTime][] and [ConversationProfile.UpdateTime][]
   * aren't populated in the response. You can retrieve them via
   * [GetConversationProfile][google.cloud.dialogflow.v2.ConversationProfiles.GetConversationProfile]
   * API.
   */
  createConversationProfile(
    request: DeepPartial<CreateConversationProfileRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ConversationProfile>;
  /**
   * Updates the specified conversation profile.
   *
   * [ConversationProfile.CreateTime][] and [ConversationProfile.UpdateTime][]
   * aren't populated in the response. You can retrieve them via
   * [GetConversationProfile][google.cloud.dialogflow.v2.ConversationProfiles.GetConversationProfile]
   * API.
   */
  updateConversationProfile(
    request: DeepPartial<UpdateConversationProfileRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ConversationProfile>;
  /** Deletes the specified conversation profile. */
  deleteConversationProfile(
    request: DeepPartial<DeleteConversationProfileRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Empty>;
  /**
   * Adds or updates a suggestion feature in a conversation profile.
   * If the conversation profile contains the type of suggestion feature for
   * the participant role, it will update it. Otherwise it will insert the
   * suggestion feature.
   *
   * This method is a [long-running
   * operation](https://cloud.google.com/dialogflow/es/docs/how/long-running-operations).
   * The returned `Operation` type has the following method-specific fields:
   *
   * - `metadata`:
   * [SetSuggestionFeatureConfigOperationMetadata][google.cloud.dialogflow.v2.SetSuggestionFeatureConfigOperationMetadata]
   * - `response`:
   * [ConversationProfile][google.cloud.dialogflow.v2.ConversationProfile]
   *
   * If a long running operation to add or update suggestion feature
   * config for the same conversation profile, participant role and suggestion
   * feature type exists, please cancel the existing long running operation
   * before sending such request, otherwise the request will be rejected.
   */
  setSuggestionFeatureConfig(
    request: DeepPartial<SetSuggestionFeatureConfigRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /**
   * Clears a suggestion feature from a conversation profile for the given
   * participant role.
   *
   * This method is a [long-running
   * operation](https://cloud.google.com/dialogflow/es/docs/how/long-running-operations).
   * The returned `Operation` type has the following method-specific fields:
   *
   * - `metadata`:
   * [ClearSuggestionFeatureConfigOperationMetadata][google.cloud.dialogflow.v2.ClearSuggestionFeatureConfigOperationMetadata]
   * - `response`:
   * [ConversationProfile][google.cloud.dialogflow.v2.ConversationProfile]
   */
  clearSuggestionFeatureConfig(
    request: DeepPartial<ClearSuggestionFeatureConfigRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
