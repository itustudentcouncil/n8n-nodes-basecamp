// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/dialogflow/v2/encryption_spec.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { Operation } from "../../../longrunning/operations.js";

export const protobufPackage = "google.cloud.dialogflow.v2";

/** The request to get location-level encryption specification. */
export interface GetEncryptionSpecRequest {
  /** Required. The name of the encryption spec resource to get. */
  name: string;
}

/**
 * A customer-managed encryption key specification that can be applied to all
 * created resources (e.g. Conversation).
 */
export interface EncryptionSpec {
  /**
   * Immutable. The resource name of the encryption key specification resource.
   * Format:
   * projects/{project}/locations/{location}/encryptionSpec
   */
  name: string;
  /**
   * Required. The name of customer-managed encryption key that is used to
   * secure a resource and its sub-resources. If empty, the resource is secured
   * by the default Google encryption key. Only the key in the same location as
   * this resource is allowed to be used for encryption. Format:
   * `projects/{project}/locations/{location}/keyRings/{keyRing}/cryptoKeys/{key}`
   */
  kmsKey: string;
}

/** The request to initialize a location-level encryption specification. */
export interface InitializeEncryptionSpecRequest {
  /**
   * Required. The encryption spec used for CMEK encryption. It is required that
   * the kms key is in the same region as the endpoint. The same key will be
   * used for all provisioned resources, if encryption is available. If the
   * kms_key_name is left empty, no encryption will be enforced.
   */
  encryptionSpec: EncryptionSpec | undefined;
}

/** The response to initialize a location-level encryption specification. */
export interface InitializeEncryptionSpecResponse {
}

/** Metadata for initializing a location-level encryption specification. */
export interface InitializeEncryptionSpecMetadata {
  /** Output only. The original request for initialization. */
  request: InitializeEncryptionSpecRequest | undefined;
}

function createBaseGetEncryptionSpecRequest(): GetEncryptionSpecRequest {
  return { name: "" };
}

export const GetEncryptionSpecRequest: MessageFns<GetEncryptionSpecRequest> = {
  encode(message: GetEncryptionSpecRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetEncryptionSpecRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetEncryptionSpecRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetEncryptionSpecRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetEncryptionSpecRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetEncryptionSpecRequest>): GetEncryptionSpecRequest {
    return GetEncryptionSpecRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetEncryptionSpecRequest>): GetEncryptionSpecRequest {
    const message = createBaseGetEncryptionSpecRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseEncryptionSpec(): EncryptionSpec {
  return { name: "", kmsKey: "" };
}

export const EncryptionSpec: MessageFns<EncryptionSpec> = {
  encode(message: EncryptionSpec, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.kmsKey !== "") {
      writer.uint32(18).string(message.kmsKey);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EncryptionSpec {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEncryptionSpec();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.kmsKey = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EncryptionSpec {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      kmsKey: isSet(object.kmsKey) ? globalThis.String(object.kmsKey) : "",
    };
  },

  toJSON(message: EncryptionSpec): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.kmsKey !== "") {
      obj.kmsKey = message.kmsKey;
    }
    return obj;
  },

  create(base?: DeepPartial<EncryptionSpec>): EncryptionSpec {
    return EncryptionSpec.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<EncryptionSpec>): EncryptionSpec {
    const message = createBaseEncryptionSpec();
    message.name = object.name ?? "";
    message.kmsKey = object.kmsKey ?? "";
    return message;
  },
};

function createBaseInitializeEncryptionSpecRequest(): InitializeEncryptionSpecRequest {
  return { encryptionSpec: undefined };
}

export const InitializeEncryptionSpecRequest: MessageFns<InitializeEncryptionSpecRequest> = {
  encode(message: InitializeEncryptionSpecRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.encryptionSpec !== undefined) {
      EncryptionSpec.encode(message.encryptionSpec, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): InitializeEncryptionSpecRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInitializeEncryptionSpecRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.encryptionSpec = EncryptionSpec.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): InitializeEncryptionSpecRequest {
    return {
      encryptionSpec: isSet(object.encryptionSpec) ? EncryptionSpec.fromJSON(object.encryptionSpec) : undefined,
    };
  },

  toJSON(message: InitializeEncryptionSpecRequest): unknown {
    const obj: any = {};
    if (message.encryptionSpec !== undefined) {
      obj.encryptionSpec = EncryptionSpec.toJSON(message.encryptionSpec);
    }
    return obj;
  },

  create(base?: DeepPartial<InitializeEncryptionSpecRequest>): InitializeEncryptionSpecRequest {
    return InitializeEncryptionSpecRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<InitializeEncryptionSpecRequest>): InitializeEncryptionSpecRequest {
    const message = createBaseInitializeEncryptionSpecRequest();
    message.encryptionSpec = (object.encryptionSpec !== undefined && object.encryptionSpec !== null)
      ? EncryptionSpec.fromPartial(object.encryptionSpec)
      : undefined;
    return message;
  },
};

function createBaseInitializeEncryptionSpecResponse(): InitializeEncryptionSpecResponse {
  return {};
}

export const InitializeEncryptionSpecResponse: MessageFns<InitializeEncryptionSpecResponse> = {
  encode(_: InitializeEncryptionSpecResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): InitializeEncryptionSpecResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInitializeEncryptionSpecResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): InitializeEncryptionSpecResponse {
    return {};
  },

  toJSON(_: InitializeEncryptionSpecResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<InitializeEncryptionSpecResponse>): InitializeEncryptionSpecResponse {
    return InitializeEncryptionSpecResponse.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<InitializeEncryptionSpecResponse>): InitializeEncryptionSpecResponse {
    const message = createBaseInitializeEncryptionSpecResponse();
    return message;
  },
};

function createBaseInitializeEncryptionSpecMetadata(): InitializeEncryptionSpecMetadata {
  return { request: undefined };
}

export const InitializeEncryptionSpecMetadata: MessageFns<InitializeEncryptionSpecMetadata> = {
  encode(message: InitializeEncryptionSpecMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.request !== undefined) {
      InitializeEncryptionSpecRequest.encode(message.request, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): InitializeEncryptionSpecMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInitializeEncryptionSpecMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 4:
          if (tag !== 34) {
            break;
          }

          message.request = InitializeEncryptionSpecRequest.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): InitializeEncryptionSpecMetadata {
    return { request: isSet(object.request) ? InitializeEncryptionSpecRequest.fromJSON(object.request) : undefined };
  },

  toJSON(message: InitializeEncryptionSpecMetadata): unknown {
    const obj: any = {};
    if (message.request !== undefined) {
      obj.request = InitializeEncryptionSpecRequest.toJSON(message.request);
    }
    return obj;
  },

  create(base?: DeepPartial<InitializeEncryptionSpecMetadata>): InitializeEncryptionSpecMetadata {
    return InitializeEncryptionSpecMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<InitializeEncryptionSpecMetadata>): InitializeEncryptionSpecMetadata {
    const message = createBaseInitializeEncryptionSpecMetadata();
    message.request = (object.request !== undefined && object.request !== null)
      ? InitializeEncryptionSpecRequest.fromPartial(object.request)
      : undefined;
    return message;
  },
};

/** Manages encryption spec settings for Dialogflow and Agent Assist. */
export type EncryptionSpecServiceDefinition = typeof EncryptionSpecServiceDefinition;
export const EncryptionSpecServiceDefinition = {
  name: "EncryptionSpecService",
  fullName: "google.cloud.dialogflow.v2.EncryptionSpecService",
  methods: {
    /** Gets location-level encryption key specification. */
    getEncryptionSpec: {
      name: "GetEncryptionSpec",
      requestType: GetEncryptionSpecRequest,
      requestStream: false,
      responseType: EncryptionSpec,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              50,
              18,
              48,
              47,
              118,
              50,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              101,
              110,
              99,
              114,
              121,
              112,
              116,
              105,
              111,
              110,
              83,
              112,
              101,
              99,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Initializes a location-level encryption key specification.  An error will
     * be thrown if the location has resources already created before the
     * initialization. Once the encryption specification is initialized at a
     * location, it is immutable and all newly created resources under the
     * location will be encrypted with the existing specification.
     */
    initializeEncryptionSpec: {
      name: "InitializeEncryptionSpec",
      requestType: InitializeEncryptionSpecRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              68,
              10,
              32,
              73,
              110,
              105,
              116,
              105,
              97,
              108,
              105,
              122,
              101,
              69,
              110,
              99,
              114,
              121,
              112,
              116,
              105,
              111,
              110,
              83,
              112,
              101,
              99,
              82,
              101,
              115,
              112,
              111,
              110,
              115,
              101,
              18,
              32,
              73,
              110,
              105,
              116,
              105,
              97,
              108,
              105,
              122,
              101,
              69,
              110,
              99,
              114,
              121,
              112,
              116,
              105,
              111,
              110,
              83,
              112,
              101,
              99,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([15, 101, 110, 99, 114, 121, 112, 116, 105, 111, 110, 95, 115, 112, 101, 99])],
          578365826: [
            Buffer.from([
              80,
              58,
              1,
              42,
              34,
              75,
              47,
              118,
              50,
              47,
              123,
              101,
              110,
              99,
              114,
              121,
              112,
              116,
              105,
              111,
              110,
              95,
              115,
              112,
              101,
              99,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              101,
              110,
              99,
              114,
              121,
              112,
              116,
              105,
              111,
              110,
              83,
              112,
              101,
              99,
              125,
              58,
              105,
              110,
              105,
              116,
              105,
              97,
              108,
              105,
              122,
              101,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface EncryptionSpecServiceImplementation<CallContextExt = {}> {
  /** Gets location-level encryption key specification. */
  getEncryptionSpec(
    request: GetEncryptionSpecRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<EncryptionSpec>>;
  /**
   * Initializes a location-level encryption key specification.  An error will
   * be thrown if the location has resources already created before the
   * initialization. Once the encryption specification is initialized at a
   * location, it is immutable and all newly created resources under the
   * location will be encrypted with the existing specification.
   */
  initializeEncryptionSpec(
    request: InitializeEncryptionSpecRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
}

export interface EncryptionSpecServiceClient<CallOptionsExt = {}> {
  /** Gets location-level encryption key specification. */
  getEncryptionSpec(
    request: DeepPartial<GetEncryptionSpecRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<EncryptionSpec>;
  /**
   * Initializes a location-level encryption key specification.  An error will
   * be thrown if the location has resources already created before the
   * initialization. Once the encryption specification is initialized at a
   * location, it is immutable and all newly created resources under the
   * location will be encrypted with the existing specification.
   */
  initializeEncryptionSpec(
    request: DeepPartial<InitializeEncryptionSpecRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
