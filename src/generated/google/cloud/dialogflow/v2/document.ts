// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/dialogflow/v2/document.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { Operation } from "../../../longrunning/operations.js";
import { FieldMask } from "../../../protobuf/field_mask.js";
import { Timestamp } from "../../../protobuf/timestamp.js";
import { Status } from "../../../rpc/status.js";
import { GcsDestination, GcsSources } from "./gcs.js";

export const protobufPackage = "google.cloud.dialogflow.v2";

/**
 * A knowledge document to be used by a
 * [KnowledgeBase][google.cloud.dialogflow.v2.KnowledgeBase].
 *
 * For more information, see the [knowledge base
 * guide](https://cloud.google.com/dialogflow/docs/how/knowledge-bases).
 *
 * Note: The `projects.agent.knowledgeBases.documents` resource is deprecated;
 * only use `projects.knowledgeBases.documents`.
 */
export interface Document {
  /**
   * Optional. The document resource name.
   * The name must be empty when creating a document.
   * Format: `projects/<Project ID>/locations/<Location
   * ID>/knowledgeBases/<Knowledge Base ID>/documents/<Document ID>`.
   */
  name: string;
  /**
   * Required. The display name of the document. The name must be 1024 bytes or
   * less; otherwise, the creation request fails.
   */
  displayName: string;
  /** Required. The MIME type of this document. */
  mimeType: string;
  /** Required. The knowledge type of document content. */
  knowledgeTypes: Document_KnowledgeType[];
  /**
   * The URI where the file content is located.
   *
   * For documents stored in Google Cloud Storage, these URIs must have
   * the form `gs://<bucket-name>/<object-name>`.
   *
   * NOTE: External URLs must correspond to public webpages, i.e., they must
   * be indexed by Google Search. In particular, URLs for showing documents in
   * Google Cloud Storage (i.e. the URL in your browser) are not supported.
   * Instead use the `gs://` format URI described above.
   */
  contentUri?:
    | string
    | undefined;
  /**
   * The raw content of the document. This field is only permitted for
   * EXTRACTIVE_QA and FAQ knowledge types.
   */
  rawContent?:
    | Buffer
    | undefined;
  /**
   * Optional. If true, we try to automatically reload the document every day
   * (at a time picked by the system). If false or unspecified, we don't try
   * to automatically reload the document.
   *
   * Currently you can only enable automatic reload for documents sourced from
   * a public url, see `source` field for the source types.
   *
   * Reload status can be tracked in `latest_reload_status`. If a reload
   * fails, we will keep the document unchanged.
   *
   * If a reload fails with internal errors, the system will try to reload the
   * document on the next day.
   * If a reload fails with non-retriable errors (e.g. PERMISSION_DENIED), the
   * system will not try to reload the document anymore. You need to manually
   * reload the document successfully by calling `ReloadDocument` and clear the
   * errors.
   */
  enableAutoReload: boolean;
  /**
   * Output only. The time and status of the latest reload.
   * This reload may have been triggered automatically or manually
   * and may not have succeeded.
   */
  latestReloadStatus:
    | Document_ReloadStatus
    | undefined;
  /**
   * Optional. Metadata for the document. The metadata supports arbitrary
   * key-value pairs. Suggested use cases include storing a document's title,
   * an external URL distinct from the document's content_uri, etc.
   * The max size of a `key` or a `value` of the metadata is 1024 bytes.
   */
  metadata: { [key: string]: string };
  /** Output only. The current state of the document. */
  state: Document_State;
}

/** The knowledge type of document content. */
export enum Document_KnowledgeType {
  /** KNOWLEDGE_TYPE_UNSPECIFIED - The type is unspecified or arbitrary. */
  KNOWLEDGE_TYPE_UNSPECIFIED = 0,
  /**
   * FAQ - The document content contains question and answer pairs as either HTML or
   * CSV. Typical FAQ HTML formats are parsed accurately, but unusual formats
   * may fail to be parsed.
   *
   * CSV must have questions in the first column and answers in the second,
   * with no header. Because of this explicit format, they are always parsed
   * accurately.
   */
  FAQ = 1,
  /**
   * EXTRACTIVE_QA - Documents for which unstructured text is extracted and used for
   * question answering.
   */
  EXTRACTIVE_QA = 2,
  /**
   * ARTICLE_SUGGESTION - The entire document content as a whole can be used for query results.
   * Only for Contact Center Solutions on Dialogflow.
   */
  ARTICLE_SUGGESTION = 3,
  /** AGENT_FACING_SMART_REPLY - The document contains agent-facing Smart Reply entries. */
  AGENT_FACING_SMART_REPLY = 4,
  UNRECOGNIZED = -1,
}

export function document_KnowledgeTypeFromJSON(object: any): Document_KnowledgeType {
  switch (object) {
    case 0:
    case "KNOWLEDGE_TYPE_UNSPECIFIED":
      return Document_KnowledgeType.KNOWLEDGE_TYPE_UNSPECIFIED;
    case 1:
    case "FAQ":
      return Document_KnowledgeType.FAQ;
    case 2:
    case "EXTRACTIVE_QA":
      return Document_KnowledgeType.EXTRACTIVE_QA;
    case 3:
    case "ARTICLE_SUGGESTION":
      return Document_KnowledgeType.ARTICLE_SUGGESTION;
    case 4:
    case "AGENT_FACING_SMART_REPLY":
      return Document_KnowledgeType.AGENT_FACING_SMART_REPLY;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Document_KnowledgeType.UNRECOGNIZED;
  }
}

export function document_KnowledgeTypeToJSON(object: Document_KnowledgeType): string {
  switch (object) {
    case Document_KnowledgeType.KNOWLEDGE_TYPE_UNSPECIFIED:
      return "KNOWLEDGE_TYPE_UNSPECIFIED";
    case Document_KnowledgeType.FAQ:
      return "FAQ";
    case Document_KnowledgeType.EXTRACTIVE_QA:
      return "EXTRACTIVE_QA";
    case Document_KnowledgeType.ARTICLE_SUGGESTION:
      return "ARTICLE_SUGGESTION";
    case Document_KnowledgeType.AGENT_FACING_SMART_REPLY:
      return "AGENT_FACING_SMART_REPLY";
    case Document_KnowledgeType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Possible states of the document */
export enum Document_State {
  /** STATE_UNSPECIFIED - The document state is unspecified. */
  STATE_UNSPECIFIED = 0,
  /** CREATING - The document creation is in progress. */
  CREATING = 1,
  /** ACTIVE - The document is active and ready to use. */
  ACTIVE = 2,
  /** UPDATING - The document updation is in progress. */
  UPDATING = 3,
  /** RELOADING - The document is reloading. */
  RELOADING = 4,
  /** DELETING - The document deletion is in progress. */
  DELETING = 5,
  UNRECOGNIZED = -1,
}

export function document_StateFromJSON(object: any): Document_State {
  switch (object) {
    case 0:
    case "STATE_UNSPECIFIED":
      return Document_State.STATE_UNSPECIFIED;
    case 1:
    case "CREATING":
      return Document_State.CREATING;
    case 2:
    case "ACTIVE":
      return Document_State.ACTIVE;
    case 3:
    case "UPDATING":
      return Document_State.UPDATING;
    case 4:
    case "RELOADING":
      return Document_State.RELOADING;
    case 5:
    case "DELETING":
      return Document_State.DELETING;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Document_State.UNRECOGNIZED;
  }
}

export function document_StateToJSON(object: Document_State): string {
  switch (object) {
    case Document_State.STATE_UNSPECIFIED:
      return "STATE_UNSPECIFIED";
    case Document_State.CREATING:
      return "CREATING";
    case Document_State.ACTIVE:
      return "ACTIVE";
    case Document_State.UPDATING:
      return "UPDATING";
    case Document_State.RELOADING:
      return "RELOADING";
    case Document_State.DELETING:
      return "DELETING";
    case Document_State.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** The status of a reload attempt. */
export interface Document_ReloadStatus {
  /**
   * The time of a reload attempt.
   * This reload may have been triggered automatically or manually and may
   * not have succeeded.
   */
  time:
    | Date
    | undefined;
  /** The status of a reload attempt or the initial load. */
  status: Status | undefined;
}

export interface Document_MetadataEntry {
  key: string;
  value: string;
}

/**
 * Request message for
 * [Documents.GetDocument][google.cloud.dialogflow.v2.Documents.GetDocument].
 */
export interface GetDocumentRequest {
  /**
   * Required. The name of the document to retrieve.
   * Format `projects/<Project ID>/locations/<Location
   * ID>/knowledgeBases/<Knowledge Base ID>/documents/<Document ID>`.
   */
  name: string;
}

/**
 * Request message for
 * [Documents.ListDocuments][google.cloud.dialogflow.v2.Documents.ListDocuments].
 */
export interface ListDocumentsRequest {
  /**
   * Required. The knowledge base to list all documents for.
   * Format: `projects/<Project ID>/locations/<Location
   * ID>/knowledgeBases/<Knowledge Base ID>`.
   */
  parent: string;
  /**
   * The maximum number of items to return in a single page. By
   * default 10 and at most 100.
   */
  pageSize: number;
  /** The next_page_token value returned from a previous list request. */
  pageToken: string;
  /**
   * The filter expression used to filter documents returned by the list method.
   * The expression has the following syntax:
   *
   *   <field> <operator> <value> [AND <field> <operator> <value>] ...
   *
   * The following fields and operators are supported:
   *
   * * knowledge_types with has(:) operator
   * * display_name with has(:) operator
   * * state with equals(=) operator
   *
   * Examples:
   *
   * * "knowledge_types:FAQ" matches documents with FAQ knowledge type.
   * * "display_name:customer" matches documents whose display name contains
   *   "customer".
   * * "state=ACTIVE" matches documents with ACTIVE state.
   * * "knowledge_types:FAQ AND state=ACTIVE" matches all active FAQ documents.
   *
   * For more information about filtering, see
   * [API Filtering](https://aip.dev/160).
   */
  filter: string;
}

/**
 * Response message for
 * [Documents.ListDocuments][google.cloud.dialogflow.v2.Documents.ListDocuments].
 */
export interface ListDocumentsResponse {
  /** The list of documents. */
  documents: Document[];
  /**
   * Token to retrieve the next page of results, or empty if there are no
   * more results in the list.
   */
  nextPageToken: string;
}

/**
 * Request message for
 * [Documents.CreateDocument][google.cloud.dialogflow.v2.Documents.CreateDocument].
 */
export interface CreateDocumentRequest {
  /**
   * Required. The knowledge base to create a document for.
   * Format: `projects/<Project ID>/locations/<Location
   * ID>/knowledgeBases/<Knowledge Base ID>`.
   */
  parent: string;
  /** Required. The document to create. */
  document: Document | undefined;
}

/**
 * Request message for
 * [Documents.ImportDocuments][google.cloud.dialogflow.v2.Documents.ImportDocuments].
 */
export interface ImportDocumentsRequest {
  /**
   * Required. The knowledge base to import documents into.
   * Format: `projects/<Project ID>/locations/<Location
   * ID>/knowledgeBases/<Knowledge Base ID>`.
   */
  parent: string;
  /**
   * Optional. The Google Cloud Storage location for the documents.
   * The path can include a wildcard.
   *
   * These URIs may have the forms
   * `gs://<bucket-name>/<object-name>`.
   * `gs://<bucket-name>/<object-path>/*.<extension>`.
   */
  gcsSource?:
    | GcsSources
    | undefined;
  /** Required. Document template used for importing all the documents. */
  documentTemplate:
    | ImportDocumentTemplate
    | undefined;
  /**
   * Whether to import custom metadata from Google Cloud Storage.
   * Only valid when the document source is Google Cloud Storage URI.
   */
  importGcsCustomMetadata: boolean;
}

/** The template used for importing documents. */
export interface ImportDocumentTemplate {
  /** Required. The MIME type of the document. */
  mimeType: string;
  /** Required. The knowledge type of document content. */
  knowledgeTypes: Document_KnowledgeType[];
  /**
   * Metadata for the document. The metadata supports arbitrary
   * key-value pairs. Suggested use cases include storing a document's title,
   * an external URL distinct from the document's content_uri, etc.
   * The max size of a `key` or a `value` of the metadata is 1024 bytes.
   */
  metadata: { [key: string]: string };
}

export interface ImportDocumentTemplate_MetadataEntry {
  key: string;
  value: string;
}

/**
 * Response message for
 * [Documents.ImportDocuments][google.cloud.dialogflow.v2.Documents.ImportDocuments].
 */
export interface ImportDocumentsResponse {
  /** Includes details about skipped documents or any other warnings. */
  warnings: Status[];
}

/**
 * Request message for
 * [Documents.DeleteDocument][google.cloud.dialogflow.v2.Documents.DeleteDocument].
 */
export interface DeleteDocumentRequest {
  /**
   * Required. The name of the document to delete.
   * Format: `projects/<Project ID>/locations/<Location
   * ID>/knowledgeBases/<Knowledge Base ID>/documents/<Document ID>`.
   */
  name: string;
}

/**
 * Request message for
 * [Documents.UpdateDocument][google.cloud.dialogflow.v2.Documents.UpdateDocument].
 */
export interface UpdateDocumentRequest {
  /** Required. The document to update. */
  document:
    | Document
    | undefined;
  /**
   * Optional. Not specified means `update all`.
   * Currently, only `display_name` can be updated, an InvalidArgument will be
   * returned for attempting to update other fields.
   */
  updateMask: string[] | undefined;
}

/**
 * Request message for
 * [Documents.ReloadDocument][google.cloud.dialogflow.v2.Documents.ReloadDocument].
 */
export interface ReloadDocumentRequest {
  /**
   * Required. The name of the document to reload.
   * Format: `projects/<Project ID>/locations/<Location
   * ID>/knowledgeBases/<Knowledge Base ID>/documents/<Document ID>`
   */
  name: string;
  /**
   * Optional. The path of gcs source file for reloading document content. For
   * now, only gcs uri is supported.
   *
   * For documents stored in Google Cloud Storage, these URIs must have
   * the form `gs://<bucket-name>/<object-name>`.
   */
  contentUri?:
    | string
    | undefined;
  /**
   * Optional. Whether to import custom metadata from Google Cloud Storage.
   * Only valid when the document source is Google Cloud Storage URI.
   */
  importGcsCustomMetadata: boolean;
  /**
   * Optional. When enabled, the reload request is to apply partial update to
   * the smart messaging allowlist.
   */
  smartMessagingPartialUpdate: boolean;
}

/**
 * Request message for
 * [Documents.ExportDocument][google.cloud.dialogflow.v2.Documents.ExportDocument].
 */
export interface ExportDocumentRequest {
  /**
   * Required. The name of the document to export.
   * Format: `projects/<Project ID>/locations/<Location
   * ID>/knowledgeBases/<Knowledge Base ID>/documents/<Document ID>`.
   */
  name: string;
  /** Cloud Storage file path to export the document. */
  gcsDestination?:
    | GcsDestination
    | undefined;
  /**
   * When enabled, export the full content of the document including empirical
   * probability.
   */
  exportFullContent: boolean;
  /**
   * When enabled, export the smart messaging allowlist document for partial
   * update.
   */
  smartMessagingPartialUpdate: boolean;
}

/** Metadata related to the Export Data Operations (e.g. ExportDocument). */
export interface ExportOperationMetadata {
  /** Cloud Storage file path of the exported data. */
  exportedGcsDestination: GcsDestination | undefined;
}

/** Metadata in google::longrunning::Operation for Knowledge operations. */
export interface KnowledgeOperationMetadata {
  /** Output only. The current state of this operation. */
  state: KnowledgeOperationMetadata_State;
  /** The name of the knowledge base interacted with during the operation. */
  knowledgeBase: string;
  /** Metadata for the Export Data Operation such as the destination of export. */
  exportOperationMetadata?: ExportOperationMetadata | undefined;
}

/** States of the operation. */
export enum KnowledgeOperationMetadata_State {
  /** STATE_UNSPECIFIED - State unspecified. */
  STATE_UNSPECIFIED = 0,
  /** PENDING - The operation has been created. */
  PENDING = 1,
  /** RUNNING - The operation is currently running. */
  RUNNING = 2,
  /** DONE - The operation is done, either cancelled or completed. */
  DONE = 3,
  UNRECOGNIZED = -1,
}

export function knowledgeOperationMetadata_StateFromJSON(object: any): KnowledgeOperationMetadata_State {
  switch (object) {
    case 0:
    case "STATE_UNSPECIFIED":
      return KnowledgeOperationMetadata_State.STATE_UNSPECIFIED;
    case 1:
    case "PENDING":
      return KnowledgeOperationMetadata_State.PENDING;
    case 2:
    case "RUNNING":
      return KnowledgeOperationMetadata_State.RUNNING;
    case 3:
    case "DONE":
      return KnowledgeOperationMetadata_State.DONE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return KnowledgeOperationMetadata_State.UNRECOGNIZED;
  }
}

export function knowledgeOperationMetadata_StateToJSON(object: KnowledgeOperationMetadata_State): string {
  switch (object) {
    case KnowledgeOperationMetadata_State.STATE_UNSPECIFIED:
      return "STATE_UNSPECIFIED";
    case KnowledgeOperationMetadata_State.PENDING:
      return "PENDING";
    case KnowledgeOperationMetadata_State.RUNNING:
      return "RUNNING";
    case KnowledgeOperationMetadata_State.DONE:
      return "DONE";
    case KnowledgeOperationMetadata_State.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

function createBaseDocument(): Document {
  return {
    name: "",
    displayName: "",
    mimeType: "",
    knowledgeTypes: [],
    contentUri: undefined,
    rawContent: undefined,
    enableAutoReload: false,
    latestReloadStatus: undefined,
    metadata: {},
    state: 0,
  };
}

export const Document: MessageFns<Document> = {
  encode(message: Document, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.displayName !== "") {
      writer.uint32(18).string(message.displayName);
    }
    if (message.mimeType !== "") {
      writer.uint32(26).string(message.mimeType);
    }
    writer.uint32(34).fork();
    for (const v of message.knowledgeTypes) {
      writer.int32(v);
    }
    writer.join();
    if (message.contentUri !== undefined) {
      writer.uint32(42).string(message.contentUri);
    }
    if (message.rawContent !== undefined) {
      writer.uint32(74).bytes(message.rawContent);
    }
    if (message.enableAutoReload !== false) {
      writer.uint32(88).bool(message.enableAutoReload);
    }
    if (message.latestReloadStatus !== undefined) {
      Document_ReloadStatus.encode(message.latestReloadStatus, writer.uint32(98).fork()).join();
    }
    Object.entries(message.metadata).forEach(([key, value]) => {
      Document_MetadataEntry.encode({ key: key as any, value }, writer.uint32(58).fork()).join();
    });
    if (message.state !== 0) {
      writer.uint32(104).int32(message.state);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Document {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDocument();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.displayName = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.mimeType = reader.string();
          continue;
        case 4:
          if (tag === 32) {
            message.knowledgeTypes.push(reader.int32() as any);

            continue;
          }

          if (tag === 34) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.knowledgeTypes.push(reader.int32() as any);
            }

            continue;
          }

          break;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.contentUri = reader.string();
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.rawContent = Buffer.from(reader.bytes());
          continue;
        case 11:
          if (tag !== 88) {
            break;
          }

          message.enableAutoReload = reader.bool();
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }

          message.latestReloadStatus = Document_ReloadStatus.decode(reader, reader.uint32());
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          const entry7 = Document_MetadataEntry.decode(reader, reader.uint32());
          if (entry7.value !== undefined) {
            message.metadata[entry7.key] = entry7.value;
          }
          continue;
        case 13:
          if (tag !== 104) {
            break;
          }

          message.state = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Document {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      displayName: isSet(object.displayName) ? globalThis.String(object.displayName) : "",
      mimeType: isSet(object.mimeType) ? globalThis.String(object.mimeType) : "",
      knowledgeTypes: globalThis.Array.isArray(object?.knowledgeTypes)
        ? object.knowledgeTypes.map((e: any) => document_KnowledgeTypeFromJSON(e))
        : [],
      contentUri: isSet(object.contentUri) ? globalThis.String(object.contentUri) : undefined,
      rawContent: isSet(object.rawContent) ? Buffer.from(bytesFromBase64(object.rawContent)) : undefined,
      enableAutoReload: isSet(object.enableAutoReload) ? globalThis.Boolean(object.enableAutoReload) : false,
      latestReloadStatus: isSet(object.latestReloadStatus)
        ? Document_ReloadStatus.fromJSON(object.latestReloadStatus)
        : undefined,
      metadata: isObject(object.metadata)
        ? Object.entries(object.metadata).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
      state: isSet(object.state) ? document_StateFromJSON(object.state) : 0,
    };
  },

  toJSON(message: Document): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.displayName !== "") {
      obj.displayName = message.displayName;
    }
    if (message.mimeType !== "") {
      obj.mimeType = message.mimeType;
    }
    if (message.knowledgeTypes?.length) {
      obj.knowledgeTypes = message.knowledgeTypes.map((e) => document_KnowledgeTypeToJSON(e));
    }
    if (message.contentUri !== undefined) {
      obj.contentUri = message.contentUri;
    }
    if (message.rawContent !== undefined) {
      obj.rawContent = base64FromBytes(message.rawContent);
    }
    if (message.enableAutoReload !== false) {
      obj.enableAutoReload = message.enableAutoReload;
    }
    if (message.latestReloadStatus !== undefined) {
      obj.latestReloadStatus = Document_ReloadStatus.toJSON(message.latestReloadStatus);
    }
    if (message.metadata) {
      const entries = Object.entries(message.metadata);
      if (entries.length > 0) {
        obj.metadata = {};
        entries.forEach(([k, v]) => {
          obj.metadata[k] = v;
        });
      }
    }
    if (message.state !== 0) {
      obj.state = document_StateToJSON(message.state);
    }
    return obj;
  },

  create(base?: DeepPartial<Document>): Document {
    return Document.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Document>): Document {
    const message = createBaseDocument();
    message.name = object.name ?? "";
    message.displayName = object.displayName ?? "";
    message.mimeType = object.mimeType ?? "";
    message.knowledgeTypes = object.knowledgeTypes?.map((e) => e) || [];
    message.contentUri = object.contentUri ?? undefined;
    message.rawContent = object.rawContent ?? undefined;
    message.enableAutoReload = object.enableAutoReload ?? false;
    message.latestReloadStatus = (object.latestReloadStatus !== undefined && object.latestReloadStatus !== null)
      ? Document_ReloadStatus.fromPartial(object.latestReloadStatus)
      : undefined;
    message.metadata = Object.entries(object.metadata ?? {}).reduce<{ [key: string]: string }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = globalThis.String(value);
      }
      return acc;
    }, {});
    message.state = object.state ?? 0;
    return message;
  },
};

function createBaseDocument_ReloadStatus(): Document_ReloadStatus {
  return { time: undefined, status: undefined };
}

export const Document_ReloadStatus: MessageFns<Document_ReloadStatus> = {
  encode(message: Document_ReloadStatus, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.time !== undefined) {
      Timestamp.encode(toTimestamp(message.time), writer.uint32(10).fork()).join();
    }
    if (message.status !== undefined) {
      Status.encode(message.status, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Document_ReloadStatus {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDocument_ReloadStatus();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.time = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.status = Status.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Document_ReloadStatus {
    return {
      time: isSet(object.time) ? fromJsonTimestamp(object.time) : undefined,
      status: isSet(object.status) ? Status.fromJSON(object.status) : undefined,
    };
  },

  toJSON(message: Document_ReloadStatus): unknown {
    const obj: any = {};
    if (message.time !== undefined) {
      obj.time = message.time.toISOString();
    }
    if (message.status !== undefined) {
      obj.status = Status.toJSON(message.status);
    }
    return obj;
  },

  create(base?: DeepPartial<Document_ReloadStatus>): Document_ReloadStatus {
    return Document_ReloadStatus.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Document_ReloadStatus>): Document_ReloadStatus {
    const message = createBaseDocument_ReloadStatus();
    message.time = object.time ?? undefined;
    message.status = (object.status !== undefined && object.status !== null)
      ? Status.fromPartial(object.status)
      : undefined;
    return message;
  },
};

function createBaseDocument_MetadataEntry(): Document_MetadataEntry {
  return { key: "", value: "" };
}

export const Document_MetadataEntry: MessageFns<Document_MetadataEntry> = {
  encode(message: Document_MetadataEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Document_MetadataEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDocument_MetadataEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Document_MetadataEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: Document_MetadataEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create(base?: DeepPartial<Document_MetadataEntry>): Document_MetadataEntry {
    return Document_MetadataEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Document_MetadataEntry>): Document_MetadataEntry {
    const message = createBaseDocument_MetadataEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseGetDocumentRequest(): GetDocumentRequest {
  return { name: "" };
}

export const GetDocumentRequest: MessageFns<GetDocumentRequest> = {
  encode(message: GetDocumentRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetDocumentRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetDocumentRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetDocumentRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetDocumentRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetDocumentRequest>): GetDocumentRequest {
    return GetDocumentRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetDocumentRequest>): GetDocumentRequest {
    const message = createBaseGetDocumentRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseListDocumentsRequest(): ListDocumentsRequest {
  return { parent: "", pageSize: 0, pageToken: "", filter: "" };
}

export const ListDocumentsRequest: MessageFns<ListDocumentsRequest> = {
  encode(message: ListDocumentsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    if (message.filter !== "") {
      writer.uint32(34).string(message.filter);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListDocumentsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListDocumentsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.filter = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListDocumentsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
    };
  },

  toJSON(message: ListDocumentsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    return obj;
  },

  create(base?: DeepPartial<ListDocumentsRequest>): ListDocumentsRequest {
    return ListDocumentsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListDocumentsRequest>): ListDocumentsRequest {
    const message = createBaseListDocumentsRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.filter = object.filter ?? "";
    return message;
  },
};

function createBaseListDocumentsResponse(): ListDocumentsResponse {
  return { documents: [], nextPageToken: "" };
}

export const ListDocumentsResponse: MessageFns<ListDocumentsResponse> = {
  encode(message: ListDocumentsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.documents) {
      Document.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListDocumentsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListDocumentsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.documents.push(Document.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListDocumentsResponse {
    return {
      documents: globalThis.Array.isArray(object?.documents)
        ? object.documents.map((e: any) => Document.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListDocumentsResponse): unknown {
    const obj: any = {};
    if (message.documents?.length) {
      obj.documents = message.documents.map((e) => Document.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListDocumentsResponse>): ListDocumentsResponse {
    return ListDocumentsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListDocumentsResponse>): ListDocumentsResponse {
    const message = createBaseListDocumentsResponse();
    message.documents = object.documents?.map((e) => Document.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseCreateDocumentRequest(): CreateDocumentRequest {
  return { parent: "", document: undefined };
}

export const CreateDocumentRequest: MessageFns<CreateDocumentRequest> = {
  encode(message: CreateDocumentRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.document !== undefined) {
      Document.encode(message.document, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateDocumentRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateDocumentRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.document = Document.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateDocumentRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      document: isSet(object.document) ? Document.fromJSON(object.document) : undefined,
    };
  },

  toJSON(message: CreateDocumentRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.document !== undefined) {
      obj.document = Document.toJSON(message.document);
    }
    return obj;
  },

  create(base?: DeepPartial<CreateDocumentRequest>): CreateDocumentRequest {
    return CreateDocumentRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateDocumentRequest>): CreateDocumentRequest {
    const message = createBaseCreateDocumentRequest();
    message.parent = object.parent ?? "";
    message.document = (object.document !== undefined && object.document !== null)
      ? Document.fromPartial(object.document)
      : undefined;
    return message;
  },
};

function createBaseImportDocumentsRequest(): ImportDocumentsRequest {
  return { parent: "", gcsSource: undefined, documentTemplate: undefined, importGcsCustomMetadata: false };
}

export const ImportDocumentsRequest: MessageFns<ImportDocumentsRequest> = {
  encode(message: ImportDocumentsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.gcsSource !== undefined) {
      GcsSources.encode(message.gcsSource, writer.uint32(18).fork()).join();
    }
    if (message.documentTemplate !== undefined) {
      ImportDocumentTemplate.encode(message.documentTemplate, writer.uint32(26).fork()).join();
    }
    if (message.importGcsCustomMetadata !== false) {
      writer.uint32(32).bool(message.importGcsCustomMetadata);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ImportDocumentsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseImportDocumentsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.gcsSource = GcsSources.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.documentTemplate = ImportDocumentTemplate.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.importGcsCustomMetadata = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ImportDocumentsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      gcsSource: isSet(object.gcsSource) ? GcsSources.fromJSON(object.gcsSource) : undefined,
      documentTemplate: isSet(object.documentTemplate)
        ? ImportDocumentTemplate.fromJSON(object.documentTemplate)
        : undefined,
      importGcsCustomMetadata: isSet(object.importGcsCustomMetadata)
        ? globalThis.Boolean(object.importGcsCustomMetadata)
        : false,
    };
  },

  toJSON(message: ImportDocumentsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.gcsSource !== undefined) {
      obj.gcsSource = GcsSources.toJSON(message.gcsSource);
    }
    if (message.documentTemplate !== undefined) {
      obj.documentTemplate = ImportDocumentTemplate.toJSON(message.documentTemplate);
    }
    if (message.importGcsCustomMetadata !== false) {
      obj.importGcsCustomMetadata = message.importGcsCustomMetadata;
    }
    return obj;
  },

  create(base?: DeepPartial<ImportDocumentsRequest>): ImportDocumentsRequest {
    return ImportDocumentsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ImportDocumentsRequest>): ImportDocumentsRequest {
    const message = createBaseImportDocumentsRequest();
    message.parent = object.parent ?? "";
    message.gcsSource = (object.gcsSource !== undefined && object.gcsSource !== null)
      ? GcsSources.fromPartial(object.gcsSource)
      : undefined;
    message.documentTemplate = (object.documentTemplate !== undefined && object.documentTemplate !== null)
      ? ImportDocumentTemplate.fromPartial(object.documentTemplate)
      : undefined;
    message.importGcsCustomMetadata = object.importGcsCustomMetadata ?? false;
    return message;
  },
};

function createBaseImportDocumentTemplate(): ImportDocumentTemplate {
  return { mimeType: "", knowledgeTypes: [], metadata: {} };
}

export const ImportDocumentTemplate: MessageFns<ImportDocumentTemplate> = {
  encode(message: ImportDocumentTemplate, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.mimeType !== "") {
      writer.uint32(10).string(message.mimeType);
    }
    writer.uint32(18).fork();
    for (const v of message.knowledgeTypes) {
      writer.int32(v);
    }
    writer.join();
    Object.entries(message.metadata).forEach(([key, value]) => {
      ImportDocumentTemplate_MetadataEntry.encode({ key: key as any, value }, writer.uint32(26).fork()).join();
    });
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ImportDocumentTemplate {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseImportDocumentTemplate();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.mimeType = reader.string();
          continue;
        case 2:
          if (tag === 16) {
            message.knowledgeTypes.push(reader.int32() as any);

            continue;
          }

          if (tag === 18) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.knowledgeTypes.push(reader.int32() as any);
            }

            continue;
          }

          break;
        case 3:
          if (tag !== 26) {
            break;
          }

          const entry3 = ImportDocumentTemplate_MetadataEntry.decode(reader, reader.uint32());
          if (entry3.value !== undefined) {
            message.metadata[entry3.key] = entry3.value;
          }
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ImportDocumentTemplate {
    return {
      mimeType: isSet(object.mimeType) ? globalThis.String(object.mimeType) : "",
      knowledgeTypes: globalThis.Array.isArray(object?.knowledgeTypes)
        ? object.knowledgeTypes.map((e: any) => document_KnowledgeTypeFromJSON(e))
        : [],
      metadata: isObject(object.metadata)
        ? Object.entries(object.metadata).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
    };
  },

  toJSON(message: ImportDocumentTemplate): unknown {
    const obj: any = {};
    if (message.mimeType !== "") {
      obj.mimeType = message.mimeType;
    }
    if (message.knowledgeTypes?.length) {
      obj.knowledgeTypes = message.knowledgeTypes.map((e) => document_KnowledgeTypeToJSON(e));
    }
    if (message.metadata) {
      const entries = Object.entries(message.metadata);
      if (entries.length > 0) {
        obj.metadata = {};
        entries.forEach(([k, v]) => {
          obj.metadata[k] = v;
        });
      }
    }
    return obj;
  },

  create(base?: DeepPartial<ImportDocumentTemplate>): ImportDocumentTemplate {
    return ImportDocumentTemplate.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ImportDocumentTemplate>): ImportDocumentTemplate {
    const message = createBaseImportDocumentTemplate();
    message.mimeType = object.mimeType ?? "";
    message.knowledgeTypes = object.knowledgeTypes?.map((e) => e) || [];
    message.metadata = Object.entries(object.metadata ?? {}).reduce<{ [key: string]: string }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = globalThis.String(value);
      }
      return acc;
    }, {});
    return message;
  },
};

function createBaseImportDocumentTemplate_MetadataEntry(): ImportDocumentTemplate_MetadataEntry {
  return { key: "", value: "" };
}

export const ImportDocumentTemplate_MetadataEntry: MessageFns<ImportDocumentTemplate_MetadataEntry> = {
  encode(message: ImportDocumentTemplate_MetadataEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ImportDocumentTemplate_MetadataEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseImportDocumentTemplate_MetadataEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ImportDocumentTemplate_MetadataEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: ImportDocumentTemplate_MetadataEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create(base?: DeepPartial<ImportDocumentTemplate_MetadataEntry>): ImportDocumentTemplate_MetadataEntry {
    return ImportDocumentTemplate_MetadataEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ImportDocumentTemplate_MetadataEntry>): ImportDocumentTemplate_MetadataEntry {
    const message = createBaseImportDocumentTemplate_MetadataEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseImportDocumentsResponse(): ImportDocumentsResponse {
  return { warnings: [] };
}

export const ImportDocumentsResponse: MessageFns<ImportDocumentsResponse> = {
  encode(message: ImportDocumentsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.warnings) {
      Status.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ImportDocumentsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseImportDocumentsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.warnings.push(Status.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ImportDocumentsResponse {
    return {
      warnings: globalThis.Array.isArray(object?.warnings) ? object.warnings.map((e: any) => Status.fromJSON(e)) : [],
    };
  },

  toJSON(message: ImportDocumentsResponse): unknown {
    const obj: any = {};
    if (message.warnings?.length) {
      obj.warnings = message.warnings.map((e) => Status.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<ImportDocumentsResponse>): ImportDocumentsResponse {
    return ImportDocumentsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ImportDocumentsResponse>): ImportDocumentsResponse {
    const message = createBaseImportDocumentsResponse();
    message.warnings = object.warnings?.map((e) => Status.fromPartial(e)) || [];
    return message;
  },
};

function createBaseDeleteDocumentRequest(): DeleteDocumentRequest {
  return { name: "" };
}

export const DeleteDocumentRequest: MessageFns<DeleteDocumentRequest> = {
  encode(message: DeleteDocumentRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteDocumentRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteDocumentRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteDocumentRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: DeleteDocumentRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteDocumentRequest>): DeleteDocumentRequest {
    return DeleteDocumentRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteDocumentRequest>): DeleteDocumentRequest {
    const message = createBaseDeleteDocumentRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseUpdateDocumentRequest(): UpdateDocumentRequest {
  return { document: undefined, updateMask: undefined };
}

export const UpdateDocumentRequest: MessageFns<UpdateDocumentRequest> = {
  encode(message: UpdateDocumentRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.document !== undefined) {
      Document.encode(message.document, writer.uint32(10).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateDocumentRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateDocumentRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.document = Document.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateDocumentRequest {
    return {
      document: isSet(object.document) ? Document.fromJSON(object.document) : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
    };
  },

  toJSON(message: UpdateDocumentRequest): unknown {
    const obj: any = {};
    if (message.document !== undefined) {
      obj.document = Document.toJSON(message.document);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateDocumentRequest>): UpdateDocumentRequest {
    return UpdateDocumentRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateDocumentRequest>): UpdateDocumentRequest {
    const message = createBaseUpdateDocumentRequest();
    message.document = (object.document !== undefined && object.document !== null)
      ? Document.fromPartial(object.document)
      : undefined;
    message.updateMask = object.updateMask ?? undefined;
    return message;
  },
};

function createBaseReloadDocumentRequest(): ReloadDocumentRequest {
  return { name: "", contentUri: undefined, importGcsCustomMetadata: false, smartMessagingPartialUpdate: false };
}

export const ReloadDocumentRequest: MessageFns<ReloadDocumentRequest> = {
  encode(message: ReloadDocumentRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.contentUri !== undefined) {
      writer.uint32(26).string(message.contentUri);
    }
    if (message.importGcsCustomMetadata !== false) {
      writer.uint32(32).bool(message.importGcsCustomMetadata);
    }
    if (message.smartMessagingPartialUpdate !== false) {
      writer.uint32(40).bool(message.smartMessagingPartialUpdate);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ReloadDocumentRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReloadDocumentRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.contentUri = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.importGcsCustomMetadata = reader.bool();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.smartMessagingPartialUpdate = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ReloadDocumentRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      contentUri: isSet(object.contentUri) ? globalThis.String(object.contentUri) : undefined,
      importGcsCustomMetadata: isSet(object.importGcsCustomMetadata)
        ? globalThis.Boolean(object.importGcsCustomMetadata)
        : false,
      smartMessagingPartialUpdate: isSet(object.smartMessagingPartialUpdate)
        ? globalThis.Boolean(object.smartMessagingPartialUpdate)
        : false,
    };
  },

  toJSON(message: ReloadDocumentRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.contentUri !== undefined) {
      obj.contentUri = message.contentUri;
    }
    if (message.importGcsCustomMetadata !== false) {
      obj.importGcsCustomMetadata = message.importGcsCustomMetadata;
    }
    if (message.smartMessagingPartialUpdate !== false) {
      obj.smartMessagingPartialUpdate = message.smartMessagingPartialUpdate;
    }
    return obj;
  },

  create(base?: DeepPartial<ReloadDocumentRequest>): ReloadDocumentRequest {
    return ReloadDocumentRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ReloadDocumentRequest>): ReloadDocumentRequest {
    const message = createBaseReloadDocumentRequest();
    message.name = object.name ?? "";
    message.contentUri = object.contentUri ?? undefined;
    message.importGcsCustomMetadata = object.importGcsCustomMetadata ?? false;
    message.smartMessagingPartialUpdate = object.smartMessagingPartialUpdate ?? false;
    return message;
  },
};

function createBaseExportDocumentRequest(): ExportDocumentRequest {
  return { name: "", gcsDestination: undefined, exportFullContent: false, smartMessagingPartialUpdate: false };
}

export const ExportDocumentRequest: MessageFns<ExportDocumentRequest> = {
  encode(message: ExportDocumentRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.gcsDestination !== undefined) {
      GcsDestination.encode(message.gcsDestination, writer.uint32(18).fork()).join();
    }
    if (message.exportFullContent !== false) {
      writer.uint32(24).bool(message.exportFullContent);
    }
    if (message.smartMessagingPartialUpdate !== false) {
      writer.uint32(40).bool(message.smartMessagingPartialUpdate);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ExportDocumentRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseExportDocumentRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.gcsDestination = GcsDestination.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.exportFullContent = reader.bool();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.smartMessagingPartialUpdate = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ExportDocumentRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      gcsDestination: isSet(object.gcsDestination) ? GcsDestination.fromJSON(object.gcsDestination) : undefined,
      exportFullContent: isSet(object.exportFullContent) ? globalThis.Boolean(object.exportFullContent) : false,
      smartMessagingPartialUpdate: isSet(object.smartMessagingPartialUpdate)
        ? globalThis.Boolean(object.smartMessagingPartialUpdate)
        : false,
    };
  },

  toJSON(message: ExportDocumentRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.gcsDestination !== undefined) {
      obj.gcsDestination = GcsDestination.toJSON(message.gcsDestination);
    }
    if (message.exportFullContent !== false) {
      obj.exportFullContent = message.exportFullContent;
    }
    if (message.smartMessagingPartialUpdate !== false) {
      obj.smartMessagingPartialUpdate = message.smartMessagingPartialUpdate;
    }
    return obj;
  },

  create(base?: DeepPartial<ExportDocumentRequest>): ExportDocumentRequest {
    return ExportDocumentRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ExportDocumentRequest>): ExportDocumentRequest {
    const message = createBaseExportDocumentRequest();
    message.name = object.name ?? "";
    message.gcsDestination = (object.gcsDestination !== undefined && object.gcsDestination !== null)
      ? GcsDestination.fromPartial(object.gcsDestination)
      : undefined;
    message.exportFullContent = object.exportFullContent ?? false;
    message.smartMessagingPartialUpdate = object.smartMessagingPartialUpdate ?? false;
    return message;
  },
};

function createBaseExportOperationMetadata(): ExportOperationMetadata {
  return { exportedGcsDestination: undefined };
}

export const ExportOperationMetadata: MessageFns<ExportOperationMetadata> = {
  encode(message: ExportOperationMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.exportedGcsDestination !== undefined) {
      GcsDestination.encode(message.exportedGcsDestination, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ExportOperationMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseExportOperationMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.exportedGcsDestination = GcsDestination.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ExportOperationMetadata {
    return {
      exportedGcsDestination: isSet(object.exportedGcsDestination)
        ? GcsDestination.fromJSON(object.exportedGcsDestination)
        : undefined,
    };
  },

  toJSON(message: ExportOperationMetadata): unknown {
    const obj: any = {};
    if (message.exportedGcsDestination !== undefined) {
      obj.exportedGcsDestination = GcsDestination.toJSON(message.exportedGcsDestination);
    }
    return obj;
  },

  create(base?: DeepPartial<ExportOperationMetadata>): ExportOperationMetadata {
    return ExportOperationMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ExportOperationMetadata>): ExportOperationMetadata {
    const message = createBaseExportOperationMetadata();
    message.exportedGcsDestination =
      (object.exportedGcsDestination !== undefined && object.exportedGcsDestination !== null)
        ? GcsDestination.fromPartial(object.exportedGcsDestination)
        : undefined;
    return message;
  },
};

function createBaseKnowledgeOperationMetadata(): KnowledgeOperationMetadata {
  return { state: 0, knowledgeBase: "", exportOperationMetadata: undefined };
}

export const KnowledgeOperationMetadata: MessageFns<KnowledgeOperationMetadata> = {
  encode(message: KnowledgeOperationMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.state !== 0) {
      writer.uint32(8).int32(message.state);
    }
    if (message.knowledgeBase !== "") {
      writer.uint32(26).string(message.knowledgeBase);
    }
    if (message.exportOperationMetadata !== undefined) {
      ExportOperationMetadata.encode(message.exportOperationMetadata, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): KnowledgeOperationMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseKnowledgeOperationMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.state = reader.int32() as any;
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.knowledgeBase = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.exportOperationMetadata = ExportOperationMetadata.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): KnowledgeOperationMetadata {
    return {
      state: isSet(object.state) ? knowledgeOperationMetadata_StateFromJSON(object.state) : 0,
      knowledgeBase: isSet(object.knowledgeBase) ? globalThis.String(object.knowledgeBase) : "",
      exportOperationMetadata: isSet(object.exportOperationMetadata)
        ? ExportOperationMetadata.fromJSON(object.exportOperationMetadata)
        : undefined,
    };
  },

  toJSON(message: KnowledgeOperationMetadata): unknown {
    const obj: any = {};
    if (message.state !== 0) {
      obj.state = knowledgeOperationMetadata_StateToJSON(message.state);
    }
    if (message.knowledgeBase !== "") {
      obj.knowledgeBase = message.knowledgeBase;
    }
    if (message.exportOperationMetadata !== undefined) {
      obj.exportOperationMetadata = ExportOperationMetadata.toJSON(message.exportOperationMetadata);
    }
    return obj;
  },

  create(base?: DeepPartial<KnowledgeOperationMetadata>): KnowledgeOperationMetadata {
    return KnowledgeOperationMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<KnowledgeOperationMetadata>): KnowledgeOperationMetadata {
    const message = createBaseKnowledgeOperationMetadata();
    message.state = object.state ?? 0;
    message.knowledgeBase = object.knowledgeBase ?? "";
    message.exportOperationMetadata =
      (object.exportOperationMetadata !== undefined && object.exportOperationMetadata !== null)
        ? ExportOperationMetadata.fromPartial(object.exportOperationMetadata)
        : undefined;
    return message;
  },
};

/**
 * Service for managing knowledge
 * [Documents][google.cloud.dialogflow.v2.Document].
 */
export type DocumentsDefinition = typeof DocumentsDefinition;
export const DocumentsDefinition = {
  name: "Documents",
  fullName: "google.cloud.dialogflow.v2.Documents",
  methods: {
    /** Returns the list of all documents of the knowledge base. */
    listDocuments: {
      name: "ListDocuments",
      requestType: ListDocumentsRequest,
      requestStream: false,
      responseType: ListDocumentsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              178,
              1,
              90,
              64,
              18,
              62,
              47,
              118,
              50,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              107,
              110,
              111,
              119,
              108,
              101,
              100,
              103,
              101,
              66,
              97,
              115,
              101,
              115,
              47,
              42,
              125,
              47,
              100,
              111,
              99,
              117,
              109,
              101,
              110,
              116,
              115,
              90,
              58,
              18,
              56,
              47,
              118,
              50,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              97,
              103,
              101,
              110,
              116,
              47,
              107,
              110,
              111,
              119,
              108,
              101,
              100,
              103,
              101,
              66,
              97,
              115,
              101,
              115,
              47,
              42,
              125,
              47,
              100,
              111,
              99,
              117,
              109,
              101,
              110,
              116,
              115,
              18,
              50,
              47,
              118,
              50,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              107,
              110,
              111,
              119,
              108,
              101,
              100,
              103,
              101,
              66,
              97,
              115,
              101,
              115,
              47,
              42,
              125,
              47,
              100,
              111,
              99,
              117,
              109,
              101,
              110,
              116,
              115,
            ]),
          ],
        },
      },
    },
    /** Retrieves the specified document. */
    getDocument: {
      name: "GetDocument",
      requestType: GetDocumentRequest,
      requestStream: false,
      responseType: Document,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              178,
              1,
              90,
              64,
              18,
              62,
              47,
              118,
              50,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              107,
              110,
              111,
              119,
              108,
              101,
              100,
              103,
              101,
              66,
              97,
              115,
              101,
              115,
              47,
              42,
              47,
              100,
              111,
              99,
              117,
              109,
              101,
              110,
              116,
              115,
              47,
              42,
              125,
              90,
              58,
              18,
              56,
              47,
              118,
              50,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              97,
              103,
              101,
              110,
              116,
              47,
              107,
              110,
              111,
              119,
              108,
              101,
              100,
              103,
              101,
              66,
              97,
              115,
              101,
              115,
              47,
              42,
              47,
              100,
              111,
              99,
              117,
              109,
              101,
              110,
              116,
              115,
              47,
              42,
              125,
              18,
              50,
              47,
              118,
              50,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              107,
              110,
              111,
              119,
              108,
              101,
              100,
              103,
              101,
              66,
              97,
              115,
              101,
              115,
              47,
              42,
              47,
              100,
              111,
              99,
              117,
              109,
              101,
              110,
              116,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Creates a new document.
     *
     * This method is a [long-running
     * operation](https://cloud.google.com/dialogflow/cx/docs/how/long-running-operation).
     * The returned `Operation` type has the following method-specific fields:
     *
     * - `metadata`:
     * [KnowledgeOperationMetadata][google.cloud.dialogflow.v2.KnowledgeOperationMetadata]
     * - `response`: [Document][google.cloud.dialogflow.v2.Document]
     */
    createDocument: {
      name: "CreateDocument",
      requestType: CreateDocumentRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              38,
              10,
              8,
              68,
              111,
              99,
              117,
              109,
              101,
              110,
              116,
              18,
              26,
              75,
              110,
              111,
              119,
              108,
              101,
              100,
              103,
              101,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([15, 112, 97, 114, 101, 110, 116, 44, 100, 111, 99, 117, 109, 101, 110, 116])],
          578365826: [
            Buffer.from([
              208,
              1,
              58,
              8,
              100,
              111,
              99,
              117,
              109,
              101,
              110,
              116,
              90,
              74,
              58,
              8,
              100,
              111,
              99,
              117,
              109,
              101,
              110,
              116,
              34,
              62,
              47,
              118,
              50,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              107,
              110,
              111,
              119,
              108,
              101,
              100,
              103,
              101,
              66,
              97,
              115,
              101,
              115,
              47,
              42,
              125,
              47,
              100,
              111,
              99,
              117,
              109,
              101,
              110,
              116,
              115,
              90,
              68,
              58,
              8,
              100,
              111,
              99,
              117,
              109,
              101,
              110,
              116,
              34,
              56,
              47,
              118,
              50,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              97,
              103,
              101,
              110,
              116,
              47,
              107,
              110,
              111,
              119,
              108,
              101,
              100,
              103,
              101,
              66,
              97,
              115,
              101,
              115,
              47,
              42,
              125,
              47,
              100,
              111,
              99,
              117,
              109,
              101,
              110,
              116,
              115,
              34,
              50,
              47,
              118,
              50,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              107,
              110,
              111,
              119,
              108,
              101,
              100,
              103,
              101,
              66,
              97,
              115,
              101,
              115,
              47,
              42,
              125,
              47,
              100,
              111,
              99,
              117,
              109,
              101,
              110,
              116,
              115,
            ]),
          ],
        },
      },
    },
    /**
     * Creates documents by importing data from external sources.
     * Dialogflow supports up to 350 documents in each request. If you try to
     * import more, Dialogflow will return an error.
     *
     * This method is a [long-running
     * operation](https://cloud.google.com/dialogflow/cx/docs/how/long-running-operation).
     * The returned `Operation` type has the following method-specific fields:
     *
     * - `metadata`:
     * [KnowledgeOperationMetadata][google.cloud.dialogflow.v2.KnowledgeOperationMetadata]
     * - `response`:
     * [ImportDocumentsResponse][google.cloud.dialogflow.v2.ImportDocumentsResponse]
     */
    importDocuments: {
      name: "ImportDocuments",
      requestType: ImportDocumentsRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              53,
              10,
              23,
              73,
              109,
              112,
              111,
              114,
              116,
              68,
              111,
              99,
              117,
              109,
              101,
              110,
              116,
              115,
              82,
              101,
              115,
              112,
              111,
              110,
              115,
              101,
              18,
              26,
              75,
              110,
              111,
              119,
              108,
              101,
              100,
              103,
              101,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          578365826: [
            Buffer.from([
              138,
              1,
              58,
              1,
              42,
              90,
              74,
              58,
              1,
              42,
              34,
              69,
              47,
              118,
              50,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              107,
              110,
              111,
              119,
              108,
              101,
              100,
              103,
              101,
              66,
              97,
              115,
              101,
              115,
              47,
              42,
              125,
              47,
              100,
              111,
              99,
              117,
              109,
              101,
              110,
              116,
              115,
              58,
              105,
              109,
              112,
              111,
              114,
              116,
              34,
              57,
              47,
              118,
              50,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              107,
              110,
              111,
              119,
              108,
              101,
              100,
              103,
              101,
              66,
              97,
              115,
              101,
              115,
              47,
              42,
              125,
              47,
              100,
              111,
              99,
              117,
              109,
              101,
              110,
              116,
              115,
              58,
              105,
              109,
              112,
              111,
              114,
              116,
            ]),
          ],
        },
      },
    },
    /**
     * Deletes the specified document.
     *
     * This method is a [long-running
     * operation](https://cloud.google.com/dialogflow/cx/docs/how/long-running-operation).
     * The returned `Operation` type has the following method-specific fields:
     *
     * - `metadata`:
     * [KnowledgeOperationMetadata][google.cloud.dialogflow.v2.KnowledgeOperationMetadata]
     * - `response`: An [Empty
     *   message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#empty)
     */
    deleteDocument: {
      name: "DeleteDocument",
      requestType: DeleteDocumentRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              51,
              10,
              21,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              112,
              114,
              111,
              116,
              111,
              98,
              117,
              102,
              46,
              69,
              109,
              112,
              116,
              121,
              18,
              26,
              75,
              110,
              111,
              119,
              108,
              101,
              100,
              103,
              101,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              178,
              1,
              90,
              64,
              42,
              62,
              47,
              118,
              50,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              107,
              110,
              111,
              119,
              108,
              101,
              100,
              103,
              101,
              66,
              97,
              115,
              101,
              115,
              47,
              42,
              47,
              100,
              111,
              99,
              117,
              109,
              101,
              110,
              116,
              115,
              47,
              42,
              125,
              90,
              58,
              42,
              56,
              47,
              118,
              50,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              97,
              103,
              101,
              110,
              116,
              47,
              107,
              110,
              111,
              119,
              108,
              101,
              100,
              103,
              101,
              66,
              97,
              115,
              101,
              115,
              47,
              42,
              47,
              100,
              111,
              99,
              117,
              109,
              101,
              110,
              116,
              115,
              47,
              42,
              125,
              42,
              50,
              47,
              118,
              50,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              107,
              110,
              111,
              119,
              108,
              101,
              100,
              103,
              101,
              66,
              97,
              115,
              101,
              115,
              47,
              42,
              47,
              100,
              111,
              99,
              117,
              109,
              101,
              110,
              116,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Updates the specified document.
     *
     * This method is a [long-running
     * operation](https://cloud.google.com/dialogflow/cx/docs/how/long-running-operation).
     * The returned `Operation` type has the following method-specific fields:
     *
     * - `metadata`:
     * [KnowledgeOperationMetadata][google.cloud.dialogflow.v2.KnowledgeOperationMetadata]
     * - `response`: [Document][google.cloud.dialogflow.v2.Document]
     */
    updateDocument: {
      name: "UpdateDocument",
      requestType: UpdateDocumentRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              38,
              10,
              8,
              68,
              111,
              99,
              117,
              109,
              101,
              110,
              116,
              18,
              26,
              75,
              110,
              111,
              119,
              108,
              101,
              100,
              103,
              101,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [
            Buffer.from([
              20,
              100,
              111,
              99,
              117,
              109,
              101,
              110,
              116,
              44,
              117,
              112,
              100,
              97,
              116,
              101,
              95,
              109,
              97,
              115,
              107,
            ]),
          ],
          578365826: [
            Buffer.from([
              235,
              1,
              58,
              8,
              100,
              111,
              99,
              117,
              109,
              101,
              110,
              116,
              90,
              83,
              58,
              8,
              100,
              111,
              99,
              117,
              109,
              101,
              110,
              116,
              50,
              71,
              47,
              118,
              50,
              47,
              123,
              100,
              111,
              99,
              117,
              109,
              101,
              110,
              116,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              107,
              110,
              111,
              119,
              108,
              101,
              100,
              103,
              101,
              66,
              97,
              115,
              101,
              115,
              47,
              42,
              47,
              100,
              111,
              99,
              117,
              109,
              101,
              110,
              116,
              115,
              47,
              42,
              125,
              90,
              77,
              58,
              8,
              100,
              111,
              99,
              117,
              109,
              101,
              110,
              116,
              50,
              65,
              47,
              118,
              50,
              47,
              123,
              100,
              111,
              99,
              117,
              109,
              101,
              110,
              116,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              97,
              103,
              101,
              110,
              116,
              47,
              107,
              110,
              111,
              119,
              108,
              101,
              100,
              103,
              101,
              66,
              97,
              115,
              101,
              115,
              47,
              42,
              47,
              100,
              111,
              99,
              117,
              109,
              101,
              110,
              116,
              115,
              47,
              42,
              125,
              50,
              59,
              47,
              118,
              50,
              47,
              123,
              100,
              111,
              99,
              117,
              109,
              101,
              110,
              116,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              107,
              110,
              111,
              119,
              108,
              101,
              100,
              103,
              101,
              66,
              97,
              115,
              101,
              115,
              47,
              42,
              47,
              100,
              111,
              99,
              117,
              109,
              101,
              110,
              116,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Reloads the specified document from its specified source, content_uri or
     * content. The previously loaded content of the document will be deleted.
     * Note: Even when the content of the document has not changed, there still
     * may be side effects because of internal implementation changes.
     *
     * This method is a [long-running
     * operation](https://cloud.google.com/dialogflow/cx/docs/how/long-running-operation).
     * The returned `Operation` type has the following method-specific fields:
     *
     * - `metadata`:
     * [KnowledgeOperationMetadata][google.cloud.dialogflow.v2.KnowledgeOperationMetadata]
     * - `response`: [Document][google.cloud.dialogflow.v2.Document]
     *
     * Note: The `projects.agent.knowledgeBases.documents` resource is deprecated;
     * only use `projects.knowledgeBases.documents`.
     */
    reloadDocument: {
      name: "ReloadDocument",
      requestType: ReloadDocumentRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              38,
              10,
              8,
              68,
              111,
              99,
              117,
              109,
              101,
              110,
              116,
              18,
              26,
              75,
              110,
              111,
              119,
              108,
              101,
              100,
              103,
              101,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([16, 110, 97, 109, 101, 44, 99, 111, 110, 116, 101, 110, 116, 95, 117, 114, 105])],
          578365826: [
            Buffer.from([
              208,
              1,
              58,
              1,
              42,
              90,
              74,
              58,
              1,
              42,
              34,
              69,
              47,
              118,
              50,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              107,
              110,
              111,
              119,
              108,
              101,
              100,
              103,
              101,
              66,
              97,
              115,
              101,
              115,
              47,
              42,
              47,
              100,
              111,
              99,
              117,
              109,
              101,
              110,
              116,
              115,
              47,
              42,
              125,
              58,
              114,
              101,
              108,
              111,
              97,
              100,
              90,
              68,
              58,
              1,
              42,
              34,
              63,
              47,
              118,
              50,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              97,
              103,
              101,
              110,
              116,
              47,
              107,
              110,
              111,
              119,
              108,
              101,
              100,
              103,
              101,
              66,
              97,
              115,
              101,
              115,
              47,
              42,
              47,
              100,
              111,
              99,
              117,
              109,
              101,
              110,
              116,
              115,
              47,
              42,
              125,
              58,
              114,
              101,
              108,
              111,
              97,
              100,
              34,
              57,
              47,
              118,
              50,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              107,
              110,
              111,
              119,
              108,
              101,
              100,
              103,
              101,
              66,
              97,
              115,
              101,
              115,
              47,
              42,
              47,
              100,
              111,
              99,
              117,
              109,
              101,
              110,
              116,
              115,
              47,
              42,
              125,
              58,
              114,
              101,
              108,
              111,
              97,
              100,
            ]),
          ],
        },
      },
    },
    /**
     * Exports a smart messaging candidate document into the specified
     * destination.
     *
     * This method is a [long-running
     * operation](https://cloud.google.com/dialogflow/cx/docs/how/long-running-operation).
     * The returned `Operation` type has the following method-specific fields:
     *
     * - `metadata`:
     * [KnowledgeOperationMetadata][google.cloud.dialogflow.v2.KnowledgeOperationMetadata]
     * - `response`: [Document][google.cloud.dialogflow.v2.Document]
     */
    exportDocument: {
      name: "ExportDocument",
      requestType: ExportDocumentRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              38,
              10,
              8,
              68,
              111,
              99,
              117,
              109,
              101,
              110,
              116,
              18,
              26,
              75,
              110,
              111,
              119,
              108,
              101,
              100,
              103,
              101,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          578365826: [
            Buffer.from([
              138,
              1,
              58,
              1,
              42,
              90,
              74,
              58,
              1,
              42,
              34,
              69,
              47,
              118,
              50,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              107,
              110,
              111,
              119,
              108,
              101,
              100,
              103,
              101,
              66,
              97,
              115,
              101,
              115,
              47,
              42,
              47,
              100,
              111,
              99,
              117,
              109,
              101,
              110,
              116,
              115,
              47,
              42,
              125,
              58,
              101,
              120,
              112,
              111,
              114,
              116,
              34,
              57,
              47,
              118,
              50,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              107,
              110,
              111,
              119,
              108,
              101,
              100,
              103,
              101,
              66,
              97,
              115,
              101,
              115,
              47,
              42,
              47,
              100,
              111,
              99,
              117,
              109,
              101,
              110,
              116,
              115,
              47,
              42,
              125,
              58,
              101,
              120,
              112,
              111,
              114,
              116,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface DocumentsServiceImplementation<CallContextExt = {}> {
  /** Returns the list of all documents of the knowledge base. */
  listDocuments(
    request: ListDocumentsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListDocumentsResponse>>;
  /** Retrieves the specified document. */
  getDocument(request: GetDocumentRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Document>>;
  /**
   * Creates a new document.
   *
   * This method is a [long-running
   * operation](https://cloud.google.com/dialogflow/cx/docs/how/long-running-operation).
   * The returned `Operation` type has the following method-specific fields:
   *
   * - `metadata`:
   * [KnowledgeOperationMetadata][google.cloud.dialogflow.v2.KnowledgeOperationMetadata]
   * - `response`: [Document][google.cloud.dialogflow.v2.Document]
   */
  createDocument(
    request: CreateDocumentRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /**
   * Creates documents by importing data from external sources.
   * Dialogflow supports up to 350 documents in each request. If you try to
   * import more, Dialogflow will return an error.
   *
   * This method is a [long-running
   * operation](https://cloud.google.com/dialogflow/cx/docs/how/long-running-operation).
   * The returned `Operation` type has the following method-specific fields:
   *
   * - `metadata`:
   * [KnowledgeOperationMetadata][google.cloud.dialogflow.v2.KnowledgeOperationMetadata]
   * - `response`:
   * [ImportDocumentsResponse][google.cloud.dialogflow.v2.ImportDocumentsResponse]
   */
  importDocuments(
    request: ImportDocumentsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /**
   * Deletes the specified document.
   *
   * This method is a [long-running
   * operation](https://cloud.google.com/dialogflow/cx/docs/how/long-running-operation).
   * The returned `Operation` type has the following method-specific fields:
   *
   * - `metadata`:
   * [KnowledgeOperationMetadata][google.cloud.dialogflow.v2.KnowledgeOperationMetadata]
   * - `response`: An [Empty
   *   message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#empty)
   */
  deleteDocument(
    request: DeleteDocumentRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /**
   * Updates the specified document.
   *
   * This method is a [long-running
   * operation](https://cloud.google.com/dialogflow/cx/docs/how/long-running-operation).
   * The returned `Operation` type has the following method-specific fields:
   *
   * - `metadata`:
   * [KnowledgeOperationMetadata][google.cloud.dialogflow.v2.KnowledgeOperationMetadata]
   * - `response`: [Document][google.cloud.dialogflow.v2.Document]
   */
  updateDocument(
    request: UpdateDocumentRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /**
   * Reloads the specified document from its specified source, content_uri or
   * content. The previously loaded content of the document will be deleted.
   * Note: Even when the content of the document has not changed, there still
   * may be side effects because of internal implementation changes.
   *
   * This method is a [long-running
   * operation](https://cloud.google.com/dialogflow/cx/docs/how/long-running-operation).
   * The returned `Operation` type has the following method-specific fields:
   *
   * - `metadata`:
   * [KnowledgeOperationMetadata][google.cloud.dialogflow.v2.KnowledgeOperationMetadata]
   * - `response`: [Document][google.cloud.dialogflow.v2.Document]
   *
   * Note: The `projects.agent.knowledgeBases.documents` resource is deprecated;
   * only use `projects.knowledgeBases.documents`.
   */
  reloadDocument(
    request: ReloadDocumentRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /**
   * Exports a smart messaging candidate document into the specified
   * destination.
   *
   * This method is a [long-running
   * operation](https://cloud.google.com/dialogflow/cx/docs/how/long-running-operation).
   * The returned `Operation` type has the following method-specific fields:
   *
   * - `metadata`:
   * [KnowledgeOperationMetadata][google.cloud.dialogflow.v2.KnowledgeOperationMetadata]
   * - `response`: [Document][google.cloud.dialogflow.v2.Document]
   */
  exportDocument(
    request: ExportDocumentRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
}

export interface DocumentsClient<CallOptionsExt = {}> {
  /** Returns the list of all documents of the knowledge base. */
  listDocuments(
    request: DeepPartial<ListDocumentsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListDocumentsResponse>;
  /** Retrieves the specified document. */
  getDocument(request: DeepPartial<GetDocumentRequest>, options?: CallOptions & CallOptionsExt): Promise<Document>;
  /**
   * Creates a new document.
   *
   * This method is a [long-running
   * operation](https://cloud.google.com/dialogflow/cx/docs/how/long-running-operation).
   * The returned `Operation` type has the following method-specific fields:
   *
   * - `metadata`:
   * [KnowledgeOperationMetadata][google.cloud.dialogflow.v2.KnowledgeOperationMetadata]
   * - `response`: [Document][google.cloud.dialogflow.v2.Document]
   */
  createDocument(
    request: DeepPartial<CreateDocumentRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /**
   * Creates documents by importing data from external sources.
   * Dialogflow supports up to 350 documents in each request. If you try to
   * import more, Dialogflow will return an error.
   *
   * This method is a [long-running
   * operation](https://cloud.google.com/dialogflow/cx/docs/how/long-running-operation).
   * The returned `Operation` type has the following method-specific fields:
   *
   * - `metadata`:
   * [KnowledgeOperationMetadata][google.cloud.dialogflow.v2.KnowledgeOperationMetadata]
   * - `response`:
   * [ImportDocumentsResponse][google.cloud.dialogflow.v2.ImportDocumentsResponse]
   */
  importDocuments(
    request: DeepPartial<ImportDocumentsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /**
   * Deletes the specified document.
   *
   * This method is a [long-running
   * operation](https://cloud.google.com/dialogflow/cx/docs/how/long-running-operation).
   * The returned `Operation` type has the following method-specific fields:
   *
   * - `metadata`:
   * [KnowledgeOperationMetadata][google.cloud.dialogflow.v2.KnowledgeOperationMetadata]
   * - `response`: An [Empty
   *   message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#empty)
   */
  deleteDocument(
    request: DeepPartial<DeleteDocumentRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /**
   * Updates the specified document.
   *
   * This method is a [long-running
   * operation](https://cloud.google.com/dialogflow/cx/docs/how/long-running-operation).
   * The returned `Operation` type has the following method-specific fields:
   *
   * - `metadata`:
   * [KnowledgeOperationMetadata][google.cloud.dialogflow.v2.KnowledgeOperationMetadata]
   * - `response`: [Document][google.cloud.dialogflow.v2.Document]
   */
  updateDocument(
    request: DeepPartial<UpdateDocumentRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /**
   * Reloads the specified document from its specified source, content_uri or
   * content. The previously loaded content of the document will be deleted.
   * Note: Even when the content of the document has not changed, there still
   * may be side effects because of internal implementation changes.
   *
   * This method is a [long-running
   * operation](https://cloud.google.com/dialogflow/cx/docs/how/long-running-operation).
   * The returned `Operation` type has the following method-specific fields:
   *
   * - `metadata`:
   * [KnowledgeOperationMetadata][google.cloud.dialogflow.v2.KnowledgeOperationMetadata]
   * - `response`: [Document][google.cloud.dialogflow.v2.Document]
   *
   * Note: The `projects.agent.knowledgeBases.documents` resource is deprecated;
   * only use `projects.knowledgeBases.documents`.
   */
  reloadDocument(
    request: DeepPartial<ReloadDocumentRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /**
   * Exports a smart messaging candidate document into the specified
   * destination.
   *
   * This method is a [long-running
   * operation](https://cloud.google.com/dialogflow/cx/docs/how/long-running-operation).
   * The returned `Operation` type has the following method-specific fields:
   *
   * - `metadata`:
   * [KnowledgeOperationMetadata][google.cloud.dialogflow.v2.KnowledgeOperationMetadata]
   * - `response`: [Document][google.cloud.dialogflow.v2.Document]
   */
  exportDocument(
    request: DeepPartial<ExportDocumentRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
}

function bytesFromBase64(b64: string): Uint8Array {
  return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
}

function base64FromBytes(arr: Uint8Array): string {
  return globalThis.Buffer.from(arr).toString("base64");
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
