// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/dialogflow/cx/v3/version.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { Operation } from "../../../../longrunning/operations.js";
import { Empty } from "../../../../protobuf/empty.js";
import { FieldMask } from "../../../../protobuf/field_mask.js";
import { Timestamp } from "../../../../protobuf/timestamp.js";
import { NluSettings } from "./flow.js";

export const protobufPackage = "google.cloud.dialogflow.cx.v3";

/**
 * Metadata associated with the long running operation for
 * [Versions.CreateVersion][google.cloud.dialogflow.cx.v3.Versions.CreateVersion].
 */
export interface CreateVersionOperationMetadata {
  /**
   * Name of the created version.
   * Format: `projects/<Project ID>/locations/<Location ID>/agents/<Agent
   * ID>/flows/<Flow ID>/versions/<Version ID>`.
   */
  version: string;
}

/** Represents a version of a flow. */
export interface Version {
  /**
   * Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent
   * ID>/flows/<Flow ID>/versions/<Version ID>. Version ID is a self-increasing
   * number generated by Dialogflow upon version creation.
   */
  name: string;
  /** Required. The human-readable name of the version. Limit of 64 characters. */
  displayName: string;
  /**
   * The description of the version. The maximum length is 500 characters. If
   * exceeded, the request is rejected.
   */
  description: string;
  /** Output only. The NLU settings of the flow at version creation. */
  nluSettings:
    | NluSettings
    | undefined;
  /** Output only. Create time of the version. */
  createTime:
    | Date
    | undefined;
  /**
   * Output only. The state of this version. This field is read-only and cannot
   * be set by create and update methods.
   */
  state: Version_State;
}

/** The state of the version. */
export enum Version_State {
  /** STATE_UNSPECIFIED - Not specified. This value is not used. */
  STATE_UNSPECIFIED = 0,
  /** RUNNING - Version is not ready to serve (e.g. training is running). */
  RUNNING = 1,
  /** SUCCEEDED - Training has succeeded and this version is ready to serve. */
  SUCCEEDED = 2,
  /** FAILED - Version training failed. */
  FAILED = 3,
  UNRECOGNIZED = -1,
}

export function version_StateFromJSON(object: any): Version_State {
  switch (object) {
    case 0:
    case "STATE_UNSPECIFIED":
      return Version_State.STATE_UNSPECIFIED;
    case 1:
    case "RUNNING":
      return Version_State.RUNNING;
    case 2:
    case "SUCCEEDED":
      return Version_State.SUCCEEDED;
    case 3:
    case "FAILED":
      return Version_State.FAILED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Version_State.UNRECOGNIZED;
  }
}

export function version_StateToJSON(object: Version_State): string {
  switch (object) {
    case Version_State.STATE_UNSPECIFIED:
      return "STATE_UNSPECIFIED";
    case Version_State.RUNNING:
      return "RUNNING";
    case Version_State.SUCCEEDED:
      return "SUCCEEDED";
    case Version_State.FAILED:
      return "FAILED";
    case Version_State.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/**
 * The request message for
 * [Versions.ListVersions][google.cloud.dialogflow.cx.v3.Versions.ListVersions].
 */
export interface ListVersionsRequest {
  /**
   * Required. The [Flow][google.cloud.dialogflow.cx.v3.Flow] to list all
   * versions for. Format: `projects/<Project ID>/locations/<Location
   * ID>/agents/<Agent ID>/flows/<Flow ID>`.
   */
  parent: string;
  /**
   * The maximum number of items to return in a single page. By default 20 and
   * at most 100.
   */
  pageSize: number;
  /** The next_page_token value returned from a previous list request. */
  pageToken: string;
}

/**
 * The response message for
 * [Versions.ListVersions][google.cloud.dialogflow.cx.v3.Versions.ListVersions].
 */
export interface ListVersionsResponse {
  /**
   * A list of versions. There will be a maximum number of items returned based
   * on the page_size field in the request. The list may in some cases be empty
   * or contain fewer entries than page_size even if this isn't the last page.
   */
  versions: Version[];
  /**
   * Token to retrieve the next page of results, or empty if there are no more
   * results in the list.
   */
  nextPageToken: string;
}

/**
 * The request message for
 * [Versions.GetVersion][google.cloud.dialogflow.cx.v3.Versions.GetVersion].
 */
export interface GetVersionRequest {
  /**
   * Required. The name of the [Version][google.cloud.dialogflow.cx.v3.Version].
   * Format: `projects/<Project ID>/locations/<Location ID>/agents/<Agent
   * ID>/flows/<Flow ID>/versions/<Version ID>`.
   */
  name: string;
}

/**
 * The request message for
 * [Versions.CreateVersion][google.cloud.dialogflow.cx.v3.Versions.CreateVersion].
 */
export interface CreateVersionRequest {
  /**
   * Required. The [Flow][google.cloud.dialogflow.cx.v3.Flow] to create an
   * [Version][google.cloud.dialogflow.cx.v3.Version] for. Format:
   * `projects/<Project ID>/locations/<Location ID>/agents/<Agent
   * ID>/flows/<Flow ID>`.
   */
  parent: string;
  /** Required. The version to create. */
  version: Version | undefined;
}

/**
 * The request message for
 * [Versions.UpdateVersion][google.cloud.dialogflow.cx.v3.Versions.UpdateVersion].
 */
export interface UpdateVersionRequest {
  /** Required. The version to update. */
  version:
    | Version
    | undefined;
  /**
   * Required. The mask to control which fields get updated. Currently only
   * `description` and `display_name` can be updated.
   */
  updateMask: string[] | undefined;
}

/**
 * The request message for
 * [Versions.DeleteVersion][google.cloud.dialogflow.cx.v3.Versions.DeleteVersion].
 */
export interface DeleteVersionRequest {
  /**
   * Required. The name of the [Version][google.cloud.dialogflow.cx.v3.Version]
   * to delete. Format: `projects/<Project ID>/locations/<Location
   * ID>/agents/<Agent ID>/flows/<Flow ID>/versions/<Version ID>`.
   */
  name: string;
}

/**
 * The request message for
 * [Versions.LoadVersion][google.cloud.dialogflow.cx.v3.Versions.LoadVersion].
 */
export interface LoadVersionRequest {
  /**
   * Required. The [Version][google.cloud.dialogflow.cx.v3.Version] to be loaded
   * to draft flow. Format: `projects/<Project ID>/locations/<Location
   * ID>/agents/<Agent ID>/flows/<Flow ID>/versions/<Version ID>`.
   */
  name: string;
  /**
   * This field is used to prevent accidental overwrite of other agent
   * resources, which can potentially impact other flow's behavior. If
   * `allow_override_agent_resources` is false, conflicted agent-level resources
   * will not be overridden (i.e. intents, entities, webhooks).
   */
  allowOverrideAgentResources: boolean;
}

/**
 * The request message for
 * [Versions.CompareVersions][google.cloud.dialogflow.cx.v3.Versions.CompareVersions].
 */
export interface CompareVersionsRequest {
  /**
   * Required. Name of the base flow version to compare with the target version.
   * Use version ID `0` to indicate the draft version of the specified flow.
   *
   * Format: `projects/<Project ID>/locations/<Location ID>/agents/
   * <Agent ID>/flows/<Flow ID>/versions/<Version ID>`.
   */
  baseVersion: string;
  /**
   * Required. Name of the target flow version to compare with the
   * base version. Use version ID `0` to indicate the draft version of the
   * specified flow. Format: `projects/<Project ID>/locations/<Location
   * ID>/agents/<Agent ID>/flows/<Flow ID>/versions/<Version ID>`.
   */
  targetVersion: string;
  /**
   * The language to compare the flow versions for.
   *
   * If not specified, the agent's default language is used.
   * [Many
   * languages](https://cloud.google.com/dialogflow/docs/reference/language) are
   * supported. Note: languages must be enabled in the agent before they can be
   * used.
   */
  languageCode: string;
}

/**
 * The response message for
 * [Versions.CompareVersions][google.cloud.dialogflow.cx.v3.Versions.CompareVersions].
 */
export interface CompareVersionsResponse {
  /** JSON representation of the base version content. */
  baseVersionContentJson: string;
  /** JSON representation of the target version content. */
  targetVersionContentJson: string;
  /** The timestamp when the two version compares. */
  compareTime: Date | undefined;
}

function createBaseCreateVersionOperationMetadata(): CreateVersionOperationMetadata {
  return { version: "" };
}

export const CreateVersionOperationMetadata: MessageFns<CreateVersionOperationMetadata> = {
  encode(message: CreateVersionOperationMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.version !== "") {
      writer.uint32(10).string(message.version);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateVersionOperationMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateVersionOperationMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.version = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateVersionOperationMetadata {
    return { version: isSet(object.version) ? globalThis.String(object.version) : "" };
  },

  toJSON(message: CreateVersionOperationMetadata): unknown {
    const obj: any = {};
    if (message.version !== "") {
      obj.version = message.version;
    }
    return obj;
  },

  create(base?: DeepPartial<CreateVersionOperationMetadata>): CreateVersionOperationMetadata {
    return CreateVersionOperationMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateVersionOperationMetadata>): CreateVersionOperationMetadata {
    const message = createBaseCreateVersionOperationMetadata();
    message.version = object.version ?? "";
    return message;
  },
};

function createBaseVersion(): Version {
  return { name: "", displayName: "", description: "", nluSettings: undefined, createTime: undefined, state: 0 };
}

export const Version: MessageFns<Version> = {
  encode(message: Version, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.displayName !== "") {
      writer.uint32(18).string(message.displayName);
    }
    if (message.description !== "") {
      writer.uint32(26).string(message.description);
    }
    if (message.nluSettings !== undefined) {
      NluSettings.encode(message.nluSettings, writer.uint32(34).fork()).join();
    }
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(42).fork()).join();
    }
    if (message.state !== 0) {
      writer.uint32(48).int32(message.state);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Version {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseVersion();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.displayName = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.description = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.nluSettings = NluSettings.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.state = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Version {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      displayName: isSet(object.displayName) ? globalThis.String(object.displayName) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      nluSettings: isSet(object.nluSettings) ? NluSettings.fromJSON(object.nluSettings) : undefined,
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      state: isSet(object.state) ? version_StateFromJSON(object.state) : 0,
    };
  },

  toJSON(message: Version): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.displayName !== "") {
      obj.displayName = message.displayName;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.nluSettings !== undefined) {
      obj.nluSettings = NluSettings.toJSON(message.nluSettings);
    }
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.state !== 0) {
      obj.state = version_StateToJSON(message.state);
    }
    return obj;
  },

  create(base?: DeepPartial<Version>): Version {
    return Version.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Version>): Version {
    const message = createBaseVersion();
    message.name = object.name ?? "";
    message.displayName = object.displayName ?? "";
    message.description = object.description ?? "";
    message.nluSettings = (object.nluSettings !== undefined && object.nluSettings !== null)
      ? NluSettings.fromPartial(object.nluSettings)
      : undefined;
    message.createTime = object.createTime ?? undefined;
    message.state = object.state ?? 0;
    return message;
  },
};

function createBaseListVersionsRequest(): ListVersionsRequest {
  return { parent: "", pageSize: 0, pageToken: "" };
}

export const ListVersionsRequest: MessageFns<ListVersionsRequest> = {
  encode(message: ListVersionsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListVersionsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListVersionsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListVersionsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: ListVersionsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListVersionsRequest>): ListVersionsRequest {
    return ListVersionsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListVersionsRequest>): ListVersionsRequest {
    const message = createBaseListVersionsRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseListVersionsResponse(): ListVersionsResponse {
  return { versions: [], nextPageToken: "" };
}

export const ListVersionsResponse: MessageFns<ListVersionsResponse> = {
  encode(message: ListVersionsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.versions) {
      Version.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListVersionsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListVersionsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.versions.push(Version.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListVersionsResponse {
    return {
      versions: globalThis.Array.isArray(object?.versions) ? object.versions.map((e: any) => Version.fromJSON(e)) : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListVersionsResponse): unknown {
    const obj: any = {};
    if (message.versions?.length) {
      obj.versions = message.versions.map((e) => Version.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListVersionsResponse>): ListVersionsResponse {
    return ListVersionsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListVersionsResponse>): ListVersionsResponse {
    const message = createBaseListVersionsResponse();
    message.versions = object.versions?.map((e) => Version.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseGetVersionRequest(): GetVersionRequest {
  return { name: "" };
}

export const GetVersionRequest: MessageFns<GetVersionRequest> = {
  encode(message: GetVersionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetVersionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetVersionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetVersionRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetVersionRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetVersionRequest>): GetVersionRequest {
    return GetVersionRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetVersionRequest>): GetVersionRequest {
    const message = createBaseGetVersionRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseCreateVersionRequest(): CreateVersionRequest {
  return { parent: "", version: undefined };
}

export const CreateVersionRequest: MessageFns<CreateVersionRequest> = {
  encode(message: CreateVersionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.version !== undefined) {
      Version.encode(message.version, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateVersionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateVersionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.version = Version.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateVersionRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      version: isSet(object.version) ? Version.fromJSON(object.version) : undefined,
    };
  },

  toJSON(message: CreateVersionRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.version !== undefined) {
      obj.version = Version.toJSON(message.version);
    }
    return obj;
  },

  create(base?: DeepPartial<CreateVersionRequest>): CreateVersionRequest {
    return CreateVersionRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateVersionRequest>): CreateVersionRequest {
    const message = createBaseCreateVersionRequest();
    message.parent = object.parent ?? "";
    message.version = (object.version !== undefined && object.version !== null)
      ? Version.fromPartial(object.version)
      : undefined;
    return message;
  },
};

function createBaseUpdateVersionRequest(): UpdateVersionRequest {
  return { version: undefined, updateMask: undefined };
}

export const UpdateVersionRequest: MessageFns<UpdateVersionRequest> = {
  encode(message: UpdateVersionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.version !== undefined) {
      Version.encode(message.version, writer.uint32(10).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateVersionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateVersionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.version = Version.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateVersionRequest {
    return {
      version: isSet(object.version) ? Version.fromJSON(object.version) : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
    };
  },

  toJSON(message: UpdateVersionRequest): unknown {
    const obj: any = {};
    if (message.version !== undefined) {
      obj.version = Version.toJSON(message.version);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateVersionRequest>): UpdateVersionRequest {
    return UpdateVersionRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateVersionRequest>): UpdateVersionRequest {
    const message = createBaseUpdateVersionRequest();
    message.version = (object.version !== undefined && object.version !== null)
      ? Version.fromPartial(object.version)
      : undefined;
    message.updateMask = object.updateMask ?? undefined;
    return message;
  },
};

function createBaseDeleteVersionRequest(): DeleteVersionRequest {
  return { name: "" };
}

export const DeleteVersionRequest: MessageFns<DeleteVersionRequest> = {
  encode(message: DeleteVersionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteVersionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteVersionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteVersionRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: DeleteVersionRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteVersionRequest>): DeleteVersionRequest {
    return DeleteVersionRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteVersionRequest>): DeleteVersionRequest {
    const message = createBaseDeleteVersionRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseLoadVersionRequest(): LoadVersionRequest {
  return { name: "", allowOverrideAgentResources: false };
}

export const LoadVersionRequest: MessageFns<LoadVersionRequest> = {
  encode(message: LoadVersionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.allowOverrideAgentResources !== false) {
      writer.uint32(16).bool(message.allowOverrideAgentResources);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LoadVersionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLoadVersionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.allowOverrideAgentResources = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LoadVersionRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      allowOverrideAgentResources: isSet(object.allowOverrideAgentResources)
        ? globalThis.Boolean(object.allowOverrideAgentResources)
        : false,
    };
  },

  toJSON(message: LoadVersionRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.allowOverrideAgentResources !== false) {
      obj.allowOverrideAgentResources = message.allowOverrideAgentResources;
    }
    return obj;
  },

  create(base?: DeepPartial<LoadVersionRequest>): LoadVersionRequest {
    return LoadVersionRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<LoadVersionRequest>): LoadVersionRequest {
    const message = createBaseLoadVersionRequest();
    message.name = object.name ?? "";
    message.allowOverrideAgentResources = object.allowOverrideAgentResources ?? false;
    return message;
  },
};

function createBaseCompareVersionsRequest(): CompareVersionsRequest {
  return { baseVersion: "", targetVersion: "", languageCode: "" };
}

export const CompareVersionsRequest: MessageFns<CompareVersionsRequest> = {
  encode(message: CompareVersionsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.baseVersion !== "") {
      writer.uint32(10).string(message.baseVersion);
    }
    if (message.targetVersion !== "") {
      writer.uint32(18).string(message.targetVersion);
    }
    if (message.languageCode !== "") {
      writer.uint32(26).string(message.languageCode);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CompareVersionsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCompareVersionsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.baseVersion = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.targetVersion = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.languageCode = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CompareVersionsRequest {
    return {
      baseVersion: isSet(object.baseVersion) ? globalThis.String(object.baseVersion) : "",
      targetVersion: isSet(object.targetVersion) ? globalThis.String(object.targetVersion) : "",
      languageCode: isSet(object.languageCode) ? globalThis.String(object.languageCode) : "",
    };
  },

  toJSON(message: CompareVersionsRequest): unknown {
    const obj: any = {};
    if (message.baseVersion !== "") {
      obj.baseVersion = message.baseVersion;
    }
    if (message.targetVersion !== "") {
      obj.targetVersion = message.targetVersion;
    }
    if (message.languageCode !== "") {
      obj.languageCode = message.languageCode;
    }
    return obj;
  },

  create(base?: DeepPartial<CompareVersionsRequest>): CompareVersionsRequest {
    return CompareVersionsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CompareVersionsRequest>): CompareVersionsRequest {
    const message = createBaseCompareVersionsRequest();
    message.baseVersion = object.baseVersion ?? "";
    message.targetVersion = object.targetVersion ?? "";
    message.languageCode = object.languageCode ?? "";
    return message;
  },
};

function createBaseCompareVersionsResponse(): CompareVersionsResponse {
  return { baseVersionContentJson: "", targetVersionContentJson: "", compareTime: undefined };
}

export const CompareVersionsResponse: MessageFns<CompareVersionsResponse> = {
  encode(message: CompareVersionsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.baseVersionContentJson !== "") {
      writer.uint32(10).string(message.baseVersionContentJson);
    }
    if (message.targetVersionContentJson !== "") {
      writer.uint32(18).string(message.targetVersionContentJson);
    }
    if (message.compareTime !== undefined) {
      Timestamp.encode(toTimestamp(message.compareTime), writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CompareVersionsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCompareVersionsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.baseVersionContentJson = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.targetVersionContentJson = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.compareTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CompareVersionsResponse {
    return {
      baseVersionContentJson: isSet(object.baseVersionContentJson)
        ? globalThis.String(object.baseVersionContentJson)
        : "",
      targetVersionContentJson: isSet(object.targetVersionContentJson)
        ? globalThis.String(object.targetVersionContentJson)
        : "",
      compareTime: isSet(object.compareTime) ? fromJsonTimestamp(object.compareTime) : undefined,
    };
  },

  toJSON(message: CompareVersionsResponse): unknown {
    const obj: any = {};
    if (message.baseVersionContentJson !== "") {
      obj.baseVersionContentJson = message.baseVersionContentJson;
    }
    if (message.targetVersionContentJson !== "") {
      obj.targetVersionContentJson = message.targetVersionContentJson;
    }
    if (message.compareTime !== undefined) {
      obj.compareTime = message.compareTime.toISOString();
    }
    return obj;
  },

  create(base?: DeepPartial<CompareVersionsResponse>): CompareVersionsResponse {
    return CompareVersionsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CompareVersionsResponse>): CompareVersionsResponse {
    const message = createBaseCompareVersionsResponse();
    message.baseVersionContentJson = object.baseVersionContentJson ?? "";
    message.targetVersionContentJson = object.targetVersionContentJson ?? "";
    message.compareTime = object.compareTime ?? undefined;
    return message;
  },
};

/** Service for managing [Versions][google.cloud.dialogflow.cx.v3.Version]. */
export type VersionsDefinition = typeof VersionsDefinition;
export const VersionsDefinition = {
  name: "Versions",
  fullName: "google.cloud.dialogflow.cx.v3.Versions",
  methods: {
    /**
     * Returns the list of all versions in the specified
     * [Flow][google.cloud.dialogflow.cx.v3.Flow].
     */
    listVersions: {
      name: "ListVersions",
      requestType: ListVersionsRequest,
      requestStream: false,
      responseType: ListVersionsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              63,
              18,
              61,
              47,
              118,
              51,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              103,
              101,
              110,
              116,
              115,
              47,
              42,
              47,
              102,
              108,
              111,
              119,
              115,
              47,
              42,
              125,
              47,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              115,
            ]),
          ],
        },
      },
    },
    /** Retrieves the specified [Version][google.cloud.dialogflow.cx.v3.Version]. */
    getVersion: {
      name: "GetVersion",
      requestType: GetVersionRequest,
      requestStream: false,
      responseType: Version,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              63,
              18,
              61,
              47,
              118,
              51,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              103,
              101,
              110,
              116,
              115,
              47,
              42,
              47,
              102,
              108,
              111,
              119,
              115,
              47,
              42,
              47,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Creates a [Version][google.cloud.dialogflow.cx.v3.Version] in the specified
     * [Flow][google.cloud.dialogflow.cx.v3.Flow].
     *
     * This method is a [long-running
     * operation](https://cloud.google.com/dialogflow/cx/docs/how/long-running-operation).
     * The returned `Operation` type has the following method-specific fields:
     *
     * - `metadata`:
     * [CreateVersionOperationMetadata][google.cloud.dialogflow.cx.v3.CreateVersionOperationMetadata]
     * - `response`: [Version][google.cloud.dialogflow.cx.v3.Version]
     */
    createVersion: {
      name: "CreateVersion",
      requestType: CreateVersionRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              41,
              10,
              7,
              86,
              101,
              114,
              115,
              105,
              111,
              110,
              18,
              30,
              67,
              114,
              101,
              97,
              116,
              101,
              86,
              101,
              114,
              115,
              105,
              111,
              110,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([14, 112, 97, 114, 101, 110, 116, 44, 118, 101, 114, 115, 105, 111, 110])],
          578365826: [
            Buffer.from([
              72,
              58,
              7,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              34,
              61,
              47,
              118,
              51,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              103,
              101,
              110,
              116,
              115,
              47,
              42,
              47,
              102,
              108,
              111,
              119,
              115,
              47,
              42,
              125,
              47,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              115,
            ]),
          ],
        },
      },
    },
    /** Updates the specified [Version][google.cloud.dialogflow.cx.v3.Version]. */
    updateVersion: {
      name: "UpdateVersion",
      requestType: UpdateVersionRequest,
      requestStream: false,
      responseType: Version,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              19,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              44,
              117,
              112,
              100,
              97,
              116,
              101,
              95,
              109,
              97,
              115,
              107,
            ]),
          ],
          578365826: [
            Buffer.from([
              80,
              58,
              7,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              50,
              69,
              47,
              118,
              51,
              47,
              123,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              103,
              101,
              110,
              116,
              115,
              47,
              42,
              47,
              102,
              108,
              111,
              119,
              115,
              47,
              42,
              47,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Deletes the specified [Version][google.cloud.dialogflow.cx.v3.Version]. */
    deleteVersion: {
      name: "DeleteVersion",
      requestType: DeleteVersionRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              63,
              42,
              61,
              47,
              118,
              51,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              103,
              101,
              110,
              116,
              115,
              47,
              42,
              47,
              102,
              108,
              111,
              119,
              115,
              47,
              42,
              47,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Loads resources in the specified version to the draft flow.
     *
     * This method is a [long-running
     * operation](https://cloud.google.com/dialogflow/cx/docs/how/long-running-operation).
     * The returned `Operation` type has the following method-specific fields:
     *
     * - `metadata`: An empty [Struct
     *   message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#struct)
     * - `response`: An [Empty
     *   message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#empty)
     */
    loadVersion: {
      name: "LoadVersion",
      requestType: LoadVersionRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              47,
              10,
              21,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              112,
              114,
              111,
              116,
              111,
              98,
              117,
              102,
              46,
              69,
              109,
              112,
              116,
              121,
              18,
              22,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              112,
              114,
              111,
              116,
              111,
              98,
              117,
              102,
              46,
              83,
              116,
              114,
              117,
              99,
              116,
            ]),
          ],
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              71,
              58,
              1,
              42,
              34,
              66,
              47,
              118,
              51,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              103,
              101,
              110,
              116,
              115,
              47,
              42,
              47,
              102,
              108,
              111,
              119,
              115,
              47,
              42,
              47,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              58,
              108,
              111,
              97,
              100,
            ]),
          ],
        },
      },
    },
    /** Compares the specified base version with target version. */
    compareVersions: {
      name: "CompareVersions",
      requestType: CompareVersionsRequest,
      requestStream: false,
      responseType: CompareVersionsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([12, 98, 97, 115, 101, 95, 118, 101, 114, 115, 105, 111, 110])],
          578365826: [
            Buffer.from([
              90,
              58,
              1,
              42,
              34,
              85,
              47,
              118,
              51,
              47,
              123,
              98,
              97,
              115,
              101,
              95,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              103,
              101,
              110,
              116,
              115,
              47,
              42,
              47,
              102,
              108,
              111,
              119,
              115,
              47,
              42,
              47,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              58,
              99,
              111,
              109,
              112,
              97,
              114,
              101,
              86,
              101,
              114,
              115,
              105,
              111,
              110,
              115,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface VersionsServiceImplementation<CallContextExt = {}> {
  /**
   * Returns the list of all versions in the specified
   * [Flow][google.cloud.dialogflow.cx.v3.Flow].
   */
  listVersions(
    request: ListVersionsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListVersionsResponse>>;
  /** Retrieves the specified [Version][google.cloud.dialogflow.cx.v3.Version]. */
  getVersion(request: GetVersionRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Version>>;
  /**
   * Creates a [Version][google.cloud.dialogflow.cx.v3.Version] in the specified
   * [Flow][google.cloud.dialogflow.cx.v3.Flow].
   *
   * This method is a [long-running
   * operation](https://cloud.google.com/dialogflow/cx/docs/how/long-running-operation).
   * The returned `Operation` type has the following method-specific fields:
   *
   * - `metadata`:
   * [CreateVersionOperationMetadata][google.cloud.dialogflow.cx.v3.CreateVersionOperationMetadata]
   * - `response`: [Version][google.cloud.dialogflow.cx.v3.Version]
   */
  createVersion(request: CreateVersionRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Operation>>;
  /** Updates the specified [Version][google.cloud.dialogflow.cx.v3.Version]. */
  updateVersion(request: UpdateVersionRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Version>>;
  /** Deletes the specified [Version][google.cloud.dialogflow.cx.v3.Version]. */
  deleteVersion(request: DeleteVersionRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Empty>>;
  /**
   * Loads resources in the specified version to the draft flow.
   *
   * This method is a [long-running
   * operation](https://cloud.google.com/dialogflow/cx/docs/how/long-running-operation).
   * The returned `Operation` type has the following method-specific fields:
   *
   * - `metadata`: An empty [Struct
   *   message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#struct)
   * - `response`: An [Empty
   *   message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#empty)
   */
  loadVersion(request: LoadVersionRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Operation>>;
  /** Compares the specified base version with target version. */
  compareVersions(
    request: CompareVersionsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<CompareVersionsResponse>>;
}

export interface VersionsClient<CallOptionsExt = {}> {
  /**
   * Returns the list of all versions in the specified
   * [Flow][google.cloud.dialogflow.cx.v3.Flow].
   */
  listVersions(
    request: DeepPartial<ListVersionsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListVersionsResponse>;
  /** Retrieves the specified [Version][google.cloud.dialogflow.cx.v3.Version]. */
  getVersion(request: DeepPartial<GetVersionRequest>, options?: CallOptions & CallOptionsExt): Promise<Version>;
  /**
   * Creates a [Version][google.cloud.dialogflow.cx.v3.Version] in the specified
   * [Flow][google.cloud.dialogflow.cx.v3.Flow].
   *
   * This method is a [long-running
   * operation](https://cloud.google.com/dialogflow/cx/docs/how/long-running-operation).
   * The returned `Operation` type has the following method-specific fields:
   *
   * - `metadata`:
   * [CreateVersionOperationMetadata][google.cloud.dialogflow.cx.v3.CreateVersionOperationMetadata]
   * - `response`: [Version][google.cloud.dialogflow.cx.v3.Version]
   */
  createVersion(request: DeepPartial<CreateVersionRequest>, options?: CallOptions & CallOptionsExt): Promise<Operation>;
  /** Updates the specified [Version][google.cloud.dialogflow.cx.v3.Version]. */
  updateVersion(request: DeepPartial<UpdateVersionRequest>, options?: CallOptions & CallOptionsExt): Promise<Version>;
  /** Deletes the specified [Version][google.cloud.dialogflow.cx.v3.Version]. */
  deleteVersion(request: DeepPartial<DeleteVersionRequest>, options?: CallOptions & CallOptionsExt): Promise<Empty>;
  /**
   * Loads resources in the specified version to the draft flow.
   *
   * This method is a [long-running
   * operation](https://cloud.google.com/dialogflow/cx/docs/how/long-running-operation).
   * The returned `Operation` type has the following method-specific fields:
   *
   * - `metadata`: An empty [Struct
   *   message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#struct)
   * - `response`: An [Empty
   *   message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#empty)
   */
  loadVersion(request: DeepPartial<LoadVersionRequest>, options?: CallOptions & CallOptionsExt): Promise<Operation>;
  /** Compares the specified base version with target version. */
  compareVersions(
    request: DeepPartial<CompareVersionsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<CompareVersionsResponse>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
