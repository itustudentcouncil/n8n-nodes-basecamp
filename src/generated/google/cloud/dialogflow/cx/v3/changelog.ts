// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/dialogflow/cx/v3/changelog.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { Timestamp } from "../../../../protobuf/timestamp.js";

export const protobufPackage = "google.cloud.dialogflow.cx.v3";

/**
 * The request message for
 * [Changelogs.ListChangelogs][google.cloud.dialogflow.cx.v3.Changelogs.ListChangelogs].
 */
export interface ListChangelogsRequest {
  /**
   * Required. The agent containing the changelogs.
   * Format: `projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>`.
   */
  parent: string;
  /**
   * The filter string. Supports filter by user_email, resource, type and
   * create_time. Some examples:
   *   1. By user email:
   *        user_email = "someone@google.com"
   *   2. By resource name:
   *        resource = "projects/123/locations/global/agents/456/flows/789"
   *   3. By resource display name:
   *        display_name = "my agent"
   *   4. By action:
   *        action = "Create"
   *   5. By type:
   *        type = "flows"
   *   6. By create time. Currently predicates on `create_time` and
   *      `create_time_epoch_seconds` are supported:
   *        create_time_epoch_seconds > 1551790877 AND create_time <=
   *        2017-01-15T01:30:15.01Z
   *   7. Combination of above filters:
   *        resource = "projects/123/locations/global/agents/456/flows/789"
   *          AND user_email = "someone@google.com"
   *          AND create_time <= 2017-01-15T01:30:15.01Z
   */
  filter: string;
  /**
   * The maximum number of items to return in a single page. By default 100 and
   * at most 1000.
   */
  pageSize: number;
  /** The next_page_token value returned from a previous list request. */
  pageToken: string;
}

/**
 * The response message for
 * [Changelogs.ListChangelogs][google.cloud.dialogflow.cx.v3.Changelogs.ListChangelogs].
 */
export interface ListChangelogsResponse {
  /**
   * The list of changelogs. There will be a maximum number of items returned
   * based on the page_size field in the request. The changelogs will be ordered
   * by timestamp.
   */
  changelogs: Changelog[];
  /**
   * Token to retrieve the next page of results, or empty if there are no more
   * results in the list.
   */
  nextPageToken: string;
}

/**
 * The request message for
 * [Changelogs.GetChangelog][google.cloud.dialogflow.cx.v3.Changelogs.GetChangelog].
 */
export interface GetChangelogRequest {
  /**
   * Required. The name of the changelog to get.
   * Format: `projects/<Project ID>/locations/<Location ID>/agents/<Agent
   * ID>/changelogs/<Changelog ID>`.
   */
  name: string;
}

/** Changelogs represents a change made to a given agent. */
export interface Changelog {
  /**
   * The unique identifier of the changelog.
   * Format: `projects/<Project ID>/locations/<Location ID>/agents/<Agent
   * ID>/changelogs/<Changelog ID>`.
   */
  name: string;
  /** Email address of the authenticated user. */
  userEmail: string;
  /** The affected resource display name of the change. */
  displayName: string;
  /** The action of the change. */
  action: string;
  /** The affected resource type. */
  type: string;
  /** The affected resource name of the change. */
  resource: string;
  /** The timestamp of the change. */
  createTime:
    | Date
    | undefined;
  /** The affected language code of the change. */
  languageCode: string;
}

function createBaseListChangelogsRequest(): ListChangelogsRequest {
  return { parent: "", filter: "", pageSize: 0, pageToken: "" };
}

export const ListChangelogsRequest: MessageFns<ListChangelogsRequest> = {
  encode(message: ListChangelogsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.filter !== "") {
      writer.uint32(18).string(message.filter);
    }
    if (message.pageSize !== 0) {
      writer.uint32(24).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(34).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListChangelogsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListChangelogsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.filter = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListChangelogsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: ListChangelogsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListChangelogsRequest>): ListChangelogsRequest {
    return ListChangelogsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListChangelogsRequest>): ListChangelogsRequest {
    const message = createBaseListChangelogsRequest();
    message.parent = object.parent ?? "";
    message.filter = object.filter ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseListChangelogsResponse(): ListChangelogsResponse {
  return { changelogs: [], nextPageToken: "" };
}

export const ListChangelogsResponse: MessageFns<ListChangelogsResponse> = {
  encode(message: ListChangelogsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.changelogs) {
      Changelog.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListChangelogsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListChangelogsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.changelogs.push(Changelog.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListChangelogsResponse {
    return {
      changelogs: globalThis.Array.isArray(object?.changelogs)
        ? object.changelogs.map((e: any) => Changelog.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListChangelogsResponse): unknown {
    const obj: any = {};
    if (message.changelogs?.length) {
      obj.changelogs = message.changelogs.map((e) => Changelog.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListChangelogsResponse>): ListChangelogsResponse {
    return ListChangelogsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListChangelogsResponse>): ListChangelogsResponse {
    const message = createBaseListChangelogsResponse();
    message.changelogs = object.changelogs?.map((e) => Changelog.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseGetChangelogRequest(): GetChangelogRequest {
  return { name: "" };
}

export const GetChangelogRequest: MessageFns<GetChangelogRequest> = {
  encode(message: GetChangelogRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetChangelogRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetChangelogRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetChangelogRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetChangelogRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetChangelogRequest>): GetChangelogRequest {
    return GetChangelogRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetChangelogRequest>): GetChangelogRequest {
    const message = createBaseGetChangelogRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseChangelog(): Changelog {
  return {
    name: "",
    userEmail: "",
    displayName: "",
    action: "",
    type: "",
    resource: "",
    createTime: undefined,
    languageCode: "",
  };
}

export const Changelog: MessageFns<Changelog> = {
  encode(message: Changelog, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.userEmail !== "") {
      writer.uint32(18).string(message.userEmail);
    }
    if (message.displayName !== "") {
      writer.uint32(58).string(message.displayName);
    }
    if (message.action !== "") {
      writer.uint32(90).string(message.action);
    }
    if (message.type !== "") {
      writer.uint32(66).string(message.type);
    }
    if (message.resource !== "") {
      writer.uint32(26).string(message.resource);
    }
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(34).fork()).join();
    }
    if (message.languageCode !== "") {
      writer.uint32(114).string(message.languageCode);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Changelog {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseChangelog();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.userEmail = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.displayName = reader.string();
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.action = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.type = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.resource = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 14:
          if (tag !== 114) {
            break;
          }

          message.languageCode = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Changelog {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      userEmail: isSet(object.userEmail) ? globalThis.String(object.userEmail) : "",
      displayName: isSet(object.displayName) ? globalThis.String(object.displayName) : "",
      action: isSet(object.action) ? globalThis.String(object.action) : "",
      type: isSet(object.type) ? globalThis.String(object.type) : "",
      resource: isSet(object.resource) ? globalThis.String(object.resource) : "",
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      languageCode: isSet(object.languageCode) ? globalThis.String(object.languageCode) : "",
    };
  },

  toJSON(message: Changelog): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.userEmail !== "") {
      obj.userEmail = message.userEmail;
    }
    if (message.displayName !== "") {
      obj.displayName = message.displayName;
    }
    if (message.action !== "") {
      obj.action = message.action;
    }
    if (message.type !== "") {
      obj.type = message.type;
    }
    if (message.resource !== "") {
      obj.resource = message.resource;
    }
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.languageCode !== "") {
      obj.languageCode = message.languageCode;
    }
    return obj;
  },

  create(base?: DeepPartial<Changelog>): Changelog {
    return Changelog.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Changelog>): Changelog {
    const message = createBaseChangelog();
    message.name = object.name ?? "";
    message.userEmail = object.userEmail ?? "";
    message.displayName = object.displayName ?? "";
    message.action = object.action ?? "";
    message.type = object.type ?? "";
    message.resource = object.resource ?? "";
    message.createTime = object.createTime ?? undefined;
    message.languageCode = object.languageCode ?? "";
    return message;
  },
};

/** Service for managing [Changelogs][google.cloud.dialogflow.cx.v3.Changelog]. */
export type ChangelogsDefinition = typeof ChangelogsDefinition;
export const ChangelogsDefinition = {
  name: "Changelogs",
  fullName: "google.cloud.dialogflow.cx.v3.Changelogs",
  methods: {
    /** Returns the list of Changelogs. */
    listChangelogs: {
      name: "ListChangelogs",
      requestType: ListChangelogsRequest,
      requestStream: false,
      responseType: ListChangelogsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              57,
              18,
              55,
              47,
              118,
              51,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              103,
              101,
              110,
              116,
              115,
              47,
              42,
              125,
              47,
              99,
              104,
              97,
              110,
              103,
              101,
              108,
              111,
              103,
              115,
            ]),
          ],
        },
      },
    },
    /** Retrieves the specified Changelog. */
    getChangelog: {
      name: "GetChangelog",
      requestType: GetChangelogRequest,
      requestStream: false,
      responseType: Changelog,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              57,
              18,
              55,
              47,
              118,
              51,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              103,
              101,
              110,
              116,
              115,
              47,
              42,
              47,
              99,
              104,
              97,
              110,
              103,
              101,
              108,
              111,
              103,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface ChangelogsServiceImplementation<CallContextExt = {}> {
  /** Returns the list of Changelogs. */
  listChangelogs(
    request: ListChangelogsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListChangelogsResponse>>;
  /** Retrieves the specified Changelog. */
  getChangelog(request: GetChangelogRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Changelog>>;
}

export interface ChangelogsClient<CallOptionsExt = {}> {
  /** Returns the list of Changelogs. */
  listChangelogs(
    request: DeepPartial<ListChangelogsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListChangelogsResponse>;
  /** Retrieves the specified Changelog. */
  getChangelog(request: DeepPartial<GetChangelogRequest>, options?: CallOptions & CallOptionsExt): Promise<Changelog>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
