// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/dialogflow/cx/v3/agent.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { Operation } from "../../../../longrunning/operations.js";
import { Empty } from "../../../../protobuf/empty.js";
import { FieldMask } from "../../../../protobuf/field_mask.js";
import { Struct } from "../../../../protobuf/struct.js";
import { AdvancedSettings } from "./advanced_settings.js";
import { TextToSpeechSettings } from "./audio_config.js";
import { FlowValidationResult } from "./flow.js";
import { GenerativeSettings } from "./generative_settings.js";

export const protobufPackage = "google.cloud.dialogflow.cx.v3";

/** Settings related to speech recognition. */
export interface SpeechToTextSettings {
  /** Whether to use speech adaptation for speech recognition. */
  enableSpeechAdaptation: boolean;
}

/**
 * Agents are best described as Natural Language Understanding (NLU) modules
 * that transform user requests into actionable data. You can include agents
 * in your app, product, or service to determine user intent and respond to the
 * user in a natural way.
 *
 * After you create an agent, you can add
 * [Intents][google.cloud.dialogflow.cx.v3.Intent], [Entity
 * Types][google.cloud.dialogflow.cx.v3.EntityType],
 * [Flows][google.cloud.dialogflow.cx.v3.Flow],
 * [Fulfillments][google.cloud.dialogflow.cx.v3.Fulfillment],
 * [Webhooks][google.cloud.dialogflow.cx.v3.Webhook],
 * [TransitionRouteGroups][google.cloud.dialogflow.cx.v3.TransitionRouteGroup]
 * and so on to manage the conversation flows.
 */
export interface Agent {
  /**
   * The unique identifier of the agent.
   * Required for the
   * [Agents.UpdateAgent][google.cloud.dialogflow.cx.v3.Agents.UpdateAgent]
   * method.
   * [Agents.CreateAgent][google.cloud.dialogflow.cx.v3.Agents.CreateAgent]
   * populates the name automatically.
   * Format: `projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>`.
   */
  name: string;
  /** Required. The human-readable name of the agent, unique within the location. */
  displayName: string;
  /**
   * Required. Immutable. The default language of the agent as a language tag.
   * See [Language
   * Support](https://cloud.google.com/dialogflow/cx/docs/reference/language)
   * for a list of the currently supported language codes.
   * This field cannot be set by the
   * [Agents.UpdateAgent][google.cloud.dialogflow.cx.v3.Agents.UpdateAgent]
   * method.
   */
  defaultLanguageCode: string;
  /**
   * The list of all languages supported by the agent (except for the
   * `default_language_code`).
   */
  supportedLanguageCodes: string[];
  /**
   * Required. The time zone of the agent from the [time zone
   * database](https://www.iana.org/time-zones), e.g., America/New_York,
   * Europe/Paris.
   */
  timeZone: string;
  /**
   * The description of the agent. The maximum length is 500 characters. If
   * exceeded, the request is rejected.
   */
  description: string;
  /**
   * The URI of the agent's avatar. Avatars are used throughout the Dialogflow
   * console and in the self-hosted [Web
   * Demo](https://cloud.google.com/dialogflow/docs/integrations/web-demo)
   * integration.
   */
  avatarUri: string;
  /** Speech recognition related settings. */
  speechToTextSettings:
    | SpeechToTextSettings
    | undefined;
  /**
   * Immutable. Name of the start flow in this agent. A start flow will be
   * automatically created when the agent is created, and can only be deleted by
   * deleting the agent. Format: `projects/<Project ID>/locations/<Location
   * ID>/agents/<Agent ID>/flows/<Flow ID>`.
   */
  startFlow: string;
  /**
   * Name of the
   * [SecuritySettings][google.cloud.dialogflow.cx.v3.SecuritySettings]
   * reference for the agent. Format: `projects/<Project ID>/locations/<Location
   * ID>/securitySettings/<Security Settings ID>`.
   */
  securitySettings: string;
  /**
   * Indicates if stackdriver logging is enabled for the agent.
   * Please use
   * [agent.advanced_settings][google.cloud.dialogflow.cx.v3.AdvancedSettings.LoggingSettings]
   * instead.
   *
   * @deprecated
   */
  enableStackdriverLogging: boolean;
  /**
   * Indicates if automatic spell correction is enabled in detect intent
   * requests.
   */
  enableSpellCorrection: boolean;
  /**
   * Optional. Enable training multi-lingual models for this agent. These models
   * will be trained on all the languages supported by the agent.
   */
  enableMultiLanguageTraining: boolean;
  /**
   * Indicates whether the agent is locked for changes. If the agent is locked,
   * modifications to the agent will be rejected except for [RestoreAgent][].
   */
  locked: boolean;
  /**
   * Hierarchical advanced settings for this agent. The settings exposed at the
   * lower level overrides the settings exposed at the higher level.
   */
  advancedSettings:
    | AdvancedSettings
    | undefined;
  /** Git integration settings for this agent. */
  gitIntegrationSettings:
    | Agent_GitIntegrationSettings
    | undefined;
  /**
   * Settings on instructing the speech synthesizer on how to generate the
   * output audio content.
   */
  textToSpeechSettings:
    | TextToSpeechSettings
    | undefined;
  /** Gen App Builder-related agent-level settings. */
  genAppBuilderSettings?:
    | Agent_GenAppBuilderSettings
    | undefined;
  /** Optional. Answer feedback collection settings. */
  answerFeedbackSettings:
    | Agent_AnswerFeedbackSettings
    | undefined;
  /** Optional. Settings for end user personalization. */
  personalizationSettings: Agent_PersonalizationSettings | undefined;
}

/** Settings for connecting to Git repository for an agent. */
export interface Agent_GitIntegrationSettings {
  /** GitHub settings. */
  githubSettings?: Agent_GitIntegrationSettings_GithubSettings | undefined;
}

/** Settings of integration with GitHub. */
export interface Agent_GitIntegrationSettings_GithubSettings {
  /** The unique repository display name for the GitHub repository. */
  displayName: string;
  /** The GitHub repository URI related to the agent. */
  repositoryUri: string;
  /** The branch of the GitHub repository tracked for this agent. */
  trackingBranch: string;
  /**
   * The access token used to authenticate the access to the GitHub
   * repository.
   */
  accessToken: string;
  /** A list of branches configured to be used from Dialogflow. */
  branches: string[];
}

/** Settings for Gen App Builder. */
export interface Agent_GenAppBuilderSettings {
  /**
   * Required. The full name of the Gen App Builder engine related to this
   * agent if there is one. Format: `projects/{Project ID}/locations/{Location
   * ID}/collections/{Collection ID}/engines/{Engine ID}`
   */
  engine: string;
}

/** Settings for answer feedback collection. */
export interface Agent_AnswerFeedbackSettings {
  /**
   * Optional. If enabled, end users will be able to provide
   * [answer feedback][google.cloud.dialogflow.cx.v3.AnswerFeedback] to
   * Dialogflow responses. Feature works only if interaction logging is
   * enabled in the Dialogflow agent.
   */
  enableAnswerFeedback: boolean;
}

/** Settings for end user personalization. */
export interface Agent_PersonalizationSettings {
  /**
   * Optional. Default end user metadata, used when processing DetectIntent
   * requests. Recommended to be filled as a template instead of hard-coded
   * value, for example { "age": "$session.params.age" }. The data will be
   * merged with the
   * [QueryParameters.end_user_metadata][google.cloud.dialogflow.cx.v3.QueryParameters.end_user_metadata]
   * in
   * [DetectIntentRequest.query_params][google.cloud.dialogflow.cx.v3.DetectIntentRequest.query_params]
   * during query processing.
   */
  defaultEndUserMetadata: { [key: string]: any } | undefined;
}

/**
 * The request message for
 * [Agents.ListAgents][google.cloud.dialogflow.cx.v3.Agents.ListAgents].
 */
export interface ListAgentsRequest {
  /**
   * Required. The location to list all agents for.
   * Format: `projects/<Project ID>/locations/<Location ID>`.
   */
  parent: string;
  /**
   * The maximum number of items to return in a single page. By default 100 and
   * at most 1000.
   */
  pageSize: number;
  /** The next_page_token value returned from a previous list request. */
  pageToken: string;
}

/**
 * The response message for
 * [Agents.ListAgents][google.cloud.dialogflow.cx.v3.Agents.ListAgents].
 */
export interface ListAgentsResponse {
  /**
   * The list of agents. There will be a maximum number of items returned based
   * on the page_size field in the request.
   */
  agents: Agent[];
  /**
   * Token to retrieve the next page of results, or empty if there are no more
   * results in the list.
   */
  nextPageToken: string;
}

/**
 * The request message for
 * [Agents.GetAgent][google.cloud.dialogflow.cx.v3.Agents.GetAgent].
 */
export interface GetAgentRequest {
  /**
   * Required. The name of the agent.
   * Format: `projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>`.
   */
  name: string;
}

/**
 * The request message for
 * [Agents.CreateAgent][google.cloud.dialogflow.cx.v3.Agents.CreateAgent].
 */
export interface CreateAgentRequest {
  /**
   * Required. The location to create a agent for.
   * Format: `projects/<Project ID>/locations/<Location ID>`.
   */
  parent: string;
  /** Required. The agent to create. */
  agent: Agent | undefined;
}

/**
 * The request message for
 * [Agents.UpdateAgent][google.cloud.dialogflow.cx.v3.Agents.UpdateAgent].
 */
export interface UpdateAgentRequest {
  /** Required. The agent to update. */
  agent:
    | Agent
    | undefined;
  /**
   * The mask to control which fields get updated. If the mask is not present,
   * all fields will be updated.
   */
  updateMask: string[] | undefined;
}

/**
 * The request message for
 * [Agents.DeleteAgent][google.cloud.dialogflow.cx.v3.Agents.DeleteAgent].
 */
export interface DeleteAgentRequest {
  /**
   * Required. The name of the agent to delete.
   * Format: `projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>`.
   */
  name: string;
}

/**
 * The request message for
 * [Agents.ExportAgent][google.cloud.dialogflow.cx.v3.Agents.ExportAgent].
 */
export interface ExportAgentRequest {
  /**
   * Required. The name of the agent to export.
   * Format: `projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>`.
   */
  name: string;
  /**
   * Optional. The [Google Cloud
   * Storage](https://cloud.google.com/storage/docs/) URI to export the agent
   * to. The format of this URI must be `gs://<bucket-name>/<object-name>`. If
   * left unspecified, the serialized agent is returned inline.
   *
   * Dialogflow performs a write operation for the Cloud Storage object
   * on the caller's behalf, so your request authentication must
   * have write permissions for the object. For more information, see
   * [Dialogflow access
   * control](https://cloud.google.com/dialogflow/cx/docs/concept/access-control#storage).
   */
  agentUri: string;
  /**
   * Optional. The data format of the exported agent. If not specified, `BLOB`
   * is assumed.
   */
  dataFormat: ExportAgentRequest_DataFormat;
  /**
   * Optional. Environment name. If not set, draft environment is assumed.
   * Format: `projects/<Project ID>/locations/<Location ID>/agents/<Agent
   * ID>/environments/<Environment ID>`.
   */
  environment: string;
  /** Optional. The Git branch to export the agent to. */
  gitDestination:
    | ExportAgentRequest_GitDestination
    | undefined;
  /** Optional. Whether to include BigQuery Export setting. */
  includeBigqueryExportSettings: boolean;
}

/** Data format of the exported agent. */
export enum ExportAgentRequest_DataFormat {
  /** DATA_FORMAT_UNSPECIFIED - Unspecified format. */
  DATA_FORMAT_UNSPECIFIED = 0,
  /** BLOB - Agent content will be exported as raw bytes. */
  BLOB = 1,
  /** JSON_PACKAGE - Agent content will be exported in JSON Package format. */
  JSON_PACKAGE = 4,
  UNRECOGNIZED = -1,
}

export function exportAgentRequest_DataFormatFromJSON(object: any): ExportAgentRequest_DataFormat {
  switch (object) {
    case 0:
    case "DATA_FORMAT_UNSPECIFIED":
      return ExportAgentRequest_DataFormat.DATA_FORMAT_UNSPECIFIED;
    case 1:
    case "BLOB":
      return ExportAgentRequest_DataFormat.BLOB;
    case 4:
    case "JSON_PACKAGE":
      return ExportAgentRequest_DataFormat.JSON_PACKAGE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ExportAgentRequest_DataFormat.UNRECOGNIZED;
  }
}

export function exportAgentRequest_DataFormatToJSON(object: ExportAgentRequest_DataFormat): string {
  switch (object) {
    case ExportAgentRequest_DataFormat.DATA_FORMAT_UNSPECIFIED:
      return "DATA_FORMAT_UNSPECIFIED";
    case ExportAgentRequest_DataFormat.BLOB:
      return "BLOB";
    case ExportAgentRequest_DataFormat.JSON_PACKAGE:
      return "JSON_PACKAGE";
    case ExportAgentRequest_DataFormat.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Settings for exporting to a git branch. */
export interface ExportAgentRequest_GitDestination {
  /** Tracking branch for the git push. */
  trackingBranch: string;
  /** Commit message for the git push. */
  commitMessage: string;
}

/**
 * The response message for
 * [Agents.ExportAgent][google.cloud.dialogflow.cx.v3.Agents.ExportAgent].
 */
export interface ExportAgentResponse {
  /**
   * The URI to a file containing the exported agent. This field is populated
   * if `agent_uri` is specified in
   * [ExportAgentRequest][google.cloud.dialogflow.cx.v3.ExportAgentRequest].
   */
  agentUri?:
    | string
    | undefined;
  /**
   * Uncompressed raw byte content for agent. This field is populated
   * if none of `agent_uri` and `git_destination` are specified in
   * [ExportAgentRequest][google.cloud.dialogflow.cx.v3.ExportAgentRequest].
   */
  agentContent?:
    | Buffer
    | undefined;
  /**
   * Commit SHA of the git push. This field is populated if
   * `git_destination` is specified in
   * [ExportAgentRequest][google.cloud.dialogflow.cx.v3.ExportAgentRequest].
   */
  commitSha?: string | undefined;
}

/**
 * The request message for
 * [Agents.RestoreAgent][google.cloud.dialogflow.cx.v3.Agents.RestoreAgent].
 */
export interface RestoreAgentRequest {
  /**
   * Required. The name of the agent to restore into.
   * Format: `projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>`.
   */
  name: string;
  /**
   * The [Google Cloud Storage](https://cloud.google.com/storage/docs/) URI
   * to restore agent from. The format of this URI must be
   * `gs://<bucket-name>/<object-name>`.
   *
   * Dialogflow performs a read operation for the Cloud Storage object
   * on the caller's behalf, so your request authentication must
   * have read permissions for the object. For more information, see
   * [Dialogflow access
   * control](https://cloud.google.com/dialogflow/cx/docs/concept/access-control#storage).
   */
  agentUri?:
    | string
    | undefined;
  /** Uncompressed raw byte content for agent. */
  agentContent?:
    | Buffer
    | undefined;
  /** Setting for restoring from a git branch */
  gitSource?:
    | RestoreAgentRequest_GitSource
    | undefined;
  /** Agent restore mode. If not specified, `KEEP` is assumed. */
  restoreOption: RestoreAgentRequest_RestoreOption;
}

/** Restore option. */
export enum RestoreAgentRequest_RestoreOption {
  /** RESTORE_OPTION_UNSPECIFIED - Unspecified. Treated as KEEP. */
  RESTORE_OPTION_UNSPECIFIED = 0,
  /**
   * KEEP - Always respect the settings from the exported agent file. It may cause
   * a restoration failure if some settings (e.g. model type) are not
   * supported in the target agent.
   */
  KEEP = 1,
  /**
   * FALLBACK - Fallback to default settings if some settings are not supported in the
   * target agent.
   */
  FALLBACK = 2,
  UNRECOGNIZED = -1,
}

export function restoreAgentRequest_RestoreOptionFromJSON(object: any): RestoreAgentRequest_RestoreOption {
  switch (object) {
    case 0:
    case "RESTORE_OPTION_UNSPECIFIED":
      return RestoreAgentRequest_RestoreOption.RESTORE_OPTION_UNSPECIFIED;
    case 1:
    case "KEEP":
      return RestoreAgentRequest_RestoreOption.KEEP;
    case 2:
    case "FALLBACK":
      return RestoreAgentRequest_RestoreOption.FALLBACK;
    case -1:
    case "UNRECOGNIZED":
    default:
      return RestoreAgentRequest_RestoreOption.UNRECOGNIZED;
  }
}

export function restoreAgentRequest_RestoreOptionToJSON(object: RestoreAgentRequest_RestoreOption): string {
  switch (object) {
    case RestoreAgentRequest_RestoreOption.RESTORE_OPTION_UNSPECIFIED:
      return "RESTORE_OPTION_UNSPECIFIED";
    case RestoreAgentRequest_RestoreOption.KEEP:
      return "KEEP";
    case RestoreAgentRequest_RestoreOption.FALLBACK:
      return "FALLBACK";
    case RestoreAgentRequest_RestoreOption.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Settings for restoring from a git branch */
export interface RestoreAgentRequest_GitSource {
  /** tracking branch for the git pull */
  trackingBranch: string;
}

/**
 * The request message for
 * [Agents.ValidateAgent][google.cloud.dialogflow.cx.v3.Agents.ValidateAgent].
 */
export interface ValidateAgentRequest {
  /**
   * Required. The agent to validate.
   * Format: `projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>`.
   */
  name: string;
  /** If not specified, the agent's default language is used. */
  languageCode: string;
}

/**
 * The request message for
 * [Agents.GetAgentValidationResult][google.cloud.dialogflow.cx.v3.Agents.GetAgentValidationResult].
 */
export interface GetAgentValidationResultRequest {
  /**
   * Required. The agent name.
   * Format: `projects/<Project ID>/locations/<Location ID>/agents/<Agent
   * ID>/validationResult`.
   */
  name: string;
  /** If not specified, the agent's default language is used. */
  languageCode: string;
}

/**
 * The response message for
 * [Agents.GetAgentValidationResult][google.cloud.dialogflow.cx.v3.Agents.GetAgentValidationResult].
 */
export interface AgentValidationResult {
  /**
   * The unique identifier of the agent validation result.
   * Format: `projects/<Project ID>/locations/<Location ID>/agents/<Agent
   * ID>/validationResult`.
   */
  name: string;
  /** Contains all flow validation results. */
  flowValidationResults: FlowValidationResult[];
}

/**
 * Request for
 * [GetGenerativeSettings][google.cloud.dialogflow.cx.v3.Agents.GetGenerativeSettings]
 * RPC.
 */
export interface GetGenerativeSettingsRequest {
  /**
   * Required. Format: `projects/<Project ID>/locations/<Location
   * ID>/agents/<Agent ID>/generativeSettings`.
   */
  name: string;
  /** Required. Language code of the generative settings. */
  languageCode: string;
}

/**
 * Request for
 * [UpdateGenerativeSettings][google.cloud.dialogflow.cx.v3.Agents.UpdateGenerativeSettings]
 * RPC.
 */
export interface UpdateGenerativeSettingsRequest {
  /** Required. Generative settings to update. */
  generativeSettings:
    | GenerativeSettings
    | undefined;
  /**
   * Optional. The mask to control which fields get updated. If the mask is not
   * present, all fields will be updated.
   */
  updateMask: string[] | undefined;
}

function createBaseSpeechToTextSettings(): SpeechToTextSettings {
  return { enableSpeechAdaptation: false };
}

export const SpeechToTextSettings: MessageFns<SpeechToTextSettings> = {
  encode(message: SpeechToTextSettings, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.enableSpeechAdaptation !== false) {
      writer.uint32(8).bool(message.enableSpeechAdaptation);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SpeechToTextSettings {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSpeechToTextSettings();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.enableSpeechAdaptation = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SpeechToTextSettings {
    return {
      enableSpeechAdaptation: isSet(object.enableSpeechAdaptation)
        ? globalThis.Boolean(object.enableSpeechAdaptation)
        : false,
    };
  },

  toJSON(message: SpeechToTextSettings): unknown {
    const obj: any = {};
    if (message.enableSpeechAdaptation !== false) {
      obj.enableSpeechAdaptation = message.enableSpeechAdaptation;
    }
    return obj;
  },

  create(base?: DeepPartial<SpeechToTextSettings>): SpeechToTextSettings {
    return SpeechToTextSettings.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SpeechToTextSettings>): SpeechToTextSettings {
    const message = createBaseSpeechToTextSettings();
    message.enableSpeechAdaptation = object.enableSpeechAdaptation ?? false;
    return message;
  },
};

function createBaseAgent(): Agent {
  return {
    name: "",
    displayName: "",
    defaultLanguageCode: "",
    supportedLanguageCodes: [],
    timeZone: "",
    description: "",
    avatarUri: "",
    speechToTextSettings: undefined,
    startFlow: "",
    securitySettings: "",
    enableStackdriverLogging: false,
    enableSpellCorrection: false,
    enableMultiLanguageTraining: false,
    locked: false,
    advancedSettings: undefined,
    gitIntegrationSettings: undefined,
    textToSpeechSettings: undefined,
    genAppBuilderSettings: undefined,
    answerFeedbackSettings: undefined,
    personalizationSettings: undefined,
  };
}

export const Agent: MessageFns<Agent> = {
  encode(message: Agent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.displayName !== "") {
      writer.uint32(18).string(message.displayName);
    }
    if (message.defaultLanguageCode !== "") {
      writer.uint32(26).string(message.defaultLanguageCode);
    }
    for (const v of message.supportedLanguageCodes) {
      writer.uint32(34).string(v!);
    }
    if (message.timeZone !== "") {
      writer.uint32(42).string(message.timeZone);
    }
    if (message.description !== "") {
      writer.uint32(50).string(message.description);
    }
    if (message.avatarUri !== "") {
      writer.uint32(58).string(message.avatarUri);
    }
    if (message.speechToTextSettings !== undefined) {
      SpeechToTextSettings.encode(message.speechToTextSettings, writer.uint32(106).fork()).join();
    }
    if (message.startFlow !== "") {
      writer.uint32(130).string(message.startFlow);
    }
    if (message.securitySettings !== "") {
      writer.uint32(138).string(message.securitySettings);
    }
    if (message.enableStackdriverLogging !== false) {
      writer.uint32(144).bool(message.enableStackdriverLogging);
    }
    if (message.enableSpellCorrection !== false) {
      writer.uint32(160).bool(message.enableSpellCorrection);
    }
    if (message.enableMultiLanguageTraining !== false) {
      writer.uint32(320).bool(message.enableMultiLanguageTraining);
    }
    if (message.locked !== false) {
      writer.uint32(216).bool(message.locked);
    }
    if (message.advancedSettings !== undefined) {
      AdvancedSettings.encode(message.advancedSettings, writer.uint32(178).fork()).join();
    }
    if (message.gitIntegrationSettings !== undefined) {
      Agent_GitIntegrationSettings.encode(message.gitIntegrationSettings, writer.uint32(242).fork()).join();
    }
    if (message.textToSpeechSettings !== undefined) {
      TextToSpeechSettings.encode(message.textToSpeechSettings, writer.uint32(250).fork()).join();
    }
    if (message.genAppBuilderSettings !== undefined) {
      Agent_GenAppBuilderSettings.encode(message.genAppBuilderSettings, writer.uint32(266).fork()).join();
    }
    if (message.answerFeedbackSettings !== undefined) {
      Agent_AnswerFeedbackSettings.encode(message.answerFeedbackSettings, writer.uint32(306).fork()).join();
    }
    if (message.personalizationSettings !== undefined) {
      Agent_PersonalizationSettings.encode(message.personalizationSettings, writer.uint32(338).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Agent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAgent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.displayName = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.defaultLanguageCode = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.supportedLanguageCodes.push(reader.string());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.timeZone = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.description = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.avatarUri = reader.string();
          continue;
        case 13:
          if (tag !== 106) {
            break;
          }

          message.speechToTextSettings = SpeechToTextSettings.decode(reader, reader.uint32());
          continue;
        case 16:
          if (tag !== 130) {
            break;
          }

          message.startFlow = reader.string();
          continue;
        case 17:
          if (tag !== 138) {
            break;
          }

          message.securitySettings = reader.string();
          continue;
        case 18:
          if (tag !== 144) {
            break;
          }

          message.enableStackdriverLogging = reader.bool();
          continue;
        case 20:
          if (tag !== 160) {
            break;
          }

          message.enableSpellCorrection = reader.bool();
          continue;
        case 40:
          if (tag !== 320) {
            break;
          }

          message.enableMultiLanguageTraining = reader.bool();
          continue;
        case 27:
          if (tag !== 216) {
            break;
          }

          message.locked = reader.bool();
          continue;
        case 22:
          if (tag !== 178) {
            break;
          }

          message.advancedSettings = AdvancedSettings.decode(reader, reader.uint32());
          continue;
        case 30:
          if (tag !== 242) {
            break;
          }

          message.gitIntegrationSettings = Agent_GitIntegrationSettings.decode(reader, reader.uint32());
          continue;
        case 31:
          if (tag !== 250) {
            break;
          }

          message.textToSpeechSettings = TextToSpeechSettings.decode(reader, reader.uint32());
          continue;
        case 33:
          if (tag !== 266) {
            break;
          }

          message.genAppBuilderSettings = Agent_GenAppBuilderSettings.decode(reader, reader.uint32());
          continue;
        case 38:
          if (tag !== 306) {
            break;
          }

          message.answerFeedbackSettings = Agent_AnswerFeedbackSettings.decode(reader, reader.uint32());
          continue;
        case 42:
          if (tag !== 338) {
            break;
          }

          message.personalizationSettings = Agent_PersonalizationSettings.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Agent {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      displayName: isSet(object.displayName) ? globalThis.String(object.displayName) : "",
      defaultLanguageCode: isSet(object.defaultLanguageCode) ? globalThis.String(object.defaultLanguageCode) : "",
      supportedLanguageCodes: globalThis.Array.isArray(object?.supportedLanguageCodes)
        ? object.supportedLanguageCodes.map((e: any) => globalThis.String(e))
        : [],
      timeZone: isSet(object.timeZone) ? globalThis.String(object.timeZone) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      avatarUri: isSet(object.avatarUri) ? globalThis.String(object.avatarUri) : "",
      speechToTextSettings: isSet(object.speechToTextSettings)
        ? SpeechToTextSettings.fromJSON(object.speechToTextSettings)
        : undefined,
      startFlow: isSet(object.startFlow) ? globalThis.String(object.startFlow) : "",
      securitySettings: isSet(object.securitySettings) ? globalThis.String(object.securitySettings) : "",
      enableStackdriverLogging: isSet(object.enableStackdriverLogging)
        ? globalThis.Boolean(object.enableStackdriverLogging)
        : false,
      enableSpellCorrection: isSet(object.enableSpellCorrection)
        ? globalThis.Boolean(object.enableSpellCorrection)
        : false,
      enableMultiLanguageTraining: isSet(object.enableMultiLanguageTraining)
        ? globalThis.Boolean(object.enableMultiLanguageTraining)
        : false,
      locked: isSet(object.locked) ? globalThis.Boolean(object.locked) : false,
      advancedSettings: isSet(object.advancedSettings) ? AdvancedSettings.fromJSON(object.advancedSettings) : undefined,
      gitIntegrationSettings: isSet(object.gitIntegrationSettings)
        ? Agent_GitIntegrationSettings.fromJSON(object.gitIntegrationSettings)
        : undefined,
      textToSpeechSettings: isSet(object.textToSpeechSettings)
        ? TextToSpeechSettings.fromJSON(object.textToSpeechSettings)
        : undefined,
      genAppBuilderSettings: isSet(object.genAppBuilderSettings)
        ? Agent_GenAppBuilderSettings.fromJSON(object.genAppBuilderSettings)
        : undefined,
      answerFeedbackSettings: isSet(object.answerFeedbackSettings)
        ? Agent_AnswerFeedbackSettings.fromJSON(object.answerFeedbackSettings)
        : undefined,
      personalizationSettings: isSet(object.personalizationSettings)
        ? Agent_PersonalizationSettings.fromJSON(object.personalizationSettings)
        : undefined,
    };
  },

  toJSON(message: Agent): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.displayName !== "") {
      obj.displayName = message.displayName;
    }
    if (message.defaultLanguageCode !== "") {
      obj.defaultLanguageCode = message.defaultLanguageCode;
    }
    if (message.supportedLanguageCodes?.length) {
      obj.supportedLanguageCodes = message.supportedLanguageCodes;
    }
    if (message.timeZone !== "") {
      obj.timeZone = message.timeZone;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.avatarUri !== "") {
      obj.avatarUri = message.avatarUri;
    }
    if (message.speechToTextSettings !== undefined) {
      obj.speechToTextSettings = SpeechToTextSettings.toJSON(message.speechToTextSettings);
    }
    if (message.startFlow !== "") {
      obj.startFlow = message.startFlow;
    }
    if (message.securitySettings !== "") {
      obj.securitySettings = message.securitySettings;
    }
    if (message.enableStackdriverLogging !== false) {
      obj.enableStackdriverLogging = message.enableStackdriverLogging;
    }
    if (message.enableSpellCorrection !== false) {
      obj.enableSpellCorrection = message.enableSpellCorrection;
    }
    if (message.enableMultiLanguageTraining !== false) {
      obj.enableMultiLanguageTraining = message.enableMultiLanguageTraining;
    }
    if (message.locked !== false) {
      obj.locked = message.locked;
    }
    if (message.advancedSettings !== undefined) {
      obj.advancedSettings = AdvancedSettings.toJSON(message.advancedSettings);
    }
    if (message.gitIntegrationSettings !== undefined) {
      obj.gitIntegrationSettings = Agent_GitIntegrationSettings.toJSON(message.gitIntegrationSettings);
    }
    if (message.textToSpeechSettings !== undefined) {
      obj.textToSpeechSettings = TextToSpeechSettings.toJSON(message.textToSpeechSettings);
    }
    if (message.genAppBuilderSettings !== undefined) {
      obj.genAppBuilderSettings = Agent_GenAppBuilderSettings.toJSON(message.genAppBuilderSettings);
    }
    if (message.answerFeedbackSettings !== undefined) {
      obj.answerFeedbackSettings = Agent_AnswerFeedbackSettings.toJSON(message.answerFeedbackSettings);
    }
    if (message.personalizationSettings !== undefined) {
      obj.personalizationSettings = Agent_PersonalizationSettings.toJSON(message.personalizationSettings);
    }
    return obj;
  },

  create(base?: DeepPartial<Agent>): Agent {
    return Agent.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Agent>): Agent {
    const message = createBaseAgent();
    message.name = object.name ?? "";
    message.displayName = object.displayName ?? "";
    message.defaultLanguageCode = object.defaultLanguageCode ?? "";
    message.supportedLanguageCodes = object.supportedLanguageCodes?.map((e) => e) || [];
    message.timeZone = object.timeZone ?? "";
    message.description = object.description ?? "";
    message.avatarUri = object.avatarUri ?? "";
    message.speechToTextSettings = (object.speechToTextSettings !== undefined && object.speechToTextSettings !== null)
      ? SpeechToTextSettings.fromPartial(object.speechToTextSettings)
      : undefined;
    message.startFlow = object.startFlow ?? "";
    message.securitySettings = object.securitySettings ?? "";
    message.enableStackdriverLogging = object.enableStackdriverLogging ?? false;
    message.enableSpellCorrection = object.enableSpellCorrection ?? false;
    message.enableMultiLanguageTraining = object.enableMultiLanguageTraining ?? false;
    message.locked = object.locked ?? false;
    message.advancedSettings = (object.advancedSettings !== undefined && object.advancedSettings !== null)
      ? AdvancedSettings.fromPartial(object.advancedSettings)
      : undefined;
    message.gitIntegrationSettings =
      (object.gitIntegrationSettings !== undefined && object.gitIntegrationSettings !== null)
        ? Agent_GitIntegrationSettings.fromPartial(object.gitIntegrationSettings)
        : undefined;
    message.textToSpeechSettings = (object.textToSpeechSettings !== undefined && object.textToSpeechSettings !== null)
      ? TextToSpeechSettings.fromPartial(object.textToSpeechSettings)
      : undefined;
    message.genAppBuilderSettings =
      (object.genAppBuilderSettings !== undefined && object.genAppBuilderSettings !== null)
        ? Agent_GenAppBuilderSettings.fromPartial(object.genAppBuilderSettings)
        : undefined;
    message.answerFeedbackSettings =
      (object.answerFeedbackSettings !== undefined && object.answerFeedbackSettings !== null)
        ? Agent_AnswerFeedbackSettings.fromPartial(object.answerFeedbackSettings)
        : undefined;
    message.personalizationSettings =
      (object.personalizationSettings !== undefined && object.personalizationSettings !== null)
        ? Agent_PersonalizationSettings.fromPartial(object.personalizationSettings)
        : undefined;
    return message;
  },
};

function createBaseAgent_GitIntegrationSettings(): Agent_GitIntegrationSettings {
  return { githubSettings: undefined };
}

export const Agent_GitIntegrationSettings: MessageFns<Agent_GitIntegrationSettings> = {
  encode(message: Agent_GitIntegrationSettings, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.githubSettings !== undefined) {
      Agent_GitIntegrationSettings_GithubSettings.encode(message.githubSettings, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Agent_GitIntegrationSettings {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAgent_GitIntegrationSettings();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.githubSettings = Agent_GitIntegrationSettings_GithubSettings.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Agent_GitIntegrationSettings {
    return {
      githubSettings: isSet(object.githubSettings)
        ? Agent_GitIntegrationSettings_GithubSettings.fromJSON(object.githubSettings)
        : undefined,
    };
  },

  toJSON(message: Agent_GitIntegrationSettings): unknown {
    const obj: any = {};
    if (message.githubSettings !== undefined) {
      obj.githubSettings = Agent_GitIntegrationSettings_GithubSettings.toJSON(message.githubSettings);
    }
    return obj;
  },

  create(base?: DeepPartial<Agent_GitIntegrationSettings>): Agent_GitIntegrationSettings {
    return Agent_GitIntegrationSettings.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Agent_GitIntegrationSettings>): Agent_GitIntegrationSettings {
    const message = createBaseAgent_GitIntegrationSettings();
    message.githubSettings = (object.githubSettings !== undefined && object.githubSettings !== null)
      ? Agent_GitIntegrationSettings_GithubSettings.fromPartial(object.githubSettings)
      : undefined;
    return message;
  },
};

function createBaseAgent_GitIntegrationSettings_GithubSettings(): Agent_GitIntegrationSettings_GithubSettings {
  return { displayName: "", repositoryUri: "", trackingBranch: "", accessToken: "", branches: [] };
}

export const Agent_GitIntegrationSettings_GithubSettings: MessageFns<Agent_GitIntegrationSettings_GithubSettings> = {
  encode(
    message: Agent_GitIntegrationSettings_GithubSettings,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.displayName !== "") {
      writer.uint32(10).string(message.displayName);
    }
    if (message.repositoryUri !== "") {
      writer.uint32(18).string(message.repositoryUri);
    }
    if (message.trackingBranch !== "") {
      writer.uint32(26).string(message.trackingBranch);
    }
    if (message.accessToken !== "") {
      writer.uint32(34).string(message.accessToken);
    }
    for (const v of message.branches) {
      writer.uint32(42).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Agent_GitIntegrationSettings_GithubSettings {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAgent_GitIntegrationSettings_GithubSettings();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.displayName = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.repositoryUri = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.trackingBranch = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.accessToken = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.branches.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Agent_GitIntegrationSettings_GithubSettings {
    return {
      displayName: isSet(object.displayName) ? globalThis.String(object.displayName) : "",
      repositoryUri: isSet(object.repositoryUri) ? globalThis.String(object.repositoryUri) : "",
      trackingBranch: isSet(object.trackingBranch) ? globalThis.String(object.trackingBranch) : "",
      accessToken: isSet(object.accessToken) ? globalThis.String(object.accessToken) : "",
      branches: globalThis.Array.isArray(object?.branches) ? object.branches.map((e: any) => globalThis.String(e)) : [],
    };
  },

  toJSON(message: Agent_GitIntegrationSettings_GithubSettings): unknown {
    const obj: any = {};
    if (message.displayName !== "") {
      obj.displayName = message.displayName;
    }
    if (message.repositoryUri !== "") {
      obj.repositoryUri = message.repositoryUri;
    }
    if (message.trackingBranch !== "") {
      obj.trackingBranch = message.trackingBranch;
    }
    if (message.accessToken !== "") {
      obj.accessToken = message.accessToken;
    }
    if (message.branches?.length) {
      obj.branches = message.branches;
    }
    return obj;
  },

  create(base?: DeepPartial<Agent_GitIntegrationSettings_GithubSettings>): Agent_GitIntegrationSettings_GithubSettings {
    return Agent_GitIntegrationSettings_GithubSettings.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<Agent_GitIntegrationSettings_GithubSettings>,
  ): Agent_GitIntegrationSettings_GithubSettings {
    const message = createBaseAgent_GitIntegrationSettings_GithubSettings();
    message.displayName = object.displayName ?? "";
    message.repositoryUri = object.repositoryUri ?? "";
    message.trackingBranch = object.trackingBranch ?? "";
    message.accessToken = object.accessToken ?? "";
    message.branches = object.branches?.map((e) => e) || [];
    return message;
  },
};

function createBaseAgent_GenAppBuilderSettings(): Agent_GenAppBuilderSettings {
  return { engine: "" };
}

export const Agent_GenAppBuilderSettings: MessageFns<Agent_GenAppBuilderSettings> = {
  encode(message: Agent_GenAppBuilderSettings, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.engine !== "") {
      writer.uint32(10).string(message.engine);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Agent_GenAppBuilderSettings {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAgent_GenAppBuilderSettings();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.engine = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Agent_GenAppBuilderSettings {
    return { engine: isSet(object.engine) ? globalThis.String(object.engine) : "" };
  },

  toJSON(message: Agent_GenAppBuilderSettings): unknown {
    const obj: any = {};
    if (message.engine !== "") {
      obj.engine = message.engine;
    }
    return obj;
  },

  create(base?: DeepPartial<Agent_GenAppBuilderSettings>): Agent_GenAppBuilderSettings {
    return Agent_GenAppBuilderSettings.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Agent_GenAppBuilderSettings>): Agent_GenAppBuilderSettings {
    const message = createBaseAgent_GenAppBuilderSettings();
    message.engine = object.engine ?? "";
    return message;
  },
};

function createBaseAgent_AnswerFeedbackSettings(): Agent_AnswerFeedbackSettings {
  return { enableAnswerFeedback: false };
}

export const Agent_AnswerFeedbackSettings: MessageFns<Agent_AnswerFeedbackSettings> = {
  encode(message: Agent_AnswerFeedbackSettings, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.enableAnswerFeedback !== false) {
      writer.uint32(8).bool(message.enableAnswerFeedback);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Agent_AnswerFeedbackSettings {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAgent_AnswerFeedbackSettings();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.enableAnswerFeedback = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Agent_AnswerFeedbackSettings {
    return {
      enableAnswerFeedback: isSet(object.enableAnswerFeedback)
        ? globalThis.Boolean(object.enableAnswerFeedback)
        : false,
    };
  },

  toJSON(message: Agent_AnswerFeedbackSettings): unknown {
    const obj: any = {};
    if (message.enableAnswerFeedback !== false) {
      obj.enableAnswerFeedback = message.enableAnswerFeedback;
    }
    return obj;
  },

  create(base?: DeepPartial<Agent_AnswerFeedbackSettings>): Agent_AnswerFeedbackSettings {
    return Agent_AnswerFeedbackSettings.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Agent_AnswerFeedbackSettings>): Agent_AnswerFeedbackSettings {
    const message = createBaseAgent_AnswerFeedbackSettings();
    message.enableAnswerFeedback = object.enableAnswerFeedback ?? false;
    return message;
  },
};

function createBaseAgent_PersonalizationSettings(): Agent_PersonalizationSettings {
  return { defaultEndUserMetadata: undefined };
}

export const Agent_PersonalizationSettings: MessageFns<Agent_PersonalizationSettings> = {
  encode(message: Agent_PersonalizationSettings, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.defaultEndUserMetadata !== undefined) {
      Struct.encode(Struct.wrap(message.defaultEndUserMetadata), writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Agent_PersonalizationSettings {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAgent_PersonalizationSettings();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.defaultEndUserMetadata = Struct.unwrap(Struct.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Agent_PersonalizationSettings {
    return {
      defaultEndUserMetadata: isObject(object.defaultEndUserMetadata) ? object.defaultEndUserMetadata : undefined,
    };
  },

  toJSON(message: Agent_PersonalizationSettings): unknown {
    const obj: any = {};
    if (message.defaultEndUserMetadata !== undefined) {
      obj.defaultEndUserMetadata = message.defaultEndUserMetadata;
    }
    return obj;
  },

  create(base?: DeepPartial<Agent_PersonalizationSettings>): Agent_PersonalizationSettings {
    return Agent_PersonalizationSettings.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Agent_PersonalizationSettings>): Agent_PersonalizationSettings {
    const message = createBaseAgent_PersonalizationSettings();
    message.defaultEndUserMetadata = object.defaultEndUserMetadata ?? undefined;
    return message;
  },
};

function createBaseListAgentsRequest(): ListAgentsRequest {
  return { parent: "", pageSize: 0, pageToken: "" };
}

export const ListAgentsRequest: MessageFns<ListAgentsRequest> = {
  encode(message: ListAgentsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListAgentsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListAgentsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListAgentsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: ListAgentsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListAgentsRequest>): ListAgentsRequest {
    return ListAgentsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListAgentsRequest>): ListAgentsRequest {
    const message = createBaseListAgentsRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseListAgentsResponse(): ListAgentsResponse {
  return { agents: [], nextPageToken: "" };
}

export const ListAgentsResponse: MessageFns<ListAgentsResponse> = {
  encode(message: ListAgentsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.agents) {
      Agent.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListAgentsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListAgentsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.agents.push(Agent.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListAgentsResponse {
    return {
      agents: globalThis.Array.isArray(object?.agents) ? object.agents.map((e: any) => Agent.fromJSON(e)) : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListAgentsResponse): unknown {
    const obj: any = {};
    if (message.agents?.length) {
      obj.agents = message.agents.map((e) => Agent.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListAgentsResponse>): ListAgentsResponse {
    return ListAgentsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListAgentsResponse>): ListAgentsResponse {
    const message = createBaseListAgentsResponse();
    message.agents = object.agents?.map((e) => Agent.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseGetAgentRequest(): GetAgentRequest {
  return { name: "" };
}

export const GetAgentRequest: MessageFns<GetAgentRequest> = {
  encode(message: GetAgentRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetAgentRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetAgentRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetAgentRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetAgentRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetAgentRequest>): GetAgentRequest {
    return GetAgentRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetAgentRequest>): GetAgentRequest {
    const message = createBaseGetAgentRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseCreateAgentRequest(): CreateAgentRequest {
  return { parent: "", agent: undefined };
}

export const CreateAgentRequest: MessageFns<CreateAgentRequest> = {
  encode(message: CreateAgentRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.agent !== undefined) {
      Agent.encode(message.agent, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateAgentRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateAgentRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.agent = Agent.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateAgentRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      agent: isSet(object.agent) ? Agent.fromJSON(object.agent) : undefined,
    };
  },

  toJSON(message: CreateAgentRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.agent !== undefined) {
      obj.agent = Agent.toJSON(message.agent);
    }
    return obj;
  },

  create(base?: DeepPartial<CreateAgentRequest>): CreateAgentRequest {
    return CreateAgentRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateAgentRequest>): CreateAgentRequest {
    const message = createBaseCreateAgentRequest();
    message.parent = object.parent ?? "";
    message.agent = (object.agent !== undefined && object.agent !== null) ? Agent.fromPartial(object.agent) : undefined;
    return message;
  },
};

function createBaseUpdateAgentRequest(): UpdateAgentRequest {
  return { agent: undefined, updateMask: undefined };
}

export const UpdateAgentRequest: MessageFns<UpdateAgentRequest> = {
  encode(message: UpdateAgentRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.agent !== undefined) {
      Agent.encode(message.agent, writer.uint32(10).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateAgentRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateAgentRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.agent = Agent.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateAgentRequest {
    return {
      agent: isSet(object.agent) ? Agent.fromJSON(object.agent) : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
    };
  },

  toJSON(message: UpdateAgentRequest): unknown {
    const obj: any = {};
    if (message.agent !== undefined) {
      obj.agent = Agent.toJSON(message.agent);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateAgentRequest>): UpdateAgentRequest {
    return UpdateAgentRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateAgentRequest>): UpdateAgentRequest {
    const message = createBaseUpdateAgentRequest();
    message.agent = (object.agent !== undefined && object.agent !== null) ? Agent.fromPartial(object.agent) : undefined;
    message.updateMask = object.updateMask ?? undefined;
    return message;
  },
};

function createBaseDeleteAgentRequest(): DeleteAgentRequest {
  return { name: "" };
}

export const DeleteAgentRequest: MessageFns<DeleteAgentRequest> = {
  encode(message: DeleteAgentRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteAgentRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteAgentRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteAgentRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: DeleteAgentRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteAgentRequest>): DeleteAgentRequest {
    return DeleteAgentRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteAgentRequest>): DeleteAgentRequest {
    const message = createBaseDeleteAgentRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseExportAgentRequest(): ExportAgentRequest {
  return {
    name: "",
    agentUri: "",
    dataFormat: 0,
    environment: "",
    gitDestination: undefined,
    includeBigqueryExportSettings: false,
  };
}

export const ExportAgentRequest: MessageFns<ExportAgentRequest> = {
  encode(message: ExportAgentRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.agentUri !== "") {
      writer.uint32(18).string(message.agentUri);
    }
    if (message.dataFormat !== 0) {
      writer.uint32(24).int32(message.dataFormat);
    }
    if (message.environment !== "") {
      writer.uint32(42).string(message.environment);
    }
    if (message.gitDestination !== undefined) {
      ExportAgentRequest_GitDestination.encode(message.gitDestination, writer.uint32(50).fork()).join();
    }
    if (message.includeBigqueryExportSettings !== false) {
      writer.uint32(56).bool(message.includeBigqueryExportSettings);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ExportAgentRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseExportAgentRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.agentUri = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.dataFormat = reader.int32() as any;
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.environment = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.gitDestination = ExportAgentRequest_GitDestination.decode(reader, reader.uint32());
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }

          message.includeBigqueryExportSettings = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ExportAgentRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      agentUri: isSet(object.agentUri) ? globalThis.String(object.agentUri) : "",
      dataFormat: isSet(object.dataFormat) ? exportAgentRequest_DataFormatFromJSON(object.dataFormat) : 0,
      environment: isSet(object.environment) ? globalThis.String(object.environment) : "",
      gitDestination: isSet(object.gitDestination)
        ? ExportAgentRequest_GitDestination.fromJSON(object.gitDestination)
        : undefined,
      includeBigqueryExportSettings: isSet(object.includeBigqueryExportSettings)
        ? globalThis.Boolean(object.includeBigqueryExportSettings)
        : false,
    };
  },

  toJSON(message: ExportAgentRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.agentUri !== "") {
      obj.agentUri = message.agentUri;
    }
    if (message.dataFormat !== 0) {
      obj.dataFormat = exportAgentRequest_DataFormatToJSON(message.dataFormat);
    }
    if (message.environment !== "") {
      obj.environment = message.environment;
    }
    if (message.gitDestination !== undefined) {
      obj.gitDestination = ExportAgentRequest_GitDestination.toJSON(message.gitDestination);
    }
    if (message.includeBigqueryExportSettings !== false) {
      obj.includeBigqueryExportSettings = message.includeBigqueryExportSettings;
    }
    return obj;
  },

  create(base?: DeepPartial<ExportAgentRequest>): ExportAgentRequest {
    return ExportAgentRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ExportAgentRequest>): ExportAgentRequest {
    const message = createBaseExportAgentRequest();
    message.name = object.name ?? "";
    message.agentUri = object.agentUri ?? "";
    message.dataFormat = object.dataFormat ?? 0;
    message.environment = object.environment ?? "";
    message.gitDestination = (object.gitDestination !== undefined && object.gitDestination !== null)
      ? ExportAgentRequest_GitDestination.fromPartial(object.gitDestination)
      : undefined;
    message.includeBigqueryExportSettings = object.includeBigqueryExportSettings ?? false;
    return message;
  },
};

function createBaseExportAgentRequest_GitDestination(): ExportAgentRequest_GitDestination {
  return { trackingBranch: "", commitMessage: "" };
}

export const ExportAgentRequest_GitDestination: MessageFns<ExportAgentRequest_GitDestination> = {
  encode(message: ExportAgentRequest_GitDestination, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.trackingBranch !== "") {
      writer.uint32(10).string(message.trackingBranch);
    }
    if (message.commitMessage !== "") {
      writer.uint32(18).string(message.commitMessage);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ExportAgentRequest_GitDestination {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseExportAgentRequest_GitDestination();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.trackingBranch = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.commitMessage = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ExportAgentRequest_GitDestination {
    return {
      trackingBranch: isSet(object.trackingBranch) ? globalThis.String(object.trackingBranch) : "",
      commitMessage: isSet(object.commitMessage) ? globalThis.String(object.commitMessage) : "",
    };
  },

  toJSON(message: ExportAgentRequest_GitDestination): unknown {
    const obj: any = {};
    if (message.trackingBranch !== "") {
      obj.trackingBranch = message.trackingBranch;
    }
    if (message.commitMessage !== "") {
      obj.commitMessage = message.commitMessage;
    }
    return obj;
  },

  create(base?: DeepPartial<ExportAgentRequest_GitDestination>): ExportAgentRequest_GitDestination {
    return ExportAgentRequest_GitDestination.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ExportAgentRequest_GitDestination>): ExportAgentRequest_GitDestination {
    const message = createBaseExportAgentRequest_GitDestination();
    message.trackingBranch = object.trackingBranch ?? "";
    message.commitMessage = object.commitMessage ?? "";
    return message;
  },
};

function createBaseExportAgentResponse(): ExportAgentResponse {
  return { agentUri: undefined, agentContent: undefined, commitSha: undefined };
}

export const ExportAgentResponse: MessageFns<ExportAgentResponse> = {
  encode(message: ExportAgentResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.agentUri !== undefined) {
      writer.uint32(10).string(message.agentUri);
    }
    if (message.agentContent !== undefined) {
      writer.uint32(18).bytes(message.agentContent);
    }
    if (message.commitSha !== undefined) {
      writer.uint32(26).string(message.commitSha);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ExportAgentResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseExportAgentResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.agentUri = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.agentContent = Buffer.from(reader.bytes());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.commitSha = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ExportAgentResponse {
    return {
      agentUri: isSet(object.agentUri) ? globalThis.String(object.agentUri) : undefined,
      agentContent: isSet(object.agentContent) ? Buffer.from(bytesFromBase64(object.agentContent)) : undefined,
      commitSha: isSet(object.commitSha) ? globalThis.String(object.commitSha) : undefined,
    };
  },

  toJSON(message: ExportAgentResponse): unknown {
    const obj: any = {};
    if (message.agentUri !== undefined) {
      obj.agentUri = message.agentUri;
    }
    if (message.agentContent !== undefined) {
      obj.agentContent = base64FromBytes(message.agentContent);
    }
    if (message.commitSha !== undefined) {
      obj.commitSha = message.commitSha;
    }
    return obj;
  },

  create(base?: DeepPartial<ExportAgentResponse>): ExportAgentResponse {
    return ExportAgentResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ExportAgentResponse>): ExportAgentResponse {
    const message = createBaseExportAgentResponse();
    message.agentUri = object.agentUri ?? undefined;
    message.agentContent = object.agentContent ?? undefined;
    message.commitSha = object.commitSha ?? undefined;
    return message;
  },
};

function createBaseRestoreAgentRequest(): RestoreAgentRequest {
  return { name: "", agentUri: undefined, agentContent: undefined, gitSource: undefined, restoreOption: 0 };
}

export const RestoreAgentRequest: MessageFns<RestoreAgentRequest> = {
  encode(message: RestoreAgentRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.agentUri !== undefined) {
      writer.uint32(18).string(message.agentUri);
    }
    if (message.agentContent !== undefined) {
      writer.uint32(26).bytes(message.agentContent);
    }
    if (message.gitSource !== undefined) {
      RestoreAgentRequest_GitSource.encode(message.gitSource, writer.uint32(50).fork()).join();
    }
    if (message.restoreOption !== 0) {
      writer.uint32(40).int32(message.restoreOption);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RestoreAgentRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRestoreAgentRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.agentUri = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.agentContent = Buffer.from(reader.bytes());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.gitSource = RestoreAgentRequest_GitSource.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.restoreOption = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RestoreAgentRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      agentUri: isSet(object.agentUri) ? globalThis.String(object.agentUri) : undefined,
      agentContent: isSet(object.agentContent) ? Buffer.from(bytesFromBase64(object.agentContent)) : undefined,
      gitSource: isSet(object.gitSource) ? RestoreAgentRequest_GitSource.fromJSON(object.gitSource) : undefined,
      restoreOption: isSet(object.restoreOption) ? restoreAgentRequest_RestoreOptionFromJSON(object.restoreOption) : 0,
    };
  },

  toJSON(message: RestoreAgentRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.agentUri !== undefined) {
      obj.agentUri = message.agentUri;
    }
    if (message.agentContent !== undefined) {
      obj.agentContent = base64FromBytes(message.agentContent);
    }
    if (message.gitSource !== undefined) {
      obj.gitSource = RestoreAgentRequest_GitSource.toJSON(message.gitSource);
    }
    if (message.restoreOption !== 0) {
      obj.restoreOption = restoreAgentRequest_RestoreOptionToJSON(message.restoreOption);
    }
    return obj;
  },

  create(base?: DeepPartial<RestoreAgentRequest>): RestoreAgentRequest {
    return RestoreAgentRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RestoreAgentRequest>): RestoreAgentRequest {
    const message = createBaseRestoreAgentRequest();
    message.name = object.name ?? "";
    message.agentUri = object.agentUri ?? undefined;
    message.agentContent = object.agentContent ?? undefined;
    message.gitSource = (object.gitSource !== undefined && object.gitSource !== null)
      ? RestoreAgentRequest_GitSource.fromPartial(object.gitSource)
      : undefined;
    message.restoreOption = object.restoreOption ?? 0;
    return message;
  },
};

function createBaseRestoreAgentRequest_GitSource(): RestoreAgentRequest_GitSource {
  return { trackingBranch: "" };
}

export const RestoreAgentRequest_GitSource: MessageFns<RestoreAgentRequest_GitSource> = {
  encode(message: RestoreAgentRequest_GitSource, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.trackingBranch !== "") {
      writer.uint32(10).string(message.trackingBranch);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RestoreAgentRequest_GitSource {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRestoreAgentRequest_GitSource();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.trackingBranch = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RestoreAgentRequest_GitSource {
    return { trackingBranch: isSet(object.trackingBranch) ? globalThis.String(object.trackingBranch) : "" };
  },

  toJSON(message: RestoreAgentRequest_GitSource): unknown {
    const obj: any = {};
    if (message.trackingBranch !== "") {
      obj.trackingBranch = message.trackingBranch;
    }
    return obj;
  },

  create(base?: DeepPartial<RestoreAgentRequest_GitSource>): RestoreAgentRequest_GitSource {
    return RestoreAgentRequest_GitSource.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RestoreAgentRequest_GitSource>): RestoreAgentRequest_GitSource {
    const message = createBaseRestoreAgentRequest_GitSource();
    message.trackingBranch = object.trackingBranch ?? "";
    return message;
  },
};

function createBaseValidateAgentRequest(): ValidateAgentRequest {
  return { name: "", languageCode: "" };
}

export const ValidateAgentRequest: MessageFns<ValidateAgentRequest> = {
  encode(message: ValidateAgentRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.languageCode !== "") {
      writer.uint32(18).string(message.languageCode);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ValidateAgentRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseValidateAgentRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.languageCode = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ValidateAgentRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      languageCode: isSet(object.languageCode) ? globalThis.String(object.languageCode) : "",
    };
  },

  toJSON(message: ValidateAgentRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.languageCode !== "") {
      obj.languageCode = message.languageCode;
    }
    return obj;
  },

  create(base?: DeepPartial<ValidateAgentRequest>): ValidateAgentRequest {
    return ValidateAgentRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ValidateAgentRequest>): ValidateAgentRequest {
    const message = createBaseValidateAgentRequest();
    message.name = object.name ?? "";
    message.languageCode = object.languageCode ?? "";
    return message;
  },
};

function createBaseGetAgentValidationResultRequest(): GetAgentValidationResultRequest {
  return { name: "", languageCode: "" };
}

export const GetAgentValidationResultRequest: MessageFns<GetAgentValidationResultRequest> = {
  encode(message: GetAgentValidationResultRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.languageCode !== "") {
      writer.uint32(18).string(message.languageCode);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetAgentValidationResultRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetAgentValidationResultRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.languageCode = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetAgentValidationResultRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      languageCode: isSet(object.languageCode) ? globalThis.String(object.languageCode) : "",
    };
  },

  toJSON(message: GetAgentValidationResultRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.languageCode !== "") {
      obj.languageCode = message.languageCode;
    }
    return obj;
  },

  create(base?: DeepPartial<GetAgentValidationResultRequest>): GetAgentValidationResultRequest {
    return GetAgentValidationResultRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetAgentValidationResultRequest>): GetAgentValidationResultRequest {
    const message = createBaseGetAgentValidationResultRequest();
    message.name = object.name ?? "";
    message.languageCode = object.languageCode ?? "";
    return message;
  },
};

function createBaseAgentValidationResult(): AgentValidationResult {
  return { name: "", flowValidationResults: [] };
}

export const AgentValidationResult: MessageFns<AgentValidationResult> = {
  encode(message: AgentValidationResult, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    for (const v of message.flowValidationResults) {
      FlowValidationResult.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AgentValidationResult {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAgentValidationResult();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.flowValidationResults.push(FlowValidationResult.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AgentValidationResult {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      flowValidationResults: globalThis.Array.isArray(object?.flowValidationResults)
        ? object.flowValidationResults.map((e: any) => FlowValidationResult.fromJSON(e))
        : [],
    };
  },

  toJSON(message: AgentValidationResult): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.flowValidationResults?.length) {
      obj.flowValidationResults = message.flowValidationResults.map((e) => FlowValidationResult.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<AgentValidationResult>): AgentValidationResult {
    return AgentValidationResult.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AgentValidationResult>): AgentValidationResult {
    const message = createBaseAgentValidationResult();
    message.name = object.name ?? "";
    message.flowValidationResults = object.flowValidationResults?.map((e) => FlowValidationResult.fromPartial(e)) || [];
    return message;
  },
};

function createBaseGetGenerativeSettingsRequest(): GetGenerativeSettingsRequest {
  return { name: "", languageCode: "" };
}

export const GetGenerativeSettingsRequest: MessageFns<GetGenerativeSettingsRequest> = {
  encode(message: GetGenerativeSettingsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.languageCode !== "") {
      writer.uint32(18).string(message.languageCode);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetGenerativeSettingsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetGenerativeSettingsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.languageCode = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetGenerativeSettingsRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      languageCode: isSet(object.languageCode) ? globalThis.String(object.languageCode) : "",
    };
  },

  toJSON(message: GetGenerativeSettingsRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.languageCode !== "") {
      obj.languageCode = message.languageCode;
    }
    return obj;
  },

  create(base?: DeepPartial<GetGenerativeSettingsRequest>): GetGenerativeSettingsRequest {
    return GetGenerativeSettingsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetGenerativeSettingsRequest>): GetGenerativeSettingsRequest {
    const message = createBaseGetGenerativeSettingsRequest();
    message.name = object.name ?? "";
    message.languageCode = object.languageCode ?? "";
    return message;
  },
};

function createBaseUpdateGenerativeSettingsRequest(): UpdateGenerativeSettingsRequest {
  return { generativeSettings: undefined, updateMask: undefined };
}

export const UpdateGenerativeSettingsRequest: MessageFns<UpdateGenerativeSettingsRequest> = {
  encode(message: UpdateGenerativeSettingsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.generativeSettings !== undefined) {
      GenerativeSettings.encode(message.generativeSettings, writer.uint32(10).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateGenerativeSettingsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateGenerativeSettingsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.generativeSettings = GenerativeSettings.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateGenerativeSettingsRequest {
    return {
      generativeSettings: isSet(object.generativeSettings)
        ? GenerativeSettings.fromJSON(object.generativeSettings)
        : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
    };
  },

  toJSON(message: UpdateGenerativeSettingsRequest): unknown {
    const obj: any = {};
    if (message.generativeSettings !== undefined) {
      obj.generativeSettings = GenerativeSettings.toJSON(message.generativeSettings);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateGenerativeSettingsRequest>): UpdateGenerativeSettingsRequest {
    return UpdateGenerativeSettingsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateGenerativeSettingsRequest>): UpdateGenerativeSettingsRequest {
    const message = createBaseUpdateGenerativeSettingsRequest();
    message.generativeSettings = (object.generativeSettings !== undefined && object.generativeSettings !== null)
      ? GenerativeSettings.fromPartial(object.generativeSettings)
      : undefined;
    message.updateMask = object.updateMask ?? undefined;
    return message;
  },
};

/** Service for managing [Agents][google.cloud.dialogflow.cx.v3.Agent]. */
export type AgentsDefinition = typeof AgentsDefinition;
export const AgentsDefinition = {
  name: "Agents",
  fullName: "google.cloud.dialogflow.cx.v3.Agents",
  methods: {
    /** Returns the list of all agents in the specified location. */
    listAgents: {
      name: "ListAgents",
      requestType: ListAgentsRequest,
      requestStream: false,
      responseType: ListAgentsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              44,
              18,
              42,
              47,
              118,
              51,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              97,
              103,
              101,
              110,
              116,
              115,
            ]),
          ],
        },
      },
    },
    /** Retrieves the specified agent. */
    getAgent: {
      name: "GetAgent",
      requestType: GetAgentRequest,
      requestStream: false,
      responseType: Agent,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              44,
              18,
              42,
              47,
              118,
              51,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              103,
              101,
              110,
              116,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Creates an agent in the specified location.
     *
     * Note: You should always train flows prior to sending them queries. See the
     * [training
     * documentation](https://cloud.google.com/dialogflow/cx/docs/concept/training).
     */
    createAgent: {
      name: "CreateAgent",
      requestType: CreateAgentRequest,
      requestStream: false,
      responseType: Agent,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([12, 112, 97, 114, 101, 110, 116, 44, 97, 103, 101, 110, 116])],
          578365826: [
            Buffer.from([
              51,
              58,
              5,
              97,
              103,
              101,
              110,
              116,
              34,
              42,
              47,
              118,
              51,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              97,
              103,
              101,
              110,
              116,
              115,
            ]),
          ],
        },
      },
    },
    /**
     * Updates the specified agent.
     *
     * Note: You should always train flows prior to sending them queries. See the
     * [training
     * documentation](https://cloud.google.com/dialogflow/cx/docs/concept/training).
     */
    updateAgent: {
      name: "UpdateAgent",
      requestType: UpdateAgentRequest,
      requestStream: false,
      responseType: Agent,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([17, 97, 103, 101, 110, 116, 44, 117, 112, 100, 97, 116, 101, 95, 109, 97, 115, 107])],
          578365826: [
            Buffer.from([
              57,
              58,
              5,
              97,
              103,
              101,
              110,
              116,
              50,
              48,
              47,
              118,
              51,
              47,
              123,
              97,
              103,
              101,
              110,
              116,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              103,
              101,
              110,
              116,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Deletes the specified agent. */
    deleteAgent: {
      name: "DeleteAgent",
      requestType: DeleteAgentRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              44,
              42,
              42,
              47,
              118,
              51,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              103,
              101,
              110,
              116,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Exports the specified agent to a binary file.
     *
     * This method is a [long-running
     * operation](https://cloud.google.com/dialogflow/cx/docs/how/long-running-operation).
     * The returned `Operation` type has the following method-specific fields:
     *
     * - `metadata`: An empty [Struct
     *   message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#struct)
     * - `response`:
     * [ExportAgentResponse][google.cloud.dialogflow.cx.v3.ExportAgentResponse]
     */
    exportAgent: {
      name: "ExportAgent",
      requestType: ExportAgentRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              45,
              10,
              19,
              69,
              120,
              112,
              111,
              114,
              116,
              65,
              103,
              101,
              110,
              116,
              82,
              101,
              115,
              112,
              111,
              110,
              115,
              101,
              18,
              22,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              112,
              114,
              111,
              116,
              111,
              98,
              117,
              102,
              46,
              83,
              116,
              114,
              117,
              99,
              116,
            ]),
          ],
          578365826: [
            Buffer.from([
              54,
              58,
              1,
              42,
              34,
              49,
              47,
              118,
              51,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              103,
              101,
              110,
              116,
              115,
              47,
              42,
              125,
              58,
              101,
              120,
              112,
              111,
              114,
              116,
            ]),
          ],
        },
      },
    },
    /**
     * Restores the specified agent from a binary file.
     *
     * Replaces the current agent with a new one. Note that all existing resources
     * in agent (e.g. intents, entity types, flows) will be removed.
     *
     * This method is a [long-running
     * operation](https://cloud.google.com/dialogflow/cx/docs/how/long-running-operation).
     * The returned `Operation` type has the following method-specific fields:
     *
     * - `metadata`: An empty [Struct
     *   message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#struct)
     * - `response`: An [Empty
     *   message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#empty)
     *
     * Note: You should always train flows prior to sending them queries. See the
     * [training
     * documentation](https://cloud.google.com/dialogflow/cx/docs/concept/training).
     */
    restoreAgent: {
      name: "RestoreAgent",
      requestType: RestoreAgentRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              47,
              10,
              21,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              112,
              114,
              111,
              116,
              111,
              98,
              117,
              102,
              46,
              69,
              109,
              112,
              116,
              121,
              18,
              22,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              112,
              114,
              111,
              116,
              111,
              98,
              117,
              102,
              46,
              83,
              116,
              114,
              117,
              99,
              116,
            ]),
          ],
          578365826: [
            Buffer.from([
              55,
              58,
              1,
              42,
              34,
              50,
              47,
              118,
              51,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              103,
              101,
              110,
              116,
              115,
              47,
              42,
              125,
              58,
              114,
              101,
              115,
              116,
              111,
              114,
              101,
            ]),
          ],
        },
      },
    },
    /**
     * Validates the specified agent and creates or updates validation results.
     * The agent in draft version is validated. Please call this API after the
     * training is completed to get the complete validation results.
     */
    validateAgent: {
      name: "ValidateAgent",
      requestType: ValidateAgentRequest,
      requestStream: false,
      responseType: AgentValidationResult,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              56,
              58,
              1,
              42,
              34,
              51,
              47,
              118,
              51,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              103,
              101,
              110,
              116,
              115,
              47,
              42,
              125,
              58,
              118,
              97,
              108,
              105,
              100,
              97,
              116,
              101,
            ]),
          ],
        },
      },
    },
    /**
     * Gets the latest agent validation result. Agent validation is performed
     * when ValidateAgent is called.
     */
    getAgentValidationResult: {
      name: "GetAgentValidationResult",
      requestType: GetAgentValidationResultRequest,
      requestStream: false,
      responseType: AgentValidationResult,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              61,
              18,
              59,
              47,
              118,
              51,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              103,
              101,
              110,
              116,
              115,
              47,
              42,
              47,
              118,
              97,
              108,
              105,
              100,
              97,
              116,
              105,
              111,
              110,
              82,
              101,
              115,
              117,
              108,
              116,
              125,
            ]),
          ],
        },
      },
    },
    /** Gets the generative settings for the agent. */
    getGenerativeSettings: {
      name: "GetGenerativeSettings",
      requestType: GetGenerativeSettingsRequest,
      requestStream: false,
      responseType: GenerativeSettings,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([18, 110, 97, 109, 101, 44, 108, 97, 110, 103, 117, 97, 103, 101, 95, 99, 111, 100, 101])],
          578365826: [
            Buffer.from([
              63,
              18,
              61,
              47,
              118,
              51,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              103,
              101,
              110,
              116,
              115,
              47,
              42,
              47,
              103,
              101,
              110,
              101,
              114,
              97,
              116,
              105,
              118,
              101,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              125,
            ]),
          ],
        },
      },
    },
    /** Updates the generative settings for the agent. */
    updateGenerativeSettings: {
      name: "UpdateGenerativeSettings",
      requestType: UpdateGenerativeSettingsRequest,
      requestStream: false,
      responseType: GenerativeSettings,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              31,
              103,
              101,
              110,
              101,
              114,
              97,
              116,
              105,
              118,
              101,
              95,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              44,
              117,
              112,
              100,
              97,
              116,
              101,
              95,
              109,
              97,
              115,
              107,
            ]),
          ],
          578365826: [
            Buffer.from([
              104,
              58,
              19,
              103,
              101,
              110,
              101,
              114,
              97,
              116,
              105,
              118,
              101,
              95,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              50,
              81,
              47,
              118,
              51,
              47,
              123,
              103,
              101,
              110,
              101,
              114,
              97,
              116,
              105,
              118,
              101,
              95,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              103,
              101,
              110,
              116,
              115,
              47,
              42,
              47,
              103,
              101,
              110,
              101,
              114,
              97,
              116,
              105,
              118,
              101,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              125,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface AgentsServiceImplementation<CallContextExt = {}> {
  /** Returns the list of all agents in the specified location. */
  listAgents(
    request: ListAgentsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListAgentsResponse>>;
  /** Retrieves the specified agent. */
  getAgent(request: GetAgentRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Agent>>;
  /**
   * Creates an agent in the specified location.
   *
   * Note: You should always train flows prior to sending them queries. See the
   * [training
   * documentation](https://cloud.google.com/dialogflow/cx/docs/concept/training).
   */
  createAgent(request: CreateAgentRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Agent>>;
  /**
   * Updates the specified agent.
   *
   * Note: You should always train flows prior to sending them queries. See the
   * [training
   * documentation](https://cloud.google.com/dialogflow/cx/docs/concept/training).
   */
  updateAgent(request: UpdateAgentRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Agent>>;
  /** Deletes the specified agent. */
  deleteAgent(request: DeleteAgentRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Empty>>;
  /**
   * Exports the specified agent to a binary file.
   *
   * This method is a [long-running
   * operation](https://cloud.google.com/dialogflow/cx/docs/how/long-running-operation).
   * The returned `Operation` type has the following method-specific fields:
   *
   * - `metadata`: An empty [Struct
   *   message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#struct)
   * - `response`:
   * [ExportAgentResponse][google.cloud.dialogflow.cx.v3.ExportAgentResponse]
   */
  exportAgent(request: ExportAgentRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Operation>>;
  /**
   * Restores the specified agent from a binary file.
   *
   * Replaces the current agent with a new one. Note that all existing resources
   * in agent (e.g. intents, entity types, flows) will be removed.
   *
   * This method is a [long-running
   * operation](https://cloud.google.com/dialogflow/cx/docs/how/long-running-operation).
   * The returned `Operation` type has the following method-specific fields:
   *
   * - `metadata`: An empty [Struct
   *   message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#struct)
   * - `response`: An [Empty
   *   message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#empty)
   *
   * Note: You should always train flows prior to sending them queries. See the
   * [training
   * documentation](https://cloud.google.com/dialogflow/cx/docs/concept/training).
   */
  restoreAgent(request: RestoreAgentRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Operation>>;
  /**
   * Validates the specified agent and creates or updates validation results.
   * The agent in draft version is validated. Please call this API after the
   * training is completed to get the complete validation results.
   */
  validateAgent(
    request: ValidateAgentRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<AgentValidationResult>>;
  /**
   * Gets the latest agent validation result. Agent validation is performed
   * when ValidateAgent is called.
   */
  getAgentValidationResult(
    request: GetAgentValidationResultRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<AgentValidationResult>>;
  /** Gets the generative settings for the agent. */
  getGenerativeSettings(
    request: GetGenerativeSettingsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<GenerativeSettings>>;
  /** Updates the generative settings for the agent. */
  updateGenerativeSettings(
    request: UpdateGenerativeSettingsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<GenerativeSettings>>;
}

export interface AgentsClient<CallOptionsExt = {}> {
  /** Returns the list of all agents in the specified location. */
  listAgents(
    request: DeepPartial<ListAgentsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListAgentsResponse>;
  /** Retrieves the specified agent. */
  getAgent(request: DeepPartial<GetAgentRequest>, options?: CallOptions & CallOptionsExt): Promise<Agent>;
  /**
   * Creates an agent in the specified location.
   *
   * Note: You should always train flows prior to sending them queries. See the
   * [training
   * documentation](https://cloud.google.com/dialogflow/cx/docs/concept/training).
   */
  createAgent(request: DeepPartial<CreateAgentRequest>, options?: CallOptions & CallOptionsExt): Promise<Agent>;
  /**
   * Updates the specified agent.
   *
   * Note: You should always train flows prior to sending them queries. See the
   * [training
   * documentation](https://cloud.google.com/dialogflow/cx/docs/concept/training).
   */
  updateAgent(request: DeepPartial<UpdateAgentRequest>, options?: CallOptions & CallOptionsExt): Promise<Agent>;
  /** Deletes the specified agent. */
  deleteAgent(request: DeepPartial<DeleteAgentRequest>, options?: CallOptions & CallOptionsExt): Promise<Empty>;
  /**
   * Exports the specified agent to a binary file.
   *
   * This method is a [long-running
   * operation](https://cloud.google.com/dialogflow/cx/docs/how/long-running-operation).
   * The returned `Operation` type has the following method-specific fields:
   *
   * - `metadata`: An empty [Struct
   *   message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#struct)
   * - `response`:
   * [ExportAgentResponse][google.cloud.dialogflow.cx.v3.ExportAgentResponse]
   */
  exportAgent(request: DeepPartial<ExportAgentRequest>, options?: CallOptions & CallOptionsExt): Promise<Operation>;
  /**
   * Restores the specified agent from a binary file.
   *
   * Replaces the current agent with a new one. Note that all existing resources
   * in agent (e.g. intents, entity types, flows) will be removed.
   *
   * This method is a [long-running
   * operation](https://cloud.google.com/dialogflow/cx/docs/how/long-running-operation).
   * The returned `Operation` type has the following method-specific fields:
   *
   * - `metadata`: An empty [Struct
   *   message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#struct)
   * - `response`: An [Empty
   *   message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#empty)
   *
   * Note: You should always train flows prior to sending them queries. See the
   * [training
   * documentation](https://cloud.google.com/dialogflow/cx/docs/concept/training).
   */
  restoreAgent(request: DeepPartial<RestoreAgentRequest>, options?: CallOptions & CallOptionsExt): Promise<Operation>;
  /**
   * Validates the specified agent and creates or updates validation results.
   * The agent in draft version is validated. Please call this API after the
   * training is completed to get the complete validation results.
   */
  validateAgent(
    request: DeepPartial<ValidateAgentRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<AgentValidationResult>;
  /**
   * Gets the latest agent validation result. Agent validation is performed
   * when ValidateAgent is called.
   */
  getAgentValidationResult(
    request: DeepPartial<GetAgentValidationResultRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<AgentValidationResult>;
  /** Gets the generative settings for the agent. */
  getGenerativeSettings(
    request: DeepPartial<GetGenerativeSettingsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<GenerativeSettings>;
  /** Updates the generative settings for the agent. */
  updateGenerativeSettings(
    request: DeepPartial<UpdateGenerativeSettingsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<GenerativeSettings>;
}

function bytesFromBase64(b64: string): Uint8Array {
  return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
}

function base64FromBytes(arr: Uint8Array): string {
  return globalThis.Buffer.from(arr).toString("base64");
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
