// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/dialogflow/cx/v3beta1/transition_route_group.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { Empty } from "../../../../protobuf/empty.js";
import { FieldMask } from "../../../../protobuf/field_mask.js";
import { TransitionRoute } from "./page.js";

export const protobufPackage = "google.cloud.dialogflow.cx.v3beta1";

/**
 * A TransitionRouteGroup represents a group of
 * [`TransitionRoutes`][google.cloud.dialogflow.cx.v3beta1.TransitionRoute] to
 * be used by a [Page][google.cloud.dialogflow.cx.v3beta1.Page].
 */
export interface TransitionRouteGroup {
  /**
   * The unique identifier of the transition route group.
   * [TransitionRouteGroups.CreateTransitionRouteGroup][google.cloud.dialogflow.cx.v3beta1.TransitionRouteGroups.CreateTransitionRouteGroup]
   * populates the name automatically. Format: `projects/<Project
   * ID>/locations/<Location ID>/agents/<Agent ID>/flows/<Flow
   * ID>/transitionRouteGroups/<Transition Route Group ID>` or
   * `projects/<Project ID>/locations/<Location ID>/agents/<Agent
   * ID>/transitionRouteGroups/<TransitionRouteGroup ID>` for agent-level
   * groups.
   */
  name: string;
  /**
   * Required. The human-readable name of the transition route group, unique
   * within the flow. The display name can be no longer than 30 characters.
   */
  displayName: string;
  /**
   * Transition routes associated with the
   * [TransitionRouteGroup][google.cloud.dialogflow.cx.v3beta1.TransitionRouteGroup].
   */
  transitionRoutes: TransitionRoute[];
}

/**
 * The request message for
 * [TransitionRouteGroups.ListTransitionRouteGroups][google.cloud.dialogflow.cx.v3beta1.TransitionRouteGroups.ListTransitionRouteGroups].
 */
export interface ListTransitionRouteGroupsRequest {
  /**
   * Required. The flow to list all transition route groups for.
   * Format: `projects/<Project ID>/locations/<Location ID>/agents/<Agent
   * ID>/flows/<Flow ID>`
   * or `projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>.
   */
  parent: string;
  /**
   * The maximum number of items to return in a single page. By default 100 and
   * at most 1000.
   */
  pageSize: number;
  /** The next_page_token value returned from a previous list request. */
  pageToken: string;
  /**
   * The language to list transition route groups for. The following fields are
   * language dependent:
   *
   * *  `TransitionRouteGroup.transition_routes.trigger_fulfillment.messages`
   * *
   * `TransitionRouteGroup.transition_routes.trigger_fulfillment.conditional_cases`
   *
   * If not specified, the agent's default language is used.
   * [Many
   * languages](https://cloud.google.com/dialogflow/cx/docs/reference/language)
   * are supported.
   * Note: languages must be enabled in the agent before they can be used.
   */
  languageCode: string;
}

/**
 * The response message for
 * [TransitionRouteGroups.ListTransitionRouteGroups][google.cloud.dialogflow.cx.v3beta1.TransitionRouteGroups.ListTransitionRouteGroups].
 */
export interface ListTransitionRouteGroupsResponse {
  /**
   * The list of transition route groups. There will be a maximum number of
   * items returned based on the page_size field in the request. The list may in
   * some cases be empty or contain fewer entries than page_size even if this
   * isn't the last page.
   */
  transitionRouteGroups: TransitionRouteGroup[];
  /**
   * Token to retrieve the next page of results, or empty if there are no more
   * results in the list.
   */
  nextPageToken: string;
}

/**
 * The request message for
 * [TransitionRouteGroups.GetTransitionRouteGroup][google.cloud.dialogflow.cx.v3beta1.TransitionRouteGroups.GetTransitionRouteGroup].
 */
export interface GetTransitionRouteGroupRequest {
  /**
   * Required. The name of the
   * [TransitionRouteGroup][google.cloud.dialogflow.cx.v3beta1.TransitionRouteGroup].
   * Format: `projects/<Project ID>/locations/<Location ID>/agents/<Agent
   * ID>/flows/<Flow ID>/transitionRouteGroups/<Transition Route Group ID>`
   * or `projects/<Project ID>/locations/<Location ID>/agents/<Agent
   * ID>/transitionRouteGroups/<Transition Route Group ID>`.
   */
  name: string;
  /**
   * The language to retrieve the transition route group for. The following
   * fields are language dependent:
   *
   * *  `TransitionRouteGroup.transition_routes.trigger_fulfillment.messages`
   * *
   * `TransitionRouteGroup.transition_routes.trigger_fulfillment.conditional_cases`
   *
   * If not specified, the agent's default language is used.
   * [Many
   * languages](https://cloud.google.com/dialogflow/cx/docs/reference/language)
   * are supported.
   * Note: languages must be enabled in the agent before they can be used.
   */
  languageCode: string;
}

/**
 * The request message for
 * [TransitionRouteGroups.CreateTransitionRouteGroup][google.cloud.dialogflow.cx.v3beta1.TransitionRouteGroups.CreateTransitionRouteGroup].
 */
export interface CreateTransitionRouteGroupRequest {
  /**
   * Required. The flow to create an
   * [TransitionRouteGroup][google.cloud.dialogflow.cx.v3beta1.TransitionRouteGroup]
   * for. Format: `projects/<Project ID>/locations/<Location ID>/agents/<Agent
   * ID>/flows/<Flow ID>`
   * or `projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>`
   * for agent-level groups.
   */
  parent: string;
  /** Required. The transition route group to create. */
  transitionRouteGroup:
    | TransitionRouteGroup
    | undefined;
  /**
   * The language of the following fields in `TransitionRouteGroup`:
   *
   * *  `TransitionRouteGroup.transition_routes.trigger_fulfillment.messages`
   * *
   * `TransitionRouteGroup.transition_routes.trigger_fulfillment.conditional_cases`
   *
   * If not specified, the agent's default language is used.
   * [Many
   * languages](https://cloud.google.com/dialogflow/cx/docs/reference/language)
   * are supported.
   * Note: languages must be enabled in the agent before they can be used.
   */
  languageCode: string;
}

/**
 * The request message for
 * [TransitionRouteGroups.UpdateTransitionRouteGroup][google.cloud.dialogflow.cx.v3beta1.TransitionRouteGroups.UpdateTransitionRouteGroup].
 */
export interface UpdateTransitionRouteGroupRequest {
  /** Required. The transition route group to update. */
  transitionRouteGroup:
    | TransitionRouteGroup
    | undefined;
  /** The mask to control which fields get updated. */
  updateMask:
    | string[]
    | undefined;
  /**
   * The language of the following fields in `TransitionRouteGroup`:
   *
   * *  `TransitionRouteGroup.transition_routes.trigger_fulfillment.messages`
   * *
   * `TransitionRouteGroup.transition_routes.trigger_fulfillment.conditional_cases`
   *
   * If not specified, the agent's default language is used.
   * [Many
   * languages](https://cloud.google.com/dialogflow/cx/docs/reference/language)
   * are supported.
   * Note: languages must be enabled in the agent before they can be used.
   */
  languageCode: string;
}

/**
 * The request message for
 * [TransitionRouteGroups.DeleteTransitionRouteGroup][google.cloud.dialogflow.cx.v3beta1.TransitionRouteGroups.DeleteTransitionRouteGroup].
 */
export interface DeleteTransitionRouteGroupRequest {
  /**
   * Required. The name of the
   * [TransitionRouteGroup][google.cloud.dialogflow.cx.v3beta1.TransitionRouteGroup]
   * to delete. Format: `projects/<Project ID>/locations/<Location
   * ID>/agents/<Agent ID>/flows/<Flow ID>/transitionRouteGroups/<Transition
   * Route Group ID>` or `projects/<Project ID>/locations/<Location
   * ID>/agents/<Agent ID>/transitionRouteGroups/<Transition Route Group ID>`.
   */
  name: string;
  /**
   * This field has no effect for transition route group that no page is using.
   * If the transition route group is referenced by any page:
   *
   * *  If `force` is set to false, an error will be returned with message
   *    indicating pages that reference the transition route group.
   * *  If `force` is set to true, Dialogflow will remove the transition route
   *    group, as well as any reference to it.
   */
  force: boolean;
}

function createBaseTransitionRouteGroup(): TransitionRouteGroup {
  return { name: "", displayName: "", transitionRoutes: [] };
}

export const TransitionRouteGroup: MessageFns<TransitionRouteGroup> = {
  encode(message: TransitionRouteGroup, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.displayName !== "") {
      writer.uint32(18).string(message.displayName);
    }
    for (const v of message.transitionRoutes) {
      TransitionRoute.encode(v!, writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TransitionRouteGroup {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTransitionRouteGroup();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.displayName = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.transitionRoutes.push(TransitionRoute.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TransitionRouteGroup {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      displayName: isSet(object.displayName) ? globalThis.String(object.displayName) : "",
      transitionRoutes: globalThis.Array.isArray(object?.transitionRoutes)
        ? object.transitionRoutes.map((e: any) => TransitionRoute.fromJSON(e))
        : [],
    };
  },

  toJSON(message: TransitionRouteGroup): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.displayName !== "") {
      obj.displayName = message.displayName;
    }
    if (message.transitionRoutes?.length) {
      obj.transitionRoutes = message.transitionRoutes.map((e) => TransitionRoute.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<TransitionRouteGroup>): TransitionRouteGroup {
    return TransitionRouteGroup.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<TransitionRouteGroup>): TransitionRouteGroup {
    const message = createBaseTransitionRouteGroup();
    message.name = object.name ?? "";
    message.displayName = object.displayName ?? "";
    message.transitionRoutes = object.transitionRoutes?.map((e) => TransitionRoute.fromPartial(e)) || [];
    return message;
  },
};

function createBaseListTransitionRouteGroupsRequest(): ListTransitionRouteGroupsRequest {
  return { parent: "", pageSize: 0, pageToken: "", languageCode: "" };
}

export const ListTransitionRouteGroupsRequest: MessageFns<ListTransitionRouteGroupsRequest> = {
  encode(message: ListTransitionRouteGroupsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    if (message.languageCode !== "") {
      writer.uint32(34).string(message.languageCode);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListTransitionRouteGroupsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListTransitionRouteGroupsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.languageCode = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListTransitionRouteGroupsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      languageCode: isSet(object.languageCode) ? globalThis.String(object.languageCode) : "",
    };
  },

  toJSON(message: ListTransitionRouteGroupsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.languageCode !== "") {
      obj.languageCode = message.languageCode;
    }
    return obj;
  },

  create(base?: DeepPartial<ListTransitionRouteGroupsRequest>): ListTransitionRouteGroupsRequest {
    return ListTransitionRouteGroupsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListTransitionRouteGroupsRequest>): ListTransitionRouteGroupsRequest {
    const message = createBaseListTransitionRouteGroupsRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.languageCode = object.languageCode ?? "";
    return message;
  },
};

function createBaseListTransitionRouteGroupsResponse(): ListTransitionRouteGroupsResponse {
  return { transitionRouteGroups: [], nextPageToken: "" };
}

export const ListTransitionRouteGroupsResponse: MessageFns<ListTransitionRouteGroupsResponse> = {
  encode(message: ListTransitionRouteGroupsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.transitionRouteGroups) {
      TransitionRouteGroup.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListTransitionRouteGroupsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListTransitionRouteGroupsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.transitionRouteGroups.push(TransitionRouteGroup.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListTransitionRouteGroupsResponse {
    return {
      transitionRouteGroups: globalThis.Array.isArray(object?.transitionRouteGroups)
        ? object.transitionRouteGroups.map((e: any) => TransitionRouteGroup.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListTransitionRouteGroupsResponse): unknown {
    const obj: any = {};
    if (message.transitionRouteGroups?.length) {
      obj.transitionRouteGroups = message.transitionRouteGroups.map((e) => TransitionRouteGroup.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListTransitionRouteGroupsResponse>): ListTransitionRouteGroupsResponse {
    return ListTransitionRouteGroupsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListTransitionRouteGroupsResponse>): ListTransitionRouteGroupsResponse {
    const message = createBaseListTransitionRouteGroupsResponse();
    message.transitionRouteGroups = object.transitionRouteGroups?.map((e) => TransitionRouteGroup.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseGetTransitionRouteGroupRequest(): GetTransitionRouteGroupRequest {
  return { name: "", languageCode: "" };
}

export const GetTransitionRouteGroupRequest: MessageFns<GetTransitionRouteGroupRequest> = {
  encode(message: GetTransitionRouteGroupRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.languageCode !== "") {
      writer.uint32(18).string(message.languageCode);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetTransitionRouteGroupRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetTransitionRouteGroupRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.languageCode = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetTransitionRouteGroupRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      languageCode: isSet(object.languageCode) ? globalThis.String(object.languageCode) : "",
    };
  },

  toJSON(message: GetTransitionRouteGroupRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.languageCode !== "") {
      obj.languageCode = message.languageCode;
    }
    return obj;
  },

  create(base?: DeepPartial<GetTransitionRouteGroupRequest>): GetTransitionRouteGroupRequest {
    return GetTransitionRouteGroupRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetTransitionRouteGroupRequest>): GetTransitionRouteGroupRequest {
    const message = createBaseGetTransitionRouteGroupRequest();
    message.name = object.name ?? "";
    message.languageCode = object.languageCode ?? "";
    return message;
  },
};

function createBaseCreateTransitionRouteGroupRequest(): CreateTransitionRouteGroupRequest {
  return { parent: "", transitionRouteGroup: undefined, languageCode: "" };
}

export const CreateTransitionRouteGroupRequest: MessageFns<CreateTransitionRouteGroupRequest> = {
  encode(message: CreateTransitionRouteGroupRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.transitionRouteGroup !== undefined) {
      TransitionRouteGroup.encode(message.transitionRouteGroup, writer.uint32(18).fork()).join();
    }
    if (message.languageCode !== "") {
      writer.uint32(26).string(message.languageCode);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateTransitionRouteGroupRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateTransitionRouteGroupRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.transitionRouteGroup = TransitionRouteGroup.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.languageCode = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateTransitionRouteGroupRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      transitionRouteGroup: isSet(object.transitionRouteGroup)
        ? TransitionRouteGroup.fromJSON(object.transitionRouteGroup)
        : undefined,
      languageCode: isSet(object.languageCode) ? globalThis.String(object.languageCode) : "",
    };
  },

  toJSON(message: CreateTransitionRouteGroupRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.transitionRouteGroup !== undefined) {
      obj.transitionRouteGroup = TransitionRouteGroup.toJSON(message.transitionRouteGroup);
    }
    if (message.languageCode !== "") {
      obj.languageCode = message.languageCode;
    }
    return obj;
  },

  create(base?: DeepPartial<CreateTransitionRouteGroupRequest>): CreateTransitionRouteGroupRequest {
    return CreateTransitionRouteGroupRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateTransitionRouteGroupRequest>): CreateTransitionRouteGroupRequest {
    const message = createBaseCreateTransitionRouteGroupRequest();
    message.parent = object.parent ?? "";
    message.transitionRouteGroup = (object.transitionRouteGroup !== undefined && object.transitionRouteGroup !== null)
      ? TransitionRouteGroup.fromPartial(object.transitionRouteGroup)
      : undefined;
    message.languageCode = object.languageCode ?? "";
    return message;
  },
};

function createBaseUpdateTransitionRouteGroupRequest(): UpdateTransitionRouteGroupRequest {
  return { transitionRouteGroup: undefined, updateMask: undefined, languageCode: "" };
}

export const UpdateTransitionRouteGroupRequest: MessageFns<UpdateTransitionRouteGroupRequest> = {
  encode(message: UpdateTransitionRouteGroupRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.transitionRouteGroup !== undefined) {
      TransitionRouteGroup.encode(message.transitionRouteGroup, writer.uint32(10).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(18).fork()).join();
    }
    if (message.languageCode !== "") {
      writer.uint32(26).string(message.languageCode);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateTransitionRouteGroupRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateTransitionRouteGroupRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.transitionRouteGroup = TransitionRouteGroup.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.languageCode = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateTransitionRouteGroupRequest {
    return {
      transitionRouteGroup: isSet(object.transitionRouteGroup)
        ? TransitionRouteGroup.fromJSON(object.transitionRouteGroup)
        : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
      languageCode: isSet(object.languageCode) ? globalThis.String(object.languageCode) : "",
    };
  },

  toJSON(message: UpdateTransitionRouteGroupRequest): unknown {
    const obj: any = {};
    if (message.transitionRouteGroup !== undefined) {
      obj.transitionRouteGroup = TransitionRouteGroup.toJSON(message.transitionRouteGroup);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    if (message.languageCode !== "") {
      obj.languageCode = message.languageCode;
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateTransitionRouteGroupRequest>): UpdateTransitionRouteGroupRequest {
    return UpdateTransitionRouteGroupRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateTransitionRouteGroupRequest>): UpdateTransitionRouteGroupRequest {
    const message = createBaseUpdateTransitionRouteGroupRequest();
    message.transitionRouteGroup = (object.transitionRouteGroup !== undefined && object.transitionRouteGroup !== null)
      ? TransitionRouteGroup.fromPartial(object.transitionRouteGroup)
      : undefined;
    message.updateMask = object.updateMask ?? undefined;
    message.languageCode = object.languageCode ?? "";
    return message;
  },
};

function createBaseDeleteTransitionRouteGroupRequest(): DeleteTransitionRouteGroupRequest {
  return { name: "", force: false };
}

export const DeleteTransitionRouteGroupRequest: MessageFns<DeleteTransitionRouteGroupRequest> = {
  encode(message: DeleteTransitionRouteGroupRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.force !== false) {
      writer.uint32(16).bool(message.force);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteTransitionRouteGroupRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteTransitionRouteGroupRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.force = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteTransitionRouteGroupRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      force: isSet(object.force) ? globalThis.Boolean(object.force) : false,
    };
  },

  toJSON(message: DeleteTransitionRouteGroupRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.force !== false) {
      obj.force = message.force;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteTransitionRouteGroupRequest>): DeleteTransitionRouteGroupRequest {
    return DeleteTransitionRouteGroupRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteTransitionRouteGroupRequest>): DeleteTransitionRouteGroupRequest {
    const message = createBaseDeleteTransitionRouteGroupRequest();
    message.name = object.name ?? "";
    message.force = object.force ?? false;
    return message;
  },
};

/**
 * Service for managing
 * [TransitionRouteGroups][google.cloud.dialogflow.cx.v3beta1.TransitionRouteGroup].
 */
export type TransitionRouteGroupsDefinition = typeof TransitionRouteGroupsDefinition;
export const TransitionRouteGroupsDefinition = {
  name: "TransitionRouteGroups",
  fullName: "google.cloud.dialogflow.cx.v3beta1.TransitionRouteGroups",
  methods: {
    /** Returns the list of all transition route groups in the specified flow. */
    listTransitionRouteGroups: {
      name: "ListTransitionRouteGroups",
      requestType: ListTransitionRouteGroupsRequest,
      requestStream: false,
      responseType: ListTransitionRouteGroupsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              156,
              1,
              90,
              73,
              18,
              71,
              47,
              118,
              51,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              103,
              101,
              110,
              116,
              115,
              47,
              42,
              125,
              47,
              116,
              114,
              97,
              110,
              115,
              105,
              116,
              105,
              111,
              110,
              82,
              111,
              117,
              116,
              101,
              71,
              114,
              111,
              117,
              112,
              115,
              18,
              79,
              47,
              118,
              51,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              103,
              101,
              110,
              116,
              115,
              47,
              42,
              47,
              102,
              108,
              111,
              119,
              115,
              47,
              42,
              125,
              47,
              116,
              114,
              97,
              110,
              115,
              105,
              116,
              105,
              111,
              110,
              82,
              111,
              117,
              116,
              101,
              71,
              114,
              111,
              117,
              112,
              115,
            ]),
          ],
        },
      },
    },
    /**
     * Retrieves the specified
     * [TransitionRouteGroup][google.cloud.dialogflow.cx.v3beta1.TransitionRouteGroup].
     */
    getTransitionRouteGroup: {
      name: "GetTransitionRouteGroup",
      requestType: GetTransitionRouteGroupRequest,
      requestStream: false,
      responseType: TransitionRouteGroup,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              156,
              1,
              90,
              73,
              18,
              71,
              47,
              118,
              51,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              103,
              101,
              110,
              116,
              115,
              47,
              42,
              47,
              116,
              114,
              97,
              110,
              115,
              105,
              116,
              105,
              111,
              110,
              82,
              111,
              117,
              116,
              101,
              71,
              114,
              111,
              117,
              112,
              115,
              47,
              42,
              125,
              18,
              79,
              47,
              118,
              51,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              103,
              101,
              110,
              116,
              115,
              47,
              42,
              47,
              102,
              108,
              111,
              119,
              115,
              47,
              42,
              47,
              116,
              114,
              97,
              110,
              115,
              105,
              116,
              105,
              111,
              110,
              82,
              111,
              117,
              116,
              101,
              71,
              114,
              111,
              117,
              112,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Creates an
     * [TransitionRouteGroup][google.cloud.dialogflow.cx.v3beta1.TransitionRouteGroup]
     * in the specified flow.
     *
     * Note: You should always train a flow prior to sending it queries. See the
     * [training
     * documentation](https://cloud.google.com/dialogflow/cx/docs/concept/training).
     */
    createTransitionRouteGroup: {
      name: "CreateTransitionRouteGroup",
      requestType: CreateTransitionRouteGroupRequest,
      requestStream: false,
      responseType: TransitionRouteGroup,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              29,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              116,
              114,
              97,
              110,
              115,
              105,
              116,
              105,
              111,
              110,
              95,
              114,
              111,
              117,
              116,
              101,
              95,
              103,
              114,
              111,
              117,
              112,
            ]),
          ],
          578365826: [
            Buffer.from([
              204,
              1,
              58,
              22,
              116,
              114,
              97,
              110,
              115,
              105,
              116,
              105,
              111,
              110,
              95,
              114,
              111,
              117,
              116,
              101,
              95,
              103,
              114,
              111,
              117,
              112,
              90,
              97,
              58,
              22,
              116,
              114,
              97,
              110,
              115,
              105,
              116,
              105,
              111,
              110,
              95,
              114,
              111,
              117,
              116,
              101,
              95,
              103,
              114,
              111,
              117,
              112,
              34,
              71,
              47,
              118,
              51,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              103,
              101,
              110,
              116,
              115,
              47,
              42,
              125,
              47,
              116,
              114,
              97,
              110,
              115,
              105,
              116,
              105,
              111,
              110,
              82,
              111,
              117,
              116,
              101,
              71,
              114,
              111,
              117,
              112,
              115,
              34,
              79,
              47,
              118,
              51,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              103,
              101,
              110,
              116,
              115,
              47,
              42,
              47,
              102,
              108,
              111,
              119,
              115,
              47,
              42,
              125,
              47,
              116,
              114,
              97,
              110,
              115,
              105,
              116,
              105,
              111,
              110,
              82,
              111,
              117,
              116,
              101,
              71,
              114,
              111,
              117,
              112,
              115,
            ]),
          ],
        },
      },
    },
    /**
     * Updates the specified
     * [TransitionRouteGroup][google.cloud.dialogflow.cx.v3beta1.TransitionRouteGroup].
     *
     * Note: You should always train a flow prior to sending it queries. See the
     * [training
     * documentation](https://cloud.google.com/dialogflow/cx/docs/concept/training).
     */
    updateTransitionRouteGroup: {
      name: "UpdateTransitionRouteGroup",
      requestType: UpdateTransitionRouteGroupRequest,
      requestStream: false,
      responseType: TransitionRouteGroup,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              34,
              116,
              114,
              97,
              110,
              115,
              105,
              116,
              105,
              111,
              110,
              95,
              114,
              111,
              117,
              116,
              101,
              95,
              103,
              114,
              111,
              117,
              112,
              44,
              117,
              112,
              100,
              97,
              116,
              101,
              95,
              109,
              97,
              115,
              107,
            ]),
          ],
          578365826: [
            Buffer.from([
              250,
              1,
              58,
              22,
              116,
              114,
              97,
              110,
              115,
              105,
              116,
              105,
              111,
              110,
              95,
              114,
              111,
              117,
              116,
              101,
              95,
              103,
              114,
              111,
              117,
              112,
              90,
              120,
              58,
              22,
              116,
              114,
              97,
              110,
              115,
              105,
              116,
              105,
              111,
              110,
              95,
              114,
              111,
              117,
              116,
              101,
              95,
              103,
              114,
              111,
              117,
              112,
              50,
              94,
              47,
              118,
              51,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              116,
              114,
              97,
              110,
              115,
              105,
              116,
              105,
              111,
              110,
              95,
              114,
              111,
              117,
              116,
              101,
              95,
              103,
              114,
              111,
              117,
              112,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              103,
              101,
              110,
              116,
              115,
              47,
              42,
              47,
              116,
              114,
              97,
              110,
              115,
              105,
              116,
              105,
              111,
              110,
              82,
              111,
              117,
              116,
              101,
              71,
              114,
              111,
              117,
              112,
              115,
              47,
              42,
              125,
              50,
              102,
              47,
              118,
              51,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              116,
              114,
              97,
              110,
              115,
              105,
              116,
              105,
              111,
              110,
              95,
              114,
              111,
              117,
              116,
              101,
              95,
              103,
              114,
              111,
              117,
              112,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              103,
              101,
              110,
              116,
              115,
              47,
              42,
              47,
              102,
              108,
              111,
              119,
              115,
              47,
              42,
              47,
              116,
              114,
              97,
              110,
              115,
              105,
              116,
              105,
              111,
              110,
              82,
              111,
              117,
              116,
              101,
              71,
              114,
              111,
              117,
              112,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Deletes the specified
     * [TransitionRouteGroup][google.cloud.dialogflow.cx.v3beta1.TransitionRouteGroup].
     *
     * Note: You should always train a flow prior to sending it queries. See the
     * [training
     * documentation](https://cloud.google.com/dialogflow/cx/docs/concept/training).
     */
    deleteTransitionRouteGroup: {
      name: "DeleteTransitionRouteGroup",
      requestType: DeleteTransitionRouteGroupRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              156,
              1,
              90,
              73,
              42,
              71,
              47,
              118,
              51,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              103,
              101,
              110,
              116,
              115,
              47,
              42,
              47,
              116,
              114,
              97,
              110,
              115,
              105,
              116,
              105,
              111,
              110,
              82,
              111,
              117,
              116,
              101,
              71,
              114,
              111,
              117,
              112,
              115,
              47,
              42,
              125,
              42,
              79,
              47,
              118,
              51,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              103,
              101,
              110,
              116,
              115,
              47,
              42,
              47,
              102,
              108,
              111,
              119,
              115,
              47,
              42,
              47,
              116,
              114,
              97,
              110,
              115,
              105,
              116,
              105,
              111,
              110,
              82,
              111,
              117,
              116,
              101,
              71,
              114,
              111,
              117,
              112,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface TransitionRouteGroupsServiceImplementation<CallContextExt = {}> {
  /** Returns the list of all transition route groups in the specified flow. */
  listTransitionRouteGroups(
    request: ListTransitionRouteGroupsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListTransitionRouteGroupsResponse>>;
  /**
   * Retrieves the specified
   * [TransitionRouteGroup][google.cloud.dialogflow.cx.v3beta1.TransitionRouteGroup].
   */
  getTransitionRouteGroup(
    request: GetTransitionRouteGroupRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<TransitionRouteGroup>>;
  /**
   * Creates an
   * [TransitionRouteGroup][google.cloud.dialogflow.cx.v3beta1.TransitionRouteGroup]
   * in the specified flow.
   *
   * Note: You should always train a flow prior to sending it queries. See the
   * [training
   * documentation](https://cloud.google.com/dialogflow/cx/docs/concept/training).
   */
  createTransitionRouteGroup(
    request: CreateTransitionRouteGroupRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<TransitionRouteGroup>>;
  /**
   * Updates the specified
   * [TransitionRouteGroup][google.cloud.dialogflow.cx.v3beta1.TransitionRouteGroup].
   *
   * Note: You should always train a flow prior to sending it queries. See the
   * [training
   * documentation](https://cloud.google.com/dialogflow/cx/docs/concept/training).
   */
  updateTransitionRouteGroup(
    request: UpdateTransitionRouteGroupRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<TransitionRouteGroup>>;
  /**
   * Deletes the specified
   * [TransitionRouteGroup][google.cloud.dialogflow.cx.v3beta1.TransitionRouteGroup].
   *
   * Note: You should always train a flow prior to sending it queries. See the
   * [training
   * documentation](https://cloud.google.com/dialogflow/cx/docs/concept/training).
   */
  deleteTransitionRouteGroup(
    request: DeleteTransitionRouteGroupRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Empty>>;
}

export interface TransitionRouteGroupsClient<CallOptionsExt = {}> {
  /** Returns the list of all transition route groups in the specified flow. */
  listTransitionRouteGroups(
    request: DeepPartial<ListTransitionRouteGroupsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListTransitionRouteGroupsResponse>;
  /**
   * Retrieves the specified
   * [TransitionRouteGroup][google.cloud.dialogflow.cx.v3beta1.TransitionRouteGroup].
   */
  getTransitionRouteGroup(
    request: DeepPartial<GetTransitionRouteGroupRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<TransitionRouteGroup>;
  /**
   * Creates an
   * [TransitionRouteGroup][google.cloud.dialogflow.cx.v3beta1.TransitionRouteGroup]
   * in the specified flow.
   *
   * Note: You should always train a flow prior to sending it queries. See the
   * [training
   * documentation](https://cloud.google.com/dialogflow/cx/docs/concept/training).
   */
  createTransitionRouteGroup(
    request: DeepPartial<CreateTransitionRouteGroupRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<TransitionRouteGroup>;
  /**
   * Updates the specified
   * [TransitionRouteGroup][google.cloud.dialogflow.cx.v3beta1.TransitionRouteGroup].
   *
   * Note: You should always train a flow prior to sending it queries. See the
   * [training
   * documentation](https://cloud.google.com/dialogflow/cx/docs/concept/training).
   */
  updateTransitionRouteGroup(
    request: DeepPartial<UpdateTransitionRouteGroupRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<TransitionRouteGroup>;
  /**
   * Deletes the specified
   * [TransitionRouteGroup][google.cloud.dialogflow.cx.v3beta1.TransitionRouteGroup].
   *
   * Note: You should always train a flow prior to sending it queries. See the
   * [training
   * documentation](https://cloud.google.com/dialogflow/cx/docs/concept/training).
   */
  deleteTransitionRouteGroup(
    request: DeepPartial<DeleteTransitionRouteGroupRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Empty>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
