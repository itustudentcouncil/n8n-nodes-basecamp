// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/dialogflow/cx/v3beta1/tool.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { Operation } from "../../../../longrunning/operations.js";
import { Empty } from "../../../../protobuf/empty.js";
import { FieldMask } from "../../../../protobuf/field_mask.js";
import { Struct } from "../../../../protobuf/struct.js";
import { DataStoreConnection } from "./data_store_connection.js";
import { InlineDestination } from "./inline.js";

export const protobufPackage = "google.cloud.dialogflow.cx.v3beta1";

/**
 * The request message for
 * [Tools.CreateTool][google.cloud.dialogflow.cx.v3beta1.Tools.CreateTool].
 */
export interface CreateToolRequest {
  /**
   * Required. The agent to create a Tool for.
   * Format: `projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>`.
   */
  parent: string;
  /** Required. The Tool to be created. */
  tool: Tool | undefined;
}

/**
 * The request message for
 * [Tools.ListTools][google.cloud.dialogflow.cx.v3beta1.Tools.ListTools].
 */
export interface ListToolsRequest {
  /**
   * Required. The agent to list the Tools from.
   * Format: `projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>`.
   */
  parent: string;
  /**
   * The maximum number of items to return in a single page. By default 100 and
   * at most 1000.
   */
  pageSize: number;
  /** The next_page_token value returned from a previous list request. */
  pageToken: string;
}

/**
 * The response message for
 * [Tools.ListTools][google.cloud.dialogflow.cx.v3beta1.Tools.ListTools].
 */
export interface ListToolsResponse {
  /**
   * The list of Tools. There will be a maximum number of items returned
   * based on the page_size field in the request.
   */
  tools: Tool[];
  /**
   * Token to retrieve the next page of results, or empty if there are no more
   * results in the list.
   */
  nextPageToken: string;
}

/**
 * The request message for
 * [Tools.GetTool][google.cloud.dialogflow.cx.v3beta1.Tools.GetTool].
 */
export interface GetToolRequest {
  /**
   * Required. The name of the Tool.
   * Format: `projects/<Project ID>/locations/<Location ID>/agents/<Agent
   * ID>/tools/<Tool ID>`.
   */
  name: string;
}

/**
 * The request message for
 * [Tools.ExportTools][google.cloud.dialogflow.cx.v3beta1.Tools.ExportTools].
 */
export interface ExportToolsRequest {
  /**
   * Required. The agent to export tools from.
   * Format: `projects/<Project ID>/locations/<Location ID>/agents/<Agent
   * ID>`.
   */
  parent: string;
  /**
   * Required. The name of the tools to export.
   * Format: `projects/<Project ID>/locations/<Location ID>/agents/<Agent
   * ID>/tools/<Tool ID>`.
   */
  tools: string[];
  /**
   * Optional. The [Google Cloud
   * Storage](https://cloud.google.com/storage/docs/) URI to export the tools
   * to. The format of this URI must be `gs://<bucket-name>/<object-name>`.
   *
   * Dialogflow performs a write operation for the Cloud Storage object
   * on the caller's behalf, so your request authentication must
   * have write permissions for the object. For more information, see
   * [Dialogflow access
   * control](https://cloud.google.com/dialogflow/cx/docs/concept/access-control#storage).
   */
  toolsUri?:
    | string
    | undefined;
  /** Optional. The option to return the serialized tools inline. */
  toolsContentInline?:
    | boolean
    | undefined;
  /**
   * Optional. The data format of the exported tools. If not specified, `BLOB`
   * is assumed.
   */
  dataFormat: ExportToolsRequest_DataFormat;
}

/** Data format of the exported tools. */
export enum ExportToolsRequest_DataFormat {
  /** DATA_FORMAT_UNSPECIFIED - Unspecified format. Treated as `BLOB`. */
  DATA_FORMAT_UNSPECIFIED = 0,
  /** BLOB - Tools will be exported as raw bytes. */
  BLOB = 1,
  /** JSON - Tools will be exported in JSON format. */
  JSON = 2,
  UNRECOGNIZED = -1,
}

export function exportToolsRequest_DataFormatFromJSON(object: any): ExportToolsRequest_DataFormat {
  switch (object) {
    case 0:
    case "DATA_FORMAT_UNSPECIFIED":
      return ExportToolsRequest_DataFormat.DATA_FORMAT_UNSPECIFIED;
    case 1:
    case "BLOB":
      return ExportToolsRequest_DataFormat.BLOB;
    case 2:
    case "JSON":
      return ExportToolsRequest_DataFormat.JSON;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ExportToolsRequest_DataFormat.UNRECOGNIZED;
  }
}

export function exportToolsRequest_DataFormatToJSON(object: ExportToolsRequest_DataFormat): string {
  switch (object) {
    case ExportToolsRequest_DataFormat.DATA_FORMAT_UNSPECIFIED:
      return "DATA_FORMAT_UNSPECIFIED";
    case ExportToolsRequest_DataFormat.BLOB:
      return "BLOB";
    case ExportToolsRequest_DataFormat.JSON:
      return "JSON";
    case ExportToolsRequest_DataFormat.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/**
 * The response message for
 * [Tools.ExportTools][google.cloud.dialogflow.cx.v3beta1.Tools.ExportTools].
 */
export interface ExportToolsResponse {
  /**
   * The URI to a file containing the exported tools. This field is
   * populated only if `tools_uri` is specified in
   * [ExportToolsRequest][google.cloud.dialogflow.cx.v3beta1.ExportToolsRequest].
   */
  toolsUri?:
    | string
    | undefined;
  /**
   * Uncompressed byte content for tools. This field is populated only if
   * `tools_content_inline` is set to true in
   * [ExportToolsRequest][google.cloud.dialogflow.cx.v3beta1.ExportToolsRequest].
   */
  toolsContent?: InlineDestination | undefined;
}

/**
 * The request message for
 * [Tools.UpdateTool][google.cloud.dialogflow.cx.v3beta1.Tools.UpdateTool].
 */
export interface UpdateToolRequest {
  /** Required. The Tool to be updated. */
  tool:
    | Tool
    | undefined;
  /**
   * The mask to control which fields get updated. If the mask is not present,
   * all fields will be updated.
   */
  updateMask: string[] | undefined;
}

/**
 * The request message for
 * [Tools.DeleteTool][google.cloud.dialogflow.cx.v3beta1.Tools.DeleteTool].
 */
export interface DeleteToolRequest {
  /**
   * Required. The name of the Tool to be deleted.
   * Format: `projects/<Project ID>/locations/<Location ID>/agents/<Agent
   * ID>/tools/<Tool ID>`.
   */
  name: string;
  /**
   * This field has no effect for Tools not being used.
   * For Tools that are used:
   *
   * *  If `force` is set to false, an error will be returned with message
   *    indicating the referenced resources.
   * *  If `force` is set to true, Dialogflow will remove the tool, as well
   *    as any references to the tool.
   */
  force: boolean;
}

/**
 * A tool provides a list of actions which are available to the
 * [Playbook][google.cloud.dialogflow.cx.v3beta1.Playbook] to attain its goal. A
 * Tool consists of a description of the tool's usage and a specification of the
 * tool which contains the schema and authentication information.
 */
export interface Tool {
  /**
   * The unique identifier of the Tool.
   * Format: `projects/<Project ID>/locations/<Location ID>/agents/<Agent
   * ID>/tools/<Tool ID>`.
   */
  name: string;
  /** Required. The human-readable name of the Tool, unique within an agent. */
  displayName: string;
  /** Required. High level description of the Tool and its usage. */
  description: string;
  /** OpenAPI specification of the Tool. */
  openApiSpec?:
    | Tool_OpenApiTool
    | undefined;
  /** Data store search tool specification. */
  dataStoreSpec?:
    | Tool_DataStoreTool
    | undefined;
  /** Vertex extension tool specification. */
  extensionSpec?:
    | Tool_ExtensionTool
    | undefined;
  /** Client side executed function specification. */
  functionSpec?:
    | Tool_FunctionTool
    | undefined;
  /** Output only. The tool type. */
  toolType: Tool_ToolType;
}

/** Represents the type of the tool. */
export enum Tool_ToolType {
  /** TOOL_TYPE_UNSPECIFIED - Default value. This value is unused. */
  TOOL_TYPE_UNSPECIFIED = 0,
  /** CUSTOMIZED_TOOL - Customer provided tool. */
  CUSTOMIZED_TOOL = 1,
  /** BUILTIN_TOOL - First party built-in tool created by Dialogflow which cannot be modified. */
  BUILTIN_TOOL = 2,
  UNRECOGNIZED = -1,
}

export function tool_ToolTypeFromJSON(object: any): Tool_ToolType {
  switch (object) {
    case 0:
    case "TOOL_TYPE_UNSPECIFIED":
      return Tool_ToolType.TOOL_TYPE_UNSPECIFIED;
    case 1:
    case "CUSTOMIZED_TOOL":
      return Tool_ToolType.CUSTOMIZED_TOOL;
    case 2:
    case "BUILTIN_TOOL":
      return Tool_ToolType.BUILTIN_TOOL;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Tool_ToolType.UNRECOGNIZED;
  }
}

export function tool_ToolTypeToJSON(object: Tool_ToolType): string {
  switch (object) {
    case Tool_ToolType.TOOL_TYPE_UNSPECIFIED:
      return "TOOL_TYPE_UNSPECIFIED";
    case Tool_ToolType.CUSTOMIZED_TOOL:
      return "CUSTOMIZED_TOOL";
    case Tool_ToolType.BUILTIN_TOOL:
      return "BUILTIN_TOOL";
    case Tool_ToolType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/**
 * An OpenAPI tool is a way to provide the Tool specifications in the Open API
 * schema format.
 */
export interface Tool_OpenApiTool {
  /** Required. The OpenAPI schema specified as a text. */
  textSchema?:
    | string
    | undefined;
  /** Optional. Authentication information required by the API. */
  authentication:
    | Tool_Authentication
    | undefined;
  /** Optional. TLS configuration for the HTTPS verification. */
  tlsConfig:
    | Tool_TLSConfig
    | undefined;
  /** Optional. Service Directory configuration. */
  serviceDirectoryConfig: Tool_ServiceDirectoryConfig | undefined;
}

/**
 * A DataStoreTool is a way to provide specifications needed to search a
 * list of data stores.
 */
export interface Tool_DataStoreTool {
  /** Required. List of data stores to search. */
  dataStoreConnections: DataStoreConnection[];
  /** Required. Fallback prompt configurations to use. */
  fallbackPrompt: Tool_DataStoreTool_FallbackPrompt | undefined;
}

/**
 * A FallbackPrompt is a way to provide specifications for the Data Store
 * fallback prompt when generating responses.
 */
export interface Tool_DataStoreTool_FallbackPrompt {
}

/** An ExtensionTool is a way to use Vertex Extensions as a tool. */
export interface Tool_ExtensionTool {
  /**
   * Required. The full name of the referenced vertex extension.
   * Formats:
   * `projects/{project}/locations/{location}/extensions/{extension}`
   */
  name: string;
}

/** A Function tool describes the functions to be invoked on the client side. */
export interface Tool_FunctionTool {
  /**
   * Optional. The JSON schema is encapsulated in a
   * [google.protobuf.Struct][google.protobuf.Struct] to describe the input of
   * the function. This input is a JSON object that contains the function's
   * parameters as properties of the object.
   */
  inputSchema:
    | { [key: string]: any }
    | undefined;
  /**
   * Optional. The JSON schema is encapsulated in a
   * [google.protobuf.Struct][google.protobuf.Struct] to describe the output
   * of the function. This output is a JSON object that contains the
   * function's parameters as properties of the object.
   */
  outputSchema: { [key: string]: any } | undefined;
}

/** Authentication information required for API calls */
export interface Tool_Authentication {
  /** Config for API key auth. */
  apiKeyConfig?:
    | Tool_Authentication_ApiKeyConfig
    | undefined;
  /** Config for OAuth. */
  oauthConfig?:
    | Tool_Authentication_OAuthConfig
    | undefined;
  /**
   * Config for [Diglogflow service
   * agent](https://cloud.google.com/iam/docs/service-agents#dialogflow-service-agent)
   * auth.
   */
  serviceAgentAuthConfig?: Tool_Authentication_ServiceAgentAuthConfig | undefined;
}

/** The location of the API key in the request. */
export enum Tool_Authentication_RequestLocation {
  /** REQUEST_LOCATION_UNSPECIFIED - Default value. This value is unused. */
  REQUEST_LOCATION_UNSPECIFIED = 0,
  /** HEADER - Represents the key in http header. */
  HEADER = 1,
  /** QUERY_STRING - Represents the key in query string. */
  QUERY_STRING = 2,
  UNRECOGNIZED = -1,
}

export function tool_Authentication_RequestLocationFromJSON(object: any): Tool_Authentication_RequestLocation {
  switch (object) {
    case 0:
    case "REQUEST_LOCATION_UNSPECIFIED":
      return Tool_Authentication_RequestLocation.REQUEST_LOCATION_UNSPECIFIED;
    case 1:
    case "HEADER":
      return Tool_Authentication_RequestLocation.HEADER;
    case 2:
    case "QUERY_STRING":
      return Tool_Authentication_RequestLocation.QUERY_STRING;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Tool_Authentication_RequestLocation.UNRECOGNIZED;
  }
}

export function tool_Authentication_RequestLocationToJSON(object: Tool_Authentication_RequestLocation): string {
  switch (object) {
    case Tool_Authentication_RequestLocation.REQUEST_LOCATION_UNSPECIFIED:
      return "REQUEST_LOCATION_UNSPECIFIED";
    case Tool_Authentication_RequestLocation.HEADER:
      return "HEADER";
    case Tool_Authentication_RequestLocation.QUERY_STRING:
      return "QUERY_STRING";
    case Tool_Authentication_RequestLocation.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Config for authentication with API key. */
export interface Tool_Authentication_ApiKeyConfig {
  /**
   * Required. The parameter name or the header name of the API key.
   * E.g., If the API request is "https://example.com/act?X-Api-Key=<API
   * KEY>", "X-Api-Key" would be the parameter name.
   */
  keyName: string;
  /** Required. The API key. */
  apiKey: string;
  /** Required. Key location in the request. */
  requestLocation: Tool_Authentication_RequestLocation;
}

/** Config for authentication with OAuth. */
export interface Tool_Authentication_OAuthConfig {
  /** Required. OAuth grant types. */
  oauthGrantType: Tool_Authentication_OAuthConfig_OauthGrantType;
  /** Required. The client ID from the OAuth provider. */
  clientId: string;
  /** Required. The client secret from the OAuth provider. */
  clientSecret: string;
  /**
   * Required. The token endpoint in the OAuth provider to exchange for an
   * access token.
   */
  tokenEndpoint: string;
}

/**
 * OAuth grant types. Only [client credential
 * grant](https://oauth.net/2/grant-types/client-credentials) is
 * supported.
 */
export enum Tool_Authentication_OAuthConfig_OauthGrantType {
  /** OAUTH_GRANT_TYPE_UNSPECIFIED - Default value. This value is unused. */
  OAUTH_GRANT_TYPE_UNSPECIFIED = 0,
  /**
   * CLIENT_CREDENTIAL - Represents the [client credential
   * flow](https://oauth.net/2/grant-types/client-credentials).
   */
  CLIENT_CREDENTIAL = 1,
  UNRECOGNIZED = -1,
}

export function tool_Authentication_OAuthConfig_OauthGrantTypeFromJSON(
  object: any,
): Tool_Authentication_OAuthConfig_OauthGrantType {
  switch (object) {
    case 0:
    case "OAUTH_GRANT_TYPE_UNSPECIFIED":
      return Tool_Authentication_OAuthConfig_OauthGrantType.OAUTH_GRANT_TYPE_UNSPECIFIED;
    case 1:
    case "CLIENT_CREDENTIAL":
      return Tool_Authentication_OAuthConfig_OauthGrantType.CLIENT_CREDENTIAL;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Tool_Authentication_OAuthConfig_OauthGrantType.UNRECOGNIZED;
  }
}

export function tool_Authentication_OAuthConfig_OauthGrantTypeToJSON(
  object: Tool_Authentication_OAuthConfig_OauthGrantType,
): string {
  switch (object) {
    case Tool_Authentication_OAuthConfig_OauthGrantType.OAUTH_GRANT_TYPE_UNSPECIFIED:
      return "OAUTH_GRANT_TYPE_UNSPECIFIED";
    case Tool_Authentication_OAuthConfig_OauthGrantType.CLIENT_CREDENTIAL:
      return "CLIENT_CREDENTIAL";
    case Tool_Authentication_OAuthConfig_OauthGrantType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/**
 * Config for auth using [Diglogflow service
 * agent](https://cloud.google.com/iam/docs/service-agents#dialogflow-service-agent).
 */
export interface Tool_Authentication_ServiceAgentAuthConfig {
}

/** The TLS configuration. */
export interface Tool_TLSConfig {
  /**
   * Required. Specifies a list of allowed custom CA certificates for HTTPS
   * verification.
   */
  caCerts: Tool_TLSConfig_CACert[];
}

/** The CA certificate. */
export interface Tool_TLSConfig_CACert {
  /**
   * Required. The name of the allowed custom CA certificates. This
   * can be used to disambiguate the custom CA certificates.
   */
  displayName: string;
  /**
   * Required. The allowed custom CA certificates (in DER format) for
   * HTTPS verification. This overrides the default SSL trust store. If this
   * is empty or unspecified, Dialogflow will use Google's default trust
   * store to verify certificates. N.B. Make sure the HTTPS server
   * certificates are signed with "subject alt name". For instance a
   * certificate can be self-signed using the following command,
   *    openssl x509 -req -days 200 -in example.com.csr \
   *      -signkey example.com.key \
   *      -out example.com.crt \
   *      -extfile <(printf "\nsubjectAltName='DNS:www.example.com'")
   */
  cert: Buffer;
}

/** Configuration for tools using Service Directory. */
export interface Tool_ServiceDirectoryConfig {
  /**
   * Required. The name of [Service
   * Directory](https://cloud.google.com/service-directory) service.
   * Format:
   * `projects/<ProjectID>/locations/<LocationID>/namespaces/<NamespaceID>/services/<ServiceID>`.
   * `LocationID` of the service directory must be the same as the location
   * of the agent.
   */
  service: string;
}

/**
 * Metadata returned for the
 * [Tools.ExportTools][google.cloud.dialogflow.cx.v3beta1.Tools.ExportTools]
 * long running operation.
 */
export interface ExportToolsMetadata {
}

function createBaseCreateToolRequest(): CreateToolRequest {
  return { parent: "", tool: undefined };
}

export const CreateToolRequest: MessageFns<CreateToolRequest> = {
  encode(message: CreateToolRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.tool !== undefined) {
      Tool.encode(message.tool, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateToolRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateToolRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.tool = Tool.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateToolRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      tool: isSet(object.tool) ? Tool.fromJSON(object.tool) : undefined,
    };
  },

  toJSON(message: CreateToolRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.tool !== undefined) {
      obj.tool = Tool.toJSON(message.tool);
    }
    return obj;
  },

  create(base?: DeepPartial<CreateToolRequest>): CreateToolRequest {
    return CreateToolRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateToolRequest>): CreateToolRequest {
    const message = createBaseCreateToolRequest();
    message.parent = object.parent ?? "";
    message.tool = (object.tool !== undefined && object.tool !== null) ? Tool.fromPartial(object.tool) : undefined;
    return message;
  },
};

function createBaseListToolsRequest(): ListToolsRequest {
  return { parent: "", pageSize: 0, pageToken: "" };
}

export const ListToolsRequest: MessageFns<ListToolsRequest> = {
  encode(message: ListToolsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListToolsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListToolsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListToolsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: ListToolsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListToolsRequest>): ListToolsRequest {
    return ListToolsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListToolsRequest>): ListToolsRequest {
    const message = createBaseListToolsRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseListToolsResponse(): ListToolsResponse {
  return { tools: [], nextPageToken: "" };
}

export const ListToolsResponse: MessageFns<ListToolsResponse> = {
  encode(message: ListToolsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.tools) {
      Tool.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListToolsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListToolsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.tools.push(Tool.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListToolsResponse {
    return {
      tools: globalThis.Array.isArray(object?.tools) ? object.tools.map((e: any) => Tool.fromJSON(e)) : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListToolsResponse): unknown {
    const obj: any = {};
    if (message.tools?.length) {
      obj.tools = message.tools.map((e) => Tool.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListToolsResponse>): ListToolsResponse {
    return ListToolsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListToolsResponse>): ListToolsResponse {
    const message = createBaseListToolsResponse();
    message.tools = object.tools?.map((e) => Tool.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseGetToolRequest(): GetToolRequest {
  return { name: "" };
}

export const GetToolRequest: MessageFns<GetToolRequest> = {
  encode(message: GetToolRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetToolRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetToolRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetToolRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetToolRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetToolRequest>): GetToolRequest {
    return GetToolRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetToolRequest>): GetToolRequest {
    const message = createBaseGetToolRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseExportToolsRequest(): ExportToolsRequest {
  return { parent: "", tools: [], toolsUri: undefined, toolsContentInline: undefined, dataFormat: 0 };
}

export const ExportToolsRequest: MessageFns<ExportToolsRequest> = {
  encode(message: ExportToolsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    for (const v of message.tools) {
      writer.uint32(18).string(v!);
    }
    if (message.toolsUri !== undefined) {
      writer.uint32(26).string(message.toolsUri);
    }
    if (message.toolsContentInline !== undefined) {
      writer.uint32(32).bool(message.toolsContentInline);
    }
    if (message.dataFormat !== 0) {
      writer.uint32(40).int32(message.dataFormat);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ExportToolsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseExportToolsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.tools.push(reader.string());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.toolsUri = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.toolsContentInline = reader.bool();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.dataFormat = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ExportToolsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      tools: globalThis.Array.isArray(object?.tools) ? object.tools.map((e: any) => globalThis.String(e)) : [],
      toolsUri: isSet(object.toolsUri) ? globalThis.String(object.toolsUri) : undefined,
      toolsContentInline: isSet(object.toolsContentInline) ? globalThis.Boolean(object.toolsContentInline) : undefined,
      dataFormat: isSet(object.dataFormat) ? exportToolsRequest_DataFormatFromJSON(object.dataFormat) : 0,
    };
  },

  toJSON(message: ExportToolsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.tools?.length) {
      obj.tools = message.tools;
    }
    if (message.toolsUri !== undefined) {
      obj.toolsUri = message.toolsUri;
    }
    if (message.toolsContentInline !== undefined) {
      obj.toolsContentInline = message.toolsContentInline;
    }
    if (message.dataFormat !== 0) {
      obj.dataFormat = exportToolsRequest_DataFormatToJSON(message.dataFormat);
    }
    return obj;
  },

  create(base?: DeepPartial<ExportToolsRequest>): ExportToolsRequest {
    return ExportToolsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ExportToolsRequest>): ExportToolsRequest {
    const message = createBaseExportToolsRequest();
    message.parent = object.parent ?? "";
    message.tools = object.tools?.map((e) => e) || [];
    message.toolsUri = object.toolsUri ?? undefined;
    message.toolsContentInline = object.toolsContentInline ?? undefined;
    message.dataFormat = object.dataFormat ?? 0;
    return message;
  },
};

function createBaseExportToolsResponse(): ExportToolsResponse {
  return { toolsUri: undefined, toolsContent: undefined };
}

export const ExportToolsResponse: MessageFns<ExportToolsResponse> = {
  encode(message: ExportToolsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.toolsUri !== undefined) {
      writer.uint32(10).string(message.toolsUri);
    }
    if (message.toolsContent !== undefined) {
      InlineDestination.encode(message.toolsContent, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ExportToolsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseExportToolsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.toolsUri = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.toolsContent = InlineDestination.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ExportToolsResponse {
    return {
      toolsUri: isSet(object.toolsUri) ? globalThis.String(object.toolsUri) : undefined,
      toolsContent: isSet(object.toolsContent) ? InlineDestination.fromJSON(object.toolsContent) : undefined,
    };
  },

  toJSON(message: ExportToolsResponse): unknown {
    const obj: any = {};
    if (message.toolsUri !== undefined) {
      obj.toolsUri = message.toolsUri;
    }
    if (message.toolsContent !== undefined) {
      obj.toolsContent = InlineDestination.toJSON(message.toolsContent);
    }
    return obj;
  },

  create(base?: DeepPartial<ExportToolsResponse>): ExportToolsResponse {
    return ExportToolsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ExportToolsResponse>): ExportToolsResponse {
    const message = createBaseExportToolsResponse();
    message.toolsUri = object.toolsUri ?? undefined;
    message.toolsContent = (object.toolsContent !== undefined && object.toolsContent !== null)
      ? InlineDestination.fromPartial(object.toolsContent)
      : undefined;
    return message;
  },
};

function createBaseUpdateToolRequest(): UpdateToolRequest {
  return { tool: undefined, updateMask: undefined };
}

export const UpdateToolRequest: MessageFns<UpdateToolRequest> = {
  encode(message: UpdateToolRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.tool !== undefined) {
      Tool.encode(message.tool, writer.uint32(10).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateToolRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateToolRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.tool = Tool.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateToolRequest {
    return {
      tool: isSet(object.tool) ? Tool.fromJSON(object.tool) : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
    };
  },

  toJSON(message: UpdateToolRequest): unknown {
    const obj: any = {};
    if (message.tool !== undefined) {
      obj.tool = Tool.toJSON(message.tool);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateToolRequest>): UpdateToolRequest {
    return UpdateToolRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateToolRequest>): UpdateToolRequest {
    const message = createBaseUpdateToolRequest();
    message.tool = (object.tool !== undefined && object.tool !== null) ? Tool.fromPartial(object.tool) : undefined;
    message.updateMask = object.updateMask ?? undefined;
    return message;
  },
};

function createBaseDeleteToolRequest(): DeleteToolRequest {
  return { name: "", force: false };
}

export const DeleteToolRequest: MessageFns<DeleteToolRequest> = {
  encode(message: DeleteToolRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.force !== false) {
      writer.uint32(16).bool(message.force);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteToolRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteToolRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.force = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteToolRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      force: isSet(object.force) ? globalThis.Boolean(object.force) : false,
    };
  },

  toJSON(message: DeleteToolRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.force !== false) {
      obj.force = message.force;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteToolRequest>): DeleteToolRequest {
    return DeleteToolRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteToolRequest>): DeleteToolRequest {
    const message = createBaseDeleteToolRequest();
    message.name = object.name ?? "";
    message.force = object.force ?? false;
    return message;
  },
};

function createBaseTool(): Tool {
  return {
    name: "",
    displayName: "",
    description: "",
    openApiSpec: undefined,
    dataStoreSpec: undefined,
    extensionSpec: undefined,
    functionSpec: undefined,
    toolType: 0,
  };
}

export const Tool: MessageFns<Tool> = {
  encode(message: Tool, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.displayName !== "") {
      writer.uint32(18).string(message.displayName);
    }
    if (message.description !== "") {
      writer.uint32(26).string(message.description);
    }
    if (message.openApiSpec !== undefined) {
      Tool_OpenApiTool.encode(message.openApiSpec, writer.uint32(34).fork()).join();
    }
    if (message.dataStoreSpec !== undefined) {
      Tool_DataStoreTool.encode(message.dataStoreSpec, writer.uint32(66).fork()).join();
    }
    if (message.extensionSpec !== undefined) {
      Tool_ExtensionTool.encode(message.extensionSpec, writer.uint32(90).fork()).join();
    }
    if (message.functionSpec !== undefined) {
      Tool_FunctionTool.encode(message.functionSpec, writer.uint32(106).fork()).join();
    }
    if (message.toolType !== 0) {
      writer.uint32(96).int32(message.toolType);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Tool {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTool();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.displayName = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.description = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.openApiSpec = Tool_OpenApiTool.decode(reader, reader.uint32());
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.dataStoreSpec = Tool_DataStoreTool.decode(reader, reader.uint32());
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.extensionSpec = Tool_ExtensionTool.decode(reader, reader.uint32());
          continue;
        case 13:
          if (tag !== 106) {
            break;
          }

          message.functionSpec = Tool_FunctionTool.decode(reader, reader.uint32());
          continue;
        case 12:
          if (tag !== 96) {
            break;
          }

          message.toolType = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Tool {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      displayName: isSet(object.displayName) ? globalThis.String(object.displayName) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      openApiSpec: isSet(object.openApiSpec) ? Tool_OpenApiTool.fromJSON(object.openApiSpec) : undefined,
      dataStoreSpec: isSet(object.dataStoreSpec) ? Tool_DataStoreTool.fromJSON(object.dataStoreSpec) : undefined,
      extensionSpec: isSet(object.extensionSpec) ? Tool_ExtensionTool.fromJSON(object.extensionSpec) : undefined,
      functionSpec: isSet(object.functionSpec) ? Tool_FunctionTool.fromJSON(object.functionSpec) : undefined,
      toolType: isSet(object.toolType) ? tool_ToolTypeFromJSON(object.toolType) : 0,
    };
  },

  toJSON(message: Tool): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.displayName !== "") {
      obj.displayName = message.displayName;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.openApiSpec !== undefined) {
      obj.openApiSpec = Tool_OpenApiTool.toJSON(message.openApiSpec);
    }
    if (message.dataStoreSpec !== undefined) {
      obj.dataStoreSpec = Tool_DataStoreTool.toJSON(message.dataStoreSpec);
    }
    if (message.extensionSpec !== undefined) {
      obj.extensionSpec = Tool_ExtensionTool.toJSON(message.extensionSpec);
    }
    if (message.functionSpec !== undefined) {
      obj.functionSpec = Tool_FunctionTool.toJSON(message.functionSpec);
    }
    if (message.toolType !== 0) {
      obj.toolType = tool_ToolTypeToJSON(message.toolType);
    }
    return obj;
  },

  create(base?: DeepPartial<Tool>): Tool {
    return Tool.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Tool>): Tool {
    const message = createBaseTool();
    message.name = object.name ?? "";
    message.displayName = object.displayName ?? "";
    message.description = object.description ?? "";
    message.openApiSpec = (object.openApiSpec !== undefined && object.openApiSpec !== null)
      ? Tool_OpenApiTool.fromPartial(object.openApiSpec)
      : undefined;
    message.dataStoreSpec = (object.dataStoreSpec !== undefined && object.dataStoreSpec !== null)
      ? Tool_DataStoreTool.fromPartial(object.dataStoreSpec)
      : undefined;
    message.extensionSpec = (object.extensionSpec !== undefined && object.extensionSpec !== null)
      ? Tool_ExtensionTool.fromPartial(object.extensionSpec)
      : undefined;
    message.functionSpec = (object.functionSpec !== undefined && object.functionSpec !== null)
      ? Tool_FunctionTool.fromPartial(object.functionSpec)
      : undefined;
    message.toolType = object.toolType ?? 0;
    return message;
  },
};

function createBaseTool_OpenApiTool(): Tool_OpenApiTool {
  return { textSchema: undefined, authentication: undefined, tlsConfig: undefined, serviceDirectoryConfig: undefined };
}

export const Tool_OpenApiTool: MessageFns<Tool_OpenApiTool> = {
  encode(message: Tool_OpenApiTool, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.textSchema !== undefined) {
      writer.uint32(10).string(message.textSchema);
    }
    if (message.authentication !== undefined) {
      Tool_Authentication.encode(message.authentication, writer.uint32(18).fork()).join();
    }
    if (message.tlsConfig !== undefined) {
      Tool_TLSConfig.encode(message.tlsConfig, writer.uint32(26).fork()).join();
    }
    if (message.serviceDirectoryConfig !== undefined) {
      Tool_ServiceDirectoryConfig.encode(message.serviceDirectoryConfig, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Tool_OpenApiTool {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTool_OpenApiTool();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.textSchema = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.authentication = Tool_Authentication.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.tlsConfig = Tool_TLSConfig.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.serviceDirectoryConfig = Tool_ServiceDirectoryConfig.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Tool_OpenApiTool {
    return {
      textSchema: isSet(object.textSchema) ? globalThis.String(object.textSchema) : undefined,
      authentication: isSet(object.authentication) ? Tool_Authentication.fromJSON(object.authentication) : undefined,
      tlsConfig: isSet(object.tlsConfig) ? Tool_TLSConfig.fromJSON(object.tlsConfig) : undefined,
      serviceDirectoryConfig: isSet(object.serviceDirectoryConfig)
        ? Tool_ServiceDirectoryConfig.fromJSON(object.serviceDirectoryConfig)
        : undefined,
    };
  },

  toJSON(message: Tool_OpenApiTool): unknown {
    const obj: any = {};
    if (message.textSchema !== undefined) {
      obj.textSchema = message.textSchema;
    }
    if (message.authentication !== undefined) {
      obj.authentication = Tool_Authentication.toJSON(message.authentication);
    }
    if (message.tlsConfig !== undefined) {
      obj.tlsConfig = Tool_TLSConfig.toJSON(message.tlsConfig);
    }
    if (message.serviceDirectoryConfig !== undefined) {
      obj.serviceDirectoryConfig = Tool_ServiceDirectoryConfig.toJSON(message.serviceDirectoryConfig);
    }
    return obj;
  },

  create(base?: DeepPartial<Tool_OpenApiTool>): Tool_OpenApiTool {
    return Tool_OpenApiTool.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Tool_OpenApiTool>): Tool_OpenApiTool {
    const message = createBaseTool_OpenApiTool();
    message.textSchema = object.textSchema ?? undefined;
    message.authentication = (object.authentication !== undefined && object.authentication !== null)
      ? Tool_Authentication.fromPartial(object.authentication)
      : undefined;
    message.tlsConfig = (object.tlsConfig !== undefined && object.tlsConfig !== null)
      ? Tool_TLSConfig.fromPartial(object.tlsConfig)
      : undefined;
    message.serviceDirectoryConfig =
      (object.serviceDirectoryConfig !== undefined && object.serviceDirectoryConfig !== null)
        ? Tool_ServiceDirectoryConfig.fromPartial(object.serviceDirectoryConfig)
        : undefined;
    return message;
  },
};

function createBaseTool_DataStoreTool(): Tool_DataStoreTool {
  return { dataStoreConnections: [], fallbackPrompt: undefined };
}

export const Tool_DataStoreTool: MessageFns<Tool_DataStoreTool> = {
  encode(message: Tool_DataStoreTool, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.dataStoreConnections) {
      DataStoreConnection.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.fallbackPrompt !== undefined) {
      Tool_DataStoreTool_FallbackPrompt.encode(message.fallbackPrompt, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Tool_DataStoreTool {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTool_DataStoreTool();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.dataStoreConnections.push(DataStoreConnection.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.fallbackPrompt = Tool_DataStoreTool_FallbackPrompt.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Tool_DataStoreTool {
    return {
      dataStoreConnections: globalThis.Array.isArray(object?.dataStoreConnections)
        ? object.dataStoreConnections.map((e: any) => DataStoreConnection.fromJSON(e))
        : [],
      fallbackPrompt: isSet(object.fallbackPrompt)
        ? Tool_DataStoreTool_FallbackPrompt.fromJSON(object.fallbackPrompt)
        : undefined,
    };
  },

  toJSON(message: Tool_DataStoreTool): unknown {
    const obj: any = {};
    if (message.dataStoreConnections?.length) {
      obj.dataStoreConnections = message.dataStoreConnections.map((e) => DataStoreConnection.toJSON(e));
    }
    if (message.fallbackPrompt !== undefined) {
      obj.fallbackPrompt = Tool_DataStoreTool_FallbackPrompt.toJSON(message.fallbackPrompt);
    }
    return obj;
  },

  create(base?: DeepPartial<Tool_DataStoreTool>): Tool_DataStoreTool {
    return Tool_DataStoreTool.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Tool_DataStoreTool>): Tool_DataStoreTool {
    const message = createBaseTool_DataStoreTool();
    message.dataStoreConnections = object.dataStoreConnections?.map((e) => DataStoreConnection.fromPartial(e)) || [];
    message.fallbackPrompt = (object.fallbackPrompt !== undefined && object.fallbackPrompt !== null)
      ? Tool_DataStoreTool_FallbackPrompt.fromPartial(object.fallbackPrompt)
      : undefined;
    return message;
  },
};

function createBaseTool_DataStoreTool_FallbackPrompt(): Tool_DataStoreTool_FallbackPrompt {
  return {};
}

export const Tool_DataStoreTool_FallbackPrompt: MessageFns<Tool_DataStoreTool_FallbackPrompt> = {
  encode(_: Tool_DataStoreTool_FallbackPrompt, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Tool_DataStoreTool_FallbackPrompt {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTool_DataStoreTool_FallbackPrompt();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): Tool_DataStoreTool_FallbackPrompt {
    return {};
  },

  toJSON(_: Tool_DataStoreTool_FallbackPrompt): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<Tool_DataStoreTool_FallbackPrompt>): Tool_DataStoreTool_FallbackPrompt {
    return Tool_DataStoreTool_FallbackPrompt.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<Tool_DataStoreTool_FallbackPrompt>): Tool_DataStoreTool_FallbackPrompt {
    const message = createBaseTool_DataStoreTool_FallbackPrompt();
    return message;
  },
};

function createBaseTool_ExtensionTool(): Tool_ExtensionTool {
  return { name: "" };
}

export const Tool_ExtensionTool: MessageFns<Tool_ExtensionTool> = {
  encode(message: Tool_ExtensionTool, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Tool_ExtensionTool {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTool_ExtensionTool();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Tool_ExtensionTool {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: Tool_ExtensionTool): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<Tool_ExtensionTool>): Tool_ExtensionTool {
    return Tool_ExtensionTool.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Tool_ExtensionTool>): Tool_ExtensionTool {
    const message = createBaseTool_ExtensionTool();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseTool_FunctionTool(): Tool_FunctionTool {
  return { inputSchema: undefined, outputSchema: undefined };
}

export const Tool_FunctionTool: MessageFns<Tool_FunctionTool> = {
  encode(message: Tool_FunctionTool, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.inputSchema !== undefined) {
      Struct.encode(Struct.wrap(message.inputSchema), writer.uint32(10).fork()).join();
    }
    if (message.outputSchema !== undefined) {
      Struct.encode(Struct.wrap(message.outputSchema), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Tool_FunctionTool {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTool_FunctionTool();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.inputSchema = Struct.unwrap(Struct.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.outputSchema = Struct.unwrap(Struct.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Tool_FunctionTool {
    return {
      inputSchema: isObject(object.inputSchema) ? object.inputSchema : undefined,
      outputSchema: isObject(object.outputSchema) ? object.outputSchema : undefined,
    };
  },

  toJSON(message: Tool_FunctionTool): unknown {
    const obj: any = {};
    if (message.inputSchema !== undefined) {
      obj.inputSchema = message.inputSchema;
    }
    if (message.outputSchema !== undefined) {
      obj.outputSchema = message.outputSchema;
    }
    return obj;
  },

  create(base?: DeepPartial<Tool_FunctionTool>): Tool_FunctionTool {
    return Tool_FunctionTool.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Tool_FunctionTool>): Tool_FunctionTool {
    const message = createBaseTool_FunctionTool();
    message.inputSchema = object.inputSchema ?? undefined;
    message.outputSchema = object.outputSchema ?? undefined;
    return message;
  },
};

function createBaseTool_Authentication(): Tool_Authentication {
  return { apiKeyConfig: undefined, oauthConfig: undefined, serviceAgentAuthConfig: undefined };
}

export const Tool_Authentication: MessageFns<Tool_Authentication> = {
  encode(message: Tool_Authentication, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.apiKeyConfig !== undefined) {
      Tool_Authentication_ApiKeyConfig.encode(message.apiKeyConfig, writer.uint32(10).fork()).join();
    }
    if (message.oauthConfig !== undefined) {
      Tool_Authentication_OAuthConfig.encode(message.oauthConfig, writer.uint32(18).fork()).join();
    }
    if (message.serviceAgentAuthConfig !== undefined) {
      Tool_Authentication_ServiceAgentAuthConfig.encode(message.serviceAgentAuthConfig, writer.uint32(26).fork())
        .join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Tool_Authentication {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTool_Authentication();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.apiKeyConfig = Tool_Authentication_ApiKeyConfig.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.oauthConfig = Tool_Authentication_OAuthConfig.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.serviceAgentAuthConfig = Tool_Authentication_ServiceAgentAuthConfig.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Tool_Authentication {
    return {
      apiKeyConfig: isSet(object.apiKeyConfig)
        ? Tool_Authentication_ApiKeyConfig.fromJSON(object.apiKeyConfig)
        : undefined,
      oauthConfig: isSet(object.oauthConfig) ? Tool_Authentication_OAuthConfig.fromJSON(object.oauthConfig) : undefined,
      serviceAgentAuthConfig: isSet(object.serviceAgentAuthConfig)
        ? Tool_Authentication_ServiceAgentAuthConfig.fromJSON(object.serviceAgentAuthConfig)
        : undefined,
    };
  },

  toJSON(message: Tool_Authentication): unknown {
    const obj: any = {};
    if (message.apiKeyConfig !== undefined) {
      obj.apiKeyConfig = Tool_Authentication_ApiKeyConfig.toJSON(message.apiKeyConfig);
    }
    if (message.oauthConfig !== undefined) {
      obj.oauthConfig = Tool_Authentication_OAuthConfig.toJSON(message.oauthConfig);
    }
    if (message.serviceAgentAuthConfig !== undefined) {
      obj.serviceAgentAuthConfig = Tool_Authentication_ServiceAgentAuthConfig.toJSON(message.serviceAgentAuthConfig);
    }
    return obj;
  },

  create(base?: DeepPartial<Tool_Authentication>): Tool_Authentication {
    return Tool_Authentication.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Tool_Authentication>): Tool_Authentication {
    const message = createBaseTool_Authentication();
    message.apiKeyConfig = (object.apiKeyConfig !== undefined && object.apiKeyConfig !== null)
      ? Tool_Authentication_ApiKeyConfig.fromPartial(object.apiKeyConfig)
      : undefined;
    message.oauthConfig = (object.oauthConfig !== undefined && object.oauthConfig !== null)
      ? Tool_Authentication_OAuthConfig.fromPartial(object.oauthConfig)
      : undefined;
    message.serviceAgentAuthConfig =
      (object.serviceAgentAuthConfig !== undefined && object.serviceAgentAuthConfig !== null)
        ? Tool_Authentication_ServiceAgentAuthConfig.fromPartial(object.serviceAgentAuthConfig)
        : undefined;
    return message;
  },
};

function createBaseTool_Authentication_ApiKeyConfig(): Tool_Authentication_ApiKeyConfig {
  return { keyName: "", apiKey: "", requestLocation: 0 };
}

export const Tool_Authentication_ApiKeyConfig: MessageFns<Tool_Authentication_ApiKeyConfig> = {
  encode(message: Tool_Authentication_ApiKeyConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.keyName !== "") {
      writer.uint32(10).string(message.keyName);
    }
    if (message.apiKey !== "") {
      writer.uint32(18).string(message.apiKey);
    }
    if (message.requestLocation !== 0) {
      writer.uint32(24).int32(message.requestLocation);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Tool_Authentication_ApiKeyConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTool_Authentication_ApiKeyConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.keyName = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.apiKey = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.requestLocation = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Tool_Authentication_ApiKeyConfig {
    return {
      keyName: isSet(object.keyName) ? globalThis.String(object.keyName) : "",
      apiKey: isSet(object.apiKey) ? globalThis.String(object.apiKey) : "",
      requestLocation: isSet(object.requestLocation)
        ? tool_Authentication_RequestLocationFromJSON(object.requestLocation)
        : 0,
    };
  },

  toJSON(message: Tool_Authentication_ApiKeyConfig): unknown {
    const obj: any = {};
    if (message.keyName !== "") {
      obj.keyName = message.keyName;
    }
    if (message.apiKey !== "") {
      obj.apiKey = message.apiKey;
    }
    if (message.requestLocation !== 0) {
      obj.requestLocation = tool_Authentication_RequestLocationToJSON(message.requestLocation);
    }
    return obj;
  },

  create(base?: DeepPartial<Tool_Authentication_ApiKeyConfig>): Tool_Authentication_ApiKeyConfig {
    return Tool_Authentication_ApiKeyConfig.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Tool_Authentication_ApiKeyConfig>): Tool_Authentication_ApiKeyConfig {
    const message = createBaseTool_Authentication_ApiKeyConfig();
    message.keyName = object.keyName ?? "";
    message.apiKey = object.apiKey ?? "";
    message.requestLocation = object.requestLocation ?? 0;
    return message;
  },
};

function createBaseTool_Authentication_OAuthConfig(): Tool_Authentication_OAuthConfig {
  return { oauthGrantType: 0, clientId: "", clientSecret: "", tokenEndpoint: "" };
}

export const Tool_Authentication_OAuthConfig: MessageFns<Tool_Authentication_OAuthConfig> = {
  encode(message: Tool_Authentication_OAuthConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.oauthGrantType !== 0) {
      writer.uint32(8).int32(message.oauthGrantType);
    }
    if (message.clientId !== "") {
      writer.uint32(18).string(message.clientId);
    }
    if (message.clientSecret !== "") {
      writer.uint32(26).string(message.clientSecret);
    }
    if (message.tokenEndpoint !== "") {
      writer.uint32(34).string(message.tokenEndpoint);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Tool_Authentication_OAuthConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTool_Authentication_OAuthConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.oauthGrantType = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.clientId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.clientSecret = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.tokenEndpoint = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Tool_Authentication_OAuthConfig {
    return {
      oauthGrantType: isSet(object.oauthGrantType)
        ? tool_Authentication_OAuthConfig_OauthGrantTypeFromJSON(object.oauthGrantType)
        : 0,
      clientId: isSet(object.clientId) ? globalThis.String(object.clientId) : "",
      clientSecret: isSet(object.clientSecret) ? globalThis.String(object.clientSecret) : "",
      tokenEndpoint: isSet(object.tokenEndpoint) ? globalThis.String(object.tokenEndpoint) : "",
    };
  },

  toJSON(message: Tool_Authentication_OAuthConfig): unknown {
    const obj: any = {};
    if (message.oauthGrantType !== 0) {
      obj.oauthGrantType = tool_Authentication_OAuthConfig_OauthGrantTypeToJSON(message.oauthGrantType);
    }
    if (message.clientId !== "") {
      obj.clientId = message.clientId;
    }
    if (message.clientSecret !== "") {
      obj.clientSecret = message.clientSecret;
    }
    if (message.tokenEndpoint !== "") {
      obj.tokenEndpoint = message.tokenEndpoint;
    }
    return obj;
  },

  create(base?: DeepPartial<Tool_Authentication_OAuthConfig>): Tool_Authentication_OAuthConfig {
    return Tool_Authentication_OAuthConfig.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Tool_Authentication_OAuthConfig>): Tool_Authentication_OAuthConfig {
    const message = createBaseTool_Authentication_OAuthConfig();
    message.oauthGrantType = object.oauthGrantType ?? 0;
    message.clientId = object.clientId ?? "";
    message.clientSecret = object.clientSecret ?? "";
    message.tokenEndpoint = object.tokenEndpoint ?? "";
    return message;
  },
};

function createBaseTool_Authentication_ServiceAgentAuthConfig(): Tool_Authentication_ServiceAgentAuthConfig {
  return {};
}

export const Tool_Authentication_ServiceAgentAuthConfig: MessageFns<Tool_Authentication_ServiceAgentAuthConfig> = {
  encode(_: Tool_Authentication_ServiceAgentAuthConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Tool_Authentication_ServiceAgentAuthConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTool_Authentication_ServiceAgentAuthConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): Tool_Authentication_ServiceAgentAuthConfig {
    return {};
  },

  toJSON(_: Tool_Authentication_ServiceAgentAuthConfig): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<Tool_Authentication_ServiceAgentAuthConfig>): Tool_Authentication_ServiceAgentAuthConfig {
    return Tool_Authentication_ServiceAgentAuthConfig.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<Tool_Authentication_ServiceAgentAuthConfig>): Tool_Authentication_ServiceAgentAuthConfig {
    const message = createBaseTool_Authentication_ServiceAgentAuthConfig();
    return message;
  },
};

function createBaseTool_TLSConfig(): Tool_TLSConfig {
  return { caCerts: [] };
}

export const Tool_TLSConfig: MessageFns<Tool_TLSConfig> = {
  encode(message: Tool_TLSConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.caCerts) {
      Tool_TLSConfig_CACert.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Tool_TLSConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTool_TLSConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.caCerts.push(Tool_TLSConfig_CACert.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Tool_TLSConfig {
    return {
      caCerts: globalThis.Array.isArray(object?.caCerts)
        ? object.caCerts.map((e: any) => Tool_TLSConfig_CACert.fromJSON(e))
        : [],
    };
  },

  toJSON(message: Tool_TLSConfig): unknown {
    const obj: any = {};
    if (message.caCerts?.length) {
      obj.caCerts = message.caCerts.map((e) => Tool_TLSConfig_CACert.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<Tool_TLSConfig>): Tool_TLSConfig {
    return Tool_TLSConfig.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Tool_TLSConfig>): Tool_TLSConfig {
    const message = createBaseTool_TLSConfig();
    message.caCerts = object.caCerts?.map((e) => Tool_TLSConfig_CACert.fromPartial(e)) || [];
    return message;
  },
};

function createBaseTool_TLSConfig_CACert(): Tool_TLSConfig_CACert {
  return { displayName: "", cert: Buffer.alloc(0) };
}

export const Tool_TLSConfig_CACert: MessageFns<Tool_TLSConfig_CACert> = {
  encode(message: Tool_TLSConfig_CACert, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.displayName !== "") {
      writer.uint32(10).string(message.displayName);
    }
    if (message.cert.length !== 0) {
      writer.uint32(18).bytes(message.cert);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Tool_TLSConfig_CACert {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTool_TLSConfig_CACert();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.displayName = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.cert = Buffer.from(reader.bytes());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Tool_TLSConfig_CACert {
    return {
      displayName: isSet(object.displayName) ? globalThis.String(object.displayName) : "",
      cert: isSet(object.cert) ? Buffer.from(bytesFromBase64(object.cert)) : Buffer.alloc(0),
    };
  },

  toJSON(message: Tool_TLSConfig_CACert): unknown {
    const obj: any = {};
    if (message.displayName !== "") {
      obj.displayName = message.displayName;
    }
    if (message.cert.length !== 0) {
      obj.cert = base64FromBytes(message.cert);
    }
    return obj;
  },

  create(base?: DeepPartial<Tool_TLSConfig_CACert>): Tool_TLSConfig_CACert {
    return Tool_TLSConfig_CACert.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Tool_TLSConfig_CACert>): Tool_TLSConfig_CACert {
    const message = createBaseTool_TLSConfig_CACert();
    message.displayName = object.displayName ?? "";
    message.cert = object.cert ?? Buffer.alloc(0);
    return message;
  },
};

function createBaseTool_ServiceDirectoryConfig(): Tool_ServiceDirectoryConfig {
  return { service: "" };
}

export const Tool_ServiceDirectoryConfig: MessageFns<Tool_ServiceDirectoryConfig> = {
  encode(message: Tool_ServiceDirectoryConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.service !== "") {
      writer.uint32(10).string(message.service);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Tool_ServiceDirectoryConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTool_ServiceDirectoryConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.service = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Tool_ServiceDirectoryConfig {
    return { service: isSet(object.service) ? globalThis.String(object.service) : "" };
  },

  toJSON(message: Tool_ServiceDirectoryConfig): unknown {
    const obj: any = {};
    if (message.service !== "") {
      obj.service = message.service;
    }
    return obj;
  },

  create(base?: DeepPartial<Tool_ServiceDirectoryConfig>): Tool_ServiceDirectoryConfig {
    return Tool_ServiceDirectoryConfig.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Tool_ServiceDirectoryConfig>): Tool_ServiceDirectoryConfig {
    const message = createBaseTool_ServiceDirectoryConfig();
    message.service = object.service ?? "";
    return message;
  },
};

function createBaseExportToolsMetadata(): ExportToolsMetadata {
  return {};
}

export const ExportToolsMetadata: MessageFns<ExportToolsMetadata> = {
  encode(_: ExportToolsMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ExportToolsMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseExportToolsMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): ExportToolsMetadata {
    return {};
  },

  toJSON(_: ExportToolsMetadata): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<ExportToolsMetadata>): ExportToolsMetadata {
    return ExportToolsMetadata.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<ExportToolsMetadata>): ExportToolsMetadata {
    const message = createBaseExportToolsMetadata();
    return message;
  },
};

/** Service for managing [Tools][google.cloud.dialogflow.cx.v3beta1.Tool]. */
export type ToolsDefinition = typeof ToolsDefinition;
export const ToolsDefinition = {
  name: "Tools",
  fullName: "google.cloud.dialogflow.cx.v3beta1.Tools",
  methods: {
    /**
     * Creates a [Tool][google.cloud.dialogflow.cx.v3beta1.Tool] in the specified
     * agent.
     */
    createTool: {
      name: "CreateTool",
      requestType: CreateToolRequest,
      requestStream: false,
      responseType: Tool,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([11, 112, 97, 114, 101, 110, 116, 44, 116, 111, 111, 108])],
          578365826: [
            Buffer.from([
              63,
              58,
              4,
              116,
              111,
              111,
              108,
              34,
              55,
              47,
              118,
              51,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              103,
              101,
              110,
              116,
              115,
              47,
              42,
              125,
              47,
              116,
              111,
              111,
              108,
              115,
            ]),
          ],
        },
      },
    },
    /**
     * Returns a list of [Tools][google.cloud.dialogflow.cx.v3beta1.Tool] in the
     * specified agent.
     */
    listTools: {
      name: "ListTools",
      requestType: ListToolsRequest,
      requestStream: false,
      responseType: ListToolsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              57,
              18,
              55,
              47,
              118,
              51,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              103,
              101,
              110,
              116,
              115,
              47,
              42,
              125,
              47,
              116,
              111,
              111,
              108,
              115,
            ]),
          ],
        },
      },
    },
    /** Exports the selected tools. */
    exportTools: {
      name: "ExportTools",
      requestType: ExportToolsRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              42,
              10,
              19,
              69,
              120,
              112,
              111,
              114,
              116,
              84,
              111,
              111,
              108,
              115,
              82,
              101,
              115,
              112,
              111,
              110,
              115,
              101,
              18,
              19,
              69,
              120,
              112,
              111,
              114,
              116,
              84,
              111,
              111,
              108,
              115,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          578365826: [
            Buffer.from([
              67,
              58,
              1,
              42,
              34,
              62,
              47,
              118,
              51,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              103,
              101,
              110,
              116,
              115,
              47,
              42,
              125,
              47,
              116,
              111,
              111,
              108,
              115,
              58,
              101,
              120,
              112,
              111,
              114,
              116,
            ]),
          ],
        },
      },
    },
    /** Retrieves the specified [Tool][google.cloud.dialogflow.cx.v3beta1.Tool]. */
    getTool: {
      name: "GetTool",
      requestType: GetToolRequest,
      requestStream: false,
      responseType: Tool,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              57,
              18,
              55,
              47,
              118,
              51,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              103,
              101,
              110,
              116,
              115,
              47,
              42,
              47,
              116,
              111,
              111,
              108,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Update the specified [Tool][google.cloud.dialogflow.cx.v3beta1.Tool]. */
    updateTool: {
      name: "UpdateTool",
      requestType: UpdateToolRequest,
      requestStream: false,
      responseType: Tool,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([16, 116, 111, 111, 108, 44, 117, 112, 100, 97, 116, 101, 95, 109, 97, 115, 107])],
          578365826: [
            Buffer.from([
              68,
              58,
              4,
              116,
              111,
              111,
              108,
              50,
              60,
              47,
              118,
              51,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              116,
              111,
              111,
              108,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              103,
              101,
              110,
              116,
              115,
              47,
              42,
              47,
              116,
              111,
              111,
              108,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Deletes a specified [Tool][google.cloud.dialogflow.cx.v3beta1.Tool]. */
    deleteTool: {
      name: "DeleteTool",
      requestType: DeleteToolRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              57,
              42,
              55,
              47,
              118,
              51,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              103,
              101,
              110,
              116,
              115,
              47,
              42,
              47,
              116,
              111,
              111,
              108,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface ToolsServiceImplementation<CallContextExt = {}> {
  /**
   * Creates a [Tool][google.cloud.dialogflow.cx.v3beta1.Tool] in the specified
   * agent.
   */
  createTool(request: CreateToolRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Tool>>;
  /**
   * Returns a list of [Tools][google.cloud.dialogflow.cx.v3beta1.Tool] in the
   * specified agent.
   */
  listTools(request: ListToolsRequest, context: CallContext & CallContextExt): Promise<DeepPartial<ListToolsResponse>>;
  /** Exports the selected tools. */
  exportTools(request: ExportToolsRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Operation>>;
  /** Retrieves the specified [Tool][google.cloud.dialogflow.cx.v3beta1.Tool]. */
  getTool(request: GetToolRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Tool>>;
  /** Update the specified [Tool][google.cloud.dialogflow.cx.v3beta1.Tool]. */
  updateTool(request: UpdateToolRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Tool>>;
  /** Deletes a specified [Tool][google.cloud.dialogflow.cx.v3beta1.Tool]. */
  deleteTool(request: DeleteToolRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Empty>>;
}

export interface ToolsClient<CallOptionsExt = {}> {
  /**
   * Creates a [Tool][google.cloud.dialogflow.cx.v3beta1.Tool] in the specified
   * agent.
   */
  createTool(request: DeepPartial<CreateToolRequest>, options?: CallOptions & CallOptionsExt): Promise<Tool>;
  /**
   * Returns a list of [Tools][google.cloud.dialogflow.cx.v3beta1.Tool] in the
   * specified agent.
   */
  listTools(request: DeepPartial<ListToolsRequest>, options?: CallOptions & CallOptionsExt): Promise<ListToolsResponse>;
  /** Exports the selected tools. */
  exportTools(request: DeepPartial<ExportToolsRequest>, options?: CallOptions & CallOptionsExt): Promise<Operation>;
  /** Retrieves the specified [Tool][google.cloud.dialogflow.cx.v3beta1.Tool]. */
  getTool(request: DeepPartial<GetToolRequest>, options?: CallOptions & CallOptionsExt): Promise<Tool>;
  /** Update the specified [Tool][google.cloud.dialogflow.cx.v3beta1.Tool]. */
  updateTool(request: DeepPartial<UpdateToolRequest>, options?: CallOptions & CallOptionsExt): Promise<Tool>;
  /** Deletes a specified [Tool][google.cloud.dialogflow.cx.v3beta1.Tool]. */
  deleteTool(request: DeepPartial<DeleteToolRequest>, options?: CallOptions & CallOptionsExt): Promise<Empty>;
}

function bytesFromBase64(b64: string): Uint8Array {
  return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
}

function base64FromBytes(arr: Uint8Array): string {
  return globalThis.Buffer.from(arr).toString("base64");
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
