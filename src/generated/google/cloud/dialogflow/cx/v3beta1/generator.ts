// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/dialogflow/cx/v3beta1/generator.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { Empty } from "../../../../protobuf/empty.js";
import { FieldMask } from "../../../../protobuf/field_mask.js";
import { LlmModelSettings } from "./generative_settings.js";

export const protobufPackage = "google.cloud.dialogflow.cx.v3beta1";

/**
 * Generators contain prompt to be sent to the LLM model to generate text. The
 * prompt can contain parameters which will be resolved before calling the
 * model. It can optionally contain banned phrases to ensure the model responses
 * are safe.
 */
export interface Generator {
  /**
   * The unique identifier of the generator.
   * Must be set for the
   * [Generators.UpdateGenerator][google.cloud.dialogflow.cx.v3beta1.Generators.UpdateGenerator]
   * method. [Generators.CreateGenerate][] populates the name automatically.
   * Format: `projects/<Project ID>/locations/<Location ID>/agents/<Agent
   * ID>/generators/<Generator ID>`.
   */
  name: string;
  /**
   * Required. The human-readable name of the generator, unique within the
   * agent. The prompt contains pre-defined parameters such as $conversation,
   * $last-user-utterance, etc. populated by Dialogflow. It can also contain
   * custom placeholders which will be resolved during fulfillment.
   */
  displayName: string;
  /** Required. Prompt for the LLM model. */
  promptText:
    | Phrase
    | undefined;
  /** Optional. List of custom placeholders in the prompt text. */
  placeholders: Generator_Placeholder[];
  /** The LLM model settings. */
  llmModelSettings: LlmModelSettings | undefined;
}

/** Represents a custom placeholder in the prompt text. */
export interface Generator_Placeholder {
  /** Unique ID used to map custom placeholder to parameters in fulfillment. */
  id: string;
  /** Custom placeholder value in the prompt text. */
  name: string;
}

/** Text input which can be used for prompt or banned phrases. */
export interface Phrase {
  /** Required. Text input which can be used for prompt or banned phrases. */
  text: string;
}

/**
 * The request message for
 * [Generators.ListGenerators][google.cloud.dialogflow.cx.v3beta1.Generators.ListGenerators].
 */
export interface ListGeneratorsRequest {
  /**
   * Required. The agent to list all generators for.
   * Format: `projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>`.
   */
  parent: string;
  /** The language to list generators for. */
  languageCode: string;
  /**
   * The maximum number of items to return in a single page. By default 100 and
   * at most 1000.
   */
  pageSize: number;
  /** The next_page_token value returned from a previous list request. */
  pageToken: string;
}

/**
 * The response message for
 * [Generators.ListGenerators][google.cloud.dialogflow.cx.v3beta1.Generators.ListGenerators].
 */
export interface ListGeneratorsResponse {
  /**
   * The list of generators. There will be a maximum number of items returned
   * based on the page_size field in the request.
   */
  generators: Generator[];
  /**
   * Token to retrieve the next page of results, or empty if there are no more
   * results in the list.
   */
  nextPageToken: string;
}

/**
 * The request message for
 * [Generators.GetGenerator][google.cloud.dialogflow.cx.v3beta1.Generators.GetGenerator].
 */
export interface GetGeneratorRequest {
  /**
   * Required. The name of the generator.
   * Format: `projects/<Project ID>/locations/<Location ID>/agents/<Agent
   * ID>/generators/<Generator ID>`.
   */
  name: string;
  /** The language to list generators for. */
  languageCode: string;
}

/**
 * The request message for
 * [Generators.CreateGenerator][google.cloud.dialogflow.cx.v3beta1.Generators.CreateGenerator].
 */
export interface CreateGeneratorRequest {
  /**
   * Required. The agent to create a generator for.
   * Format: `projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>`.
   */
  parent: string;
  /** Required. The generator to create. */
  generator:
    | Generator
    | undefined;
  /**
   * The language to create generators for the following fields:
   * *  `Generator.prompt_text.text`
   * If not specified, the agent's default language is used.
   */
  languageCode: string;
}

/**
 * The request message for
 * [Generators.UpdateGenerator][google.cloud.dialogflow.cx.v3beta1.Generators.UpdateGenerator].
 */
export interface UpdateGeneratorRequest {
  /** Required. The generator to update. */
  generator:
    | Generator
    | undefined;
  /** The language to list generators for. */
  languageCode: string;
  /**
   * The mask to control which fields get updated. If the mask is not present,
   * all fields will be updated.
   */
  updateMask: string[] | undefined;
}

/**
 * The request message for
 * [Generators.DeleteGenerator][google.cloud.dialogflow.cx.v3beta1.Generators.DeleteGenerator].
 */
export interface DeleteGeneratorRequest {
  /**
   * Required. The name of the generator to delete.
   * Format: `projects/<Project ID>/locations/<Location ID>/agents/<Agent
   * ID>/generators/<Generator ID>`.
   */
  name: string;
  /**
   * This field has no effect for generators not being used.
   * For generators that are used by pages/flows/transition route groups:
   *
   * *  If `force` is set to false, an error will be returned with message
   *    indicating the referenced resources.
   * *  If `force` is set to true, Dialogflow will remove the generator, as well
   *    as any references to the generator (i.e.
   *    [Generator][Fulfillment.generator]) in fulfillments.
   */
  force: boolean;
}

function createBaseGenerator(): Generator {
  return { name: "", displayName: "", promptText: undefined, placeholders: [], llmModelSettings: undefined };
}

export const Generator: MessageFns<Generator> = {
  encode(message: Generator, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.displayName !== "") {
      writer.uint32(18).string(message.displayName);
    }
    if (message.promptText !== undefined) {
      Phrase.encode(message.promptText, writer.uint32(26).fork()).join();
    }
    for (const v of message.placeholders) {
      Generator_Placeholder.encode(v!, writer.uint32(42).fork()).join();
    }
    if (message.llmModelSettings !== undefined) {
      LlmModelSettings.encode(message.llmModelSettings, writer.uint32(74).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Generator {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGenerator();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.displayName = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.promptText = Phrase.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.placeholders.push(Generator_Placeholder.decode(reader, reader.uint32()));
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.llmModelSettings = LlmModelSettings.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Generator {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      displayName: isSet(object.displayName) ? globalThis.String(object.displayName) : "",
      promptText: isSet(object.promptText) ? Phrase.fromJSON(object.promptText) : undefined,
      placeholders: globalThis.Array.isArray(object?.placeholders)
        ? object.placeholders.map((e: any) => Generator_Placeholder.fromJSON(e))
        : [],
      llmModelSettings: isSet(object.llmModelSettings) ? LlmModelSettings.fromJSON(object.llmModelSettings) : undefined,
    };
  },

  toJSON(message: Generator): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.displayName !== "") {
      obj.displayName = message.displayName;
    }
    if (message.promptText !== undefined) {
      obj.promptText = Phrase.toJSON(message.promptText);
    }
    if (message.placeholders?.length) {
      obj.placeholders = message.placeholders.map((e) => Generator_Placeholder.toJSON(e));
    }
    if (message.llmModelSettings !== undefined) {
      obj.llmModelSettings = LlmModelSettings.toJSON(message.llmModelSettings);
    }
    return obj;
  },

  create(base?: DeepPartial<Generator>): Generator {
    return Generator.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Generator>): Generator {
    const message = createBaseGenerator();
    message.name = object.name ?? "";
    message.displayName = object.displayName ?? "";
    message.promptText = (object.promptText !== undefined && object.promptText !== null)
      ? Phrase.fromPartial(object.promptText)
      : undefined;
    message.placeholders = object.placeholders?.map((e) => Generator_Placeholder.fromPartial(e)) || [];
    message.llmModelSettings = (object.llmModelSettings !== undefined && object.llmModelSettings !== null)
      ? LlmModelSettings.fromPartial(object.llmModelSettings)
      : undefined;
    return message;
  },
};

function createBaseGenerator_Placeholder(): Generator_Placeholder {
  return { id: "", name: "" };
}

export const Generator_Placeholder: MessageFns<Generator_Placeholder> = {
  encode(message: Generator_Placeholder, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Generator_Placeholder {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGenerator_Placeholder();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Generator_Placeholder {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
    };
  },

  toJSON(message: Generator_Placeholder): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<Generator_Placeholder>): Generator_Placeholder {
    return Generator_Placeholder.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Generator_Placeholder>): Generator_Placeholder {
    const message = createBaseGenerator_Placeholder();
    message.id = object.id ?? "";
    message.name = object.name ?? "";
    return message;
  },
};

function createBasePhrase(): Phrase {
  return { text: "" };
}

export const Phrase: MessageFns<Phrase> = {
  encode(message: Phrase, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.text !== "") {
      writer.uint32(10).string(message.text);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Phrase {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePhrase();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.text = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Phrase {
    return { text: isSet(object.text) ? globalThis.String(object.text) : "" };
  },

  toJSON(message: Phrase): unknown {
    const obj: any = {};
    if (message.text !== "") {
      obj.text = message.text;
    }
    return obj;
  },

  create(base?: DeepPartial<Phrase>): Phrase {
    return Phrase.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Phrase>): Phrase {
    const message = createBasePhrase();
    message.text = object.text ?? "";
    return message;
  },
};

function createBaseListGeneratorsRequest(): ListGeneratorsRequest {
  return { parent: "", languageCode: "", pageSize: 0, pageToken: "" };
}

export const ListGeneratorsRequest: MessageFns<ListGeneratorsRequest> = {
  encode(message: ListGeneratorsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.languageCode !== "") {
      writer.uint32(18).string(message.languageCode);
    }
    if (message.pageSize !== 0) {
      writer.uint32(24).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(34).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListGeneratorsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListGeneratorsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.languageCode = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListGeneratorsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      languageCode: isSet(object.languageCode) ? globalThis.String(object.languageCode) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: ListGeneratorsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.languageCode !== "") {
      obj.languageCode = message.languageCode;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListGeneratorsRequest>): ListGeneratorsRequest {
    return ListGeneratorsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListGeneratorsRequest>): ListGeneratorsRequest {
    const message = createBaseListGeneratorsRequest();
    message.parent = object.parent ?? "";
    message.languageCode = object.languageCode ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseListGeneratorsResponse(): ListGeneratorsResponse {
  return { generators: [], nextPageToken: "" };
}

export const ListGeneratorsResponse: MessageFns<ListGeneratorsResponse> = {
  encode(message: ListGeneratorsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.generators) {
      Generator.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListGeneratorsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListGeneratorsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.generators.push(Generator.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListGeneratorsResponse {
    return {
      generators: globalThis.Array.isArray(object?.generators)
        ? object.generators.map((e: any) => Generator.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListGeneratorsResponse): unknown {
    const obj: any = {};
    if (message.generators?.length) {
      obj.generators = message.generators.map((e) => Generator.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListGeneratorsResponse>): ListGeneratorsResponse {
    return ListGeneratorsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListGeneratorsResponse>): ListGeneratorsResponse {
    const message = createBaseListGeneratorsResponse();
    message.generators = object.generators?.map((e) => Generator.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseGetGeneratorRequest(): GetGeneratorRequest {
  return { name: "", languageCode: "" };
}

export const GetGeneratorRequest: MessageFns<GetGeneratorRequest> = {
  encode(message: GetGeneratorRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.languageCode !== "") {
      writer.uint32(18).string(message.languageCode);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetGeneratorRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetGeneratorRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.languageCode = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetGeneratorRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      languageCode: isSet(object.languageCode) ? globalThis.String(object.languageCode) : "",
    };
  },

  toJSON(message: GetGeneratorRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.languageCode !== "") {
      obj.languageCode = message.languageCode;
    }
    return obj;
  },

  create(base?: DeepPartial<GetGeneratorRequest>): GetGeneratorRequest {
    return GetGeneratorRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetGeneratorRequest>): GetGeneratorRequest {
    const message = createBaseGetGeneratorRequest();
    message.name = object.name ?? "";
    message.languageCode = object.languageCode ?? "";
    return message;
  },
};

function createBaseCreateGeneratorRequest(): CreateGeneratorRequest {
  return { parent: "", generator: undefined, languageCode: "" };
}

export const CreateGeneratorRequest: MessageFns<CreateGeneratorRequest> = {
  encode(message: CreateGeneratorRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.generator !== undefined) {
      Generator.encode(message.generator, writer.uint32(18).fork()).join();
    }
    if (message.languageCode !== "") {
      writer.uint32(26).string(message.languageCode);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateGeneratorRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateGeneratorRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.generator = Generator.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.languageCode = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateGeneratorRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      generator: isSet(object.generator) ? Generator.fromJSON(object.generator) : undefined,
      languageCode: isSet(object.languageCode) ? globalThis.String(object.languageCode) : "",
    };
  },

  toJSON(message: CreateGeneratorRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.generator !== undefined) {
      obj.generator = Generator.toJSON(message.generator);
    }
    if (message.languageCode !== "") {
      obj.languageCode = message.languageCode;
    }
    return obj;
  },

  create(base?: DeepPartial<CreateGeneratorRequest>): CreateGeneratorRequest {
    return CreateGeneratorRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateGeneratorRequest>): CreateGeneratorRequest {
    const message = createBaseCreateGeneratorRequest();
    message.parent = object.parent ?? "";
    message.generator = (object.generator !== undefined && object.generator !== null)
      ? Generator.fromPartial(object.generator)
      : undefined;
    message.languageCode = object.languageCode ?? "";
    return message;
  },
};

function createBaseUpdateGeneratorRequest(): UpdateGeneratorRequest {
  return { generator: undefined, languageCode: "", updateMask: undefined };
}

export const UpdateGeneratorRequest: MessageFns<UpdateGeneratorRequest> = {
  encode(message: UpdateGeneratorRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.generator !== undefined) {
      Generator.encode(message.generator, writer.uint32(10).fork()).join();
    }
    if (message.languageCode !== "") {
      writer.uint32(18).string(message.languageCode);
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateGeneratorRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateGeneratorRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.generator = Generator.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.languageCode = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateGeneratorRequest {
    return {
      generator: isSet(object.generator) ? Generator.fromJSON(object.generator) : undefined,
      languageCode: isSet(object.languageCode) ? globalThis.String(object.languageCode) : "",
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
    };
  },

  toJSON(message: UpdateGeneratorRequest): unknown {
    const obj: any = {};
    if (message.generator !== undefined) {
      obj.generator = Generator.toJSON(message.generator);
    }
    if (message.languageCode !== "") {
      obj.languageCode = message.languageCode;
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateGeneratorRequest>): UpdateGeneratorRequest {
    return UpdateGeneratorRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateGeneratorRequest>): UpdateGeneratorRequest {
    const message = createBaseUpdateGeneratorRequest();
    message.generator = (object.generator !== undefined && object.generator !== null)
      ? Generator.fromPartial(object.generator)
      : undefined;
    message.languageCode = object.languageCode ?? "";
    message.updateMask = object.updateMask ?? undefined;
    return message;
  },
};

function createBaseDeleteGeneratorRequest(): DeleteGeneratorRequest {
  return { name: "", force: false };
}

export const DeleteGeneratorRequest: MessageFns<DeleteGeneratorRequest> = {
  encode(message: DeleteGeneratorRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.force !== false) {
      writer.uint32(16).bool(message.force);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteGeneratorRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteGeneratorRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.force = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteGeneratorRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      force: isSet(object.force) ? globalThis.Boolean(object.force) : false,
    };
  },

  toJSON(message: DeleteGeneratorRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.force !== false) {
      obj.force = message.force;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteGeneratorRequest>): DeleteGeneratorRequest {
    return DeleteGeneratorRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteGeneratorRequest>): DeleteGeneratorRequest {
    const message = createBaseDeleteGeneratorRequest();
    message.name = object.name ?? "";
    message.force = object.force ?? false;
    return message;
  },
};

/**
 * Service for managing
 * [Generators][google.cloud.dialogflow.cx.v3beta1.Generator]
 */
export type GeneratorsDefinition = typeof GeneratorsDefinition;
export const GeneratorsDefinition = {
  name: "Generators",
  fullName: "google.cloud.dialogflow.cx.v3beta1.Generators",
  methods: {
    /** Returns the list of all generators in the specified agent. */
    listGenerators: {
      name: "ListGenerators",
      requestType: ListGeneratorsRequest,
      requestStream: false,
      responseType: ListGeneratorsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              62,
              18,
              60,
              47,
              118,
              51,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              103,
              101,
              110,
              116,
              115,
              47,
              42,
              125,
              47,
              103,
              101,
              110,
              101,
              114,
              97,
              116,
              111,
              114,
              115,
            ]),
          ],
        },
      },
    },
    /** Retrieves the specified generator. */
    getGenerator: {
      name: "GetGenerator",
      requestType: GetGeneratorRequest,
      requestStream: false,
      responseType: Generator,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              62,
              18,
              60,
              47,
              118,
              51,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              103,
              101,
              110,
              116,
              115,
              47,
              42,
              47,
              103,
              101,
              110,
              101,
              114,
              97,
              116,
              111,
              114,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Creates a generator in the specified agent. */
    createGenerator: {
      name: "CreateGenerator",
      requestType: CreateGeneratorRequest,
      requestStream: false,
      responseType: Generator,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([16, 112, 97, 114, 101, 110, 116, 44, 103, 101, 110, 101, 114, 97, 116, 111, 114])],
          578365826: [
            Buffer.from([
              73,
              58,
              9,
              103,
              101,
              110,
              101,
              114,
              97,
              116,
              111,
              114,
              34,
              60,
              47,
              118,
              51,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              103,
              101,
              110,
              116,
              115,
              47,
              42,
              125,
              47,
              103,
              101,
              110,
              101,
              114,
              97,
              116,
              111,
              114,
              115,
            ]),
          ],
        },
      },
    },
    /** Update the specified generator. */
    updateGenerator: {
      name: "UpdateGenerator",
      requestType: UpdateGeneratorRequest,
      requestStream: false,
      responseType: Generator,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              21,
              103,
              101,
              110,
              101,
              114,
              97,
              116,
              111,
              114,
              44,
              117,
              112,
              100,
              97,
              116,
              101,
              95,
              109,
              97,
              115,
              107,
            ]),
          ],
          578365826: [
            Buffer.from([
              83,
              58,
              9,
              103,
              101,
              110,
              101,
              114,
              97,
              116,
              111,
              114,
              50,
              70,
              47,
              118,
              51,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              103,
              101,
              110,
              101,
              114,
              97,
              116,
              111,
              114,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              103,
              101,
              110,
              116,
              115,
              47,
              42,
              47,
              103,
              101,
              110,
              101,
              114,
              97,
              116,
              111,
              114,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Deletes the specified generators. */
    deleteGenerator: {
      name: "DeleteGenerator",
      requestType: DeleteGeneratorRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              62,
              42,
              60,
              47,
              118,
              51,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              103,
              101,
              110,
              116,
              115,
              47,
              42,
              47,
              103,
              101,
              110,
              101,
              114,
              97,
              116,
              111,
              114,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface GeneratorsServiceImplementation<CallContextExt = {}> {
  /** Returns the list of all generators in the specified agent. */
  listGenerators(
    request: ListGeneratorsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListGeneratorsResponse>>;
  /** Retrieves the specified generator. */
  getGenerator(request: GetGeneratorRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Generator>>;
  /** Creates a generator in the specified agent. */
  createGenerator(
    request: CreateGeneratorRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Generator>>;
  /** Update the specified generator. */
  updateGenerator(
    request: UpdateGeneratorRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Generator>>;
  /** Deletes the specified generators. */
  deleteGenerator(request: DeleteGeneratorRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Empty>>;
}

export interface GeneratorsClient<CallOptionsExt = {}> {
  /** Returns the list of all generators in the specified agent. */
  listGenerators(
    request: DeepPartial<ListGeneratorsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListGeneratorsResponse>;
  /** Retrieves the specified generator. */
  getGenerator(request: DeepPartial<GetGeneratorRequest>, options?: CallOptions & CallOptionsExt): Promise<Generator>;
  /** Creates a generator in the specified agent. */
  createGenerator(
    request: DeepPartial<CreateGeneratorRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Generator>;
  /** Update the specified generator. */
  updateGenerator(
    request: DeepPartial<UpdateGeneratorRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Generator>;
  /** Deletes the specified generators. */
  deleteGenerator(request: DeepPartial<DeleteGeneratorRequest>, options?: CallOptions & CallOptionsExt): Promise<Empty>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
