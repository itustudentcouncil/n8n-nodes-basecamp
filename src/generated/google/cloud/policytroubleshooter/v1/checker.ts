// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/policytroubleshooter/v1/checker.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { Status } from "../../../rpc/status.js";
import { AccessState, accessStateFromJSON, accessStateToJSON, AccessTuple, ExplainedPolicy } from "./explanations.js";

export const protobufPackage = "google.cloud.policytroubleshooter.v1";

/**
 * Request for
 * [TroubleshootIamPolicy][google.cloud.policytroubleshooter.v1.IamChecker.TroubleshootIamPolicy].
 */
export interface TroubleshootIamPolicyRequest {
  /**
   * The information to use for checking whether a principal has a permission
   * for a resource.
   */
  accessTuple: AccessTuple | undefined;
}

/**
 * Response for
 * [TroubleshootIamPolicy][google.cloud.policytroubleshooter.v1.IamChecker.TroubleshootIamPolicy].
 */
export interface TroubleshootIamPolicyResponse {
  /**
   * Indicates whether the principal has the specified permission for the
   * specified resource, based on evaluating all of the applicable IAM policies.
   */
  access: AccessState;
  /**
   * List of IAM policies that were evaluated to check the principal's
   * permissions, with annotations to indicate how each policy contributed to
   * the final result.
   *
   * The list of policies can include the policy for the resource itself. It can
   * also include policies that are inherited from higher levels of the resource
   * hierarchy, including the organization, the folder, and the project.
   *
   * To learn more about the resource hierarchy, see
   * https://cloud.google.com/iam/help/resource-hierarchy.
   */
  explainedPolicies: ExplainedPolicy[];
  /** The general errors contained in the troubleshooting response. */
  errors: Status[];
}

function createBaseTroubleshootIamPolicyRequest(): TroubleshootIamPolicyRequest {
  return { accessTuple: undefined };
}

export const TroubleshootIamPolicyRequest: MessageFns<TroubleshootIamPolicyRequest> = {
  encode(message: TroubleshootIamPolicyRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.accessTuple !== undefined) {
      AccessTuple.encode(message.accessTuple, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TroubleshootIamPolicyRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTroubleshootIamPolicyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.accessTuple = AccessTuple.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TroubleshootIamPolicyRequest {
    return { accessTuple: isSet(object.accessTuple) ? AccessTuple.fromJSON(object.accessTuple) : undefined };
  },

  toJSON(message: TroubleshootIamPolicyRequest): unknown {
    const obj: any = {};
    if (message.accessTuple !== undefined) {
      obj.accessTuple = AccessTuple.toJSON(message.accessTuple);
    }
    return obj;
  },

  create(base?: DeepPartial<TroubleshootIamPolicyRequest>): TroubleshootIamPolicyRequest {
    return TroubleshootIamPolicyRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<TroubleshootIamPolicyRequest>): TroubleshootIamPolicyRequest {
    const message = createBaseTroubleshootIamPolicyRequest();
    message.accessTuple = (object.accessTuple !== undefined && object.accessTuple !== null)
      ? AccessTuple.fromPartial(object.accessTuple)
      : undefined;
    return message;
  },
};

function createBaseTroubleshootIamPolicyResponse(): TroubleshootIamPolicyResponse {
  return { access: 0, explainedPolicies: [], errors: [] };
}

export const TroubleshootIamPolicyResponse: MessageFns<TroubleshootIamPolicyResponse> = {
  encode(message: TroubleshootIamPolicyResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.access !== 0) {
      writer.uint32(8).int32(message.access);
    }
    for (const v of message.explainedPolicies) {
      ExplainedPolicy.encode(v!, writer.uint32(18).fork()).join();
    }
    for (const v of message.errors) {
      Status.encode(v!, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TroubleshootIamPolicyResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTroubleshootIamPolicyResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.access = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.explainedPolicies.push(ExplainedPolicy.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.errors.push(Status.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TroubleshootIamPolicyResponse {
    return {
      access: isSet(object.access) ? accessStateFromJSON(object.access) : 0,
      explainedPolicies: globalThis.Array.isArray(object?.explainedPolicies)
        ? object.explainedPolicies.map((e: any) => ExplainedPolicy.fromJSON(e))
        : [],
      errors: globalThis.Array.isArray(object?.errors) ? object.errors.map((e: any) => Status.fromJSON(e)) : [],
    };
  },

  toJSON(message: TroubleshootIamPolicyResponse): unknown {
    const obj: any = {};
    if (message.access !== 0) {
      obj.access = accessStateToJSON(message.access);
    }
    if (message.explainedPolicies?.length) {
      obj.explainedPolicies = message.explainedPolicies.map((e) => ExplainedPolicy.toJSON(e));
    }
    if (message.errors?.length) {
      obj.errors = message.errors.map((e) => Status.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<TroubleshootIamPolicyResponse>): TroubleshootIamPolicyResponse {
    return TroubleshootIamPolicyResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<TroubleshootIamPolicyResponse>): TroubleshootIamPolicyResponse {
    const message = createBaseTroubleshootIamPolicyResponse();
    message.access = object.access ?? 0;
    message.explainedPolicies = object.explainedPolicies?.map((e) => ExplainedPolicy.fromPartial(e)) || [];
    message.errors = object.errors?.map((e) => Status.fromPartial(e)) || [];
    return message;
  },
};

/**
 * IAM Policy Troubleshooter service.
 *
 * This service helps you troubleshoot access issues for Google Cloud resources.
 */
export type IamCheckerDefinition = typeof IamCheckerDefinition;
export const IamCheckerDefinition = {
  name: "IamChecker",
  fullName: "google.cloud.policytroubleshooter.v1.IamChecker",
  methods: {
    /**
     * Checks whether a principal has a specific permission for a specific
     * resource, and explains why the principal does or does not have that
     * permission.
     */
    troubleshootIamPolicy: {
      name: "TroubleshootIamPolicy",
      requestType: TroubleshootIamPolicyRequest,
      requestStream: false,
      responseType: TroubleshootIamPolicyResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              25,
              58,
              1,
              42,
              34,
              20,
              47,
              118,
              49,
              47,
              105,
              97,
              109,
              58,
              116,
              114,
              111,
              117,
              98,
              108,
              101,
              115,
              104,
              111,
              111,
              116,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface IamCheckerServiceImplementation<CallContextExt = {}> {
  /**
   * Checks whether a principal has a specific permission for a specific
   * resource, and explains why the principal does or does not have that
   * permission.
   */
  troubleshootIamPolicy(
    request: TroubleshootIamPolicyRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<TroubleshootIamPolicyResponse>>;
}

export interface IamCheckerClient<CallOptionsExt = {}> {
  /**
   * Checks whether a principal has a specific permission for a specific
   * resource, and explains why the principal does or does not have that
   * permission.
   */
  troubleshootIamPolicy(
    request: DeepPartial<TroubleshootIamPolicyRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<TroubleshootIamPolicyResponse>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
