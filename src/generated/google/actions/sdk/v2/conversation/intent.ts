// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/actions/sdk/v2/conversation/intent.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Value } from "../../../../protobuf/struct.js";

export const protobufPackage = "google.actions.sdk.v2.conversation";

/** Represents an intent. */
export interface Intent {
  /** Required. The name of the last matched intent. */
  name: string;
  /**
   * Required. Represents parameters identified as part of intent matching.
   * This is a map of the name of the identified parameter to the value of the
   * parameter identified from user input. All parameters defined in
   * the matched intent that are identified will be surfaced here.
   */
  params: { [key: string]: IntentParameterValue };
  /**
   * Optional. Typed or spoken input from the end user that matched this intent.
   * This will be populated when an intent is matched, based on the user input.
   */
  query: string;
}

export interface Intent_ParamsEntry {
  key: string;
  value: IntentParameterValue | undefined;
}

/** Represents a value for intent parameter. */
export interface IntentParameterValue {
  /** Required. Original text value extracted from user utterance. */
  original: string;
  /**
   * Required. Structured value for parameter extracted from user input.
   * This will only be populated if the parameter is defined in the matched
   * intent and the value of the parameter could be identified during intent
   * matching.
   */
  resolved: any | undefined;
}

function createBaseIntent(): Intent {
  return { name: "", params: {}, query: "" };
}

export const Intent: MessageFns<Intent> = {
  encode(message: Intent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    Object.entries(message.params).forEach(([key, value]) => {
      Intent_ParamsEntry.encode({ key: key as any, value }, writer.uint32(18).fork()).join();
    });
    if (message.query !== "") {
      writer.uint32(26).string(message.query);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Intent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseIntent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          const entry2 = Intent_ParamsEntry.decode(reader, reader.uint32());
          if (entry2.value !== undefined) {
            message.params[entry2.key] = entry2.value;
          }
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.query = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Intent {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      params: isObject(object.params)
        ? Object.entries(object.params).reduce<{ [key: string]: IntentParameterValue }>((acc, [key, value]) => {
          acc[key] = IntentParameterValue.fromJSON(value);
          return acc;
        }, {})
        : {},
      query: isSet(object.query) ? globalThis.String(object.query) : "",
    };
  },

  toJSON(message: Intent): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.params) {
      const entries = Object.entries(message.params);
      if (entries.length > 0) {
        obj.params = {};
        entries.forEach(([k, v]) => {
          obj.params[k] = IntentParameterValue.toJSON(v);
        });
      }
    }
    if (message.query !== "") {
      obj.query = message.query;
    }
    return obj;
  },

  create(base?: DeepPartial<Intent>): Intent {
    return Intent.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Intent>): Intent {
    const message = createBaseIntent();
    message.name = object.name ?? "";
    message.params = Object.entries(object.params ?? {}).reduce<{ [key: string]: IntentParameterValue }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = IntentParameterValue.fromPartial(value);
        }
        return acc;
      },
      {},
    );
    message.query = object.query ?? "";
    return message;
  },
};

function createBaseIntent_ParamsEntry(): Intent_ParamsEntry {
  return { key: "", value: undefined };
}

export const Intent_ParamsEntry: MessageFns<Intent_ParamsEntry> = {
  encode(message: Intent_ParamsEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== undefined) {
      IntentParameterValue.encode(message.value, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Intent_ParamsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseIntent_ParamsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = IntentParameterValue.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Intent_ParamsEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? IntentParameterValue.fromJSON(object.value) : undefined,
    };
  },

  toJSON(message: Intent_ParamsEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== undefined) {
      obj.value = IntentParameterValue.toJSON(message.value);
    }
    return obj;
  },

  create(base?: DeepPartial<Intent_ParamsEntry>): Intent_ParamsEntry {
    return Intent_ParamsEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Intent_ParamsEntry>): Intent_ParamsEntry {
    const message = createBaseIntent_ParamsEntry();
    message.key = object.key ?? "";
    message.value = (object.value !== undefined && object.value !== null)
      ? IntentParameterValue.fromPartial(object.value)
      : undefined;
    return message;
  },
};

function createBaseIntentParameterValue(): IntentParameterValue {
  return { original: "", resolved: undefined };
}

export const IntentParameterValue: MessageFns<IntentParameterValue> = {
  encode(message: IntentParameterValue, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.original !== "") {
      writer.uint32(10).string(message.original);
    }
    if (message.resolved !== undefined) {
      Value.encode(Value.wrap(message.resolved), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): IntentParameterValue {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseIntentParameterValue();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.original = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.resolved = Value.unwrap(Value.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): IntentParameterValue {
    return {
      original: isSet(object.original) ? globalThis.String(object.original) : "",
      resolved: isSet(object?.resolved) ? object.resolved : undefined,
    };
  },

  toJSON(message: IntentParameterValue): unknown {
    const obj: any = {};
    if (message.original !== "") {
      obj.original = message.original;
    }
    if (message.resolved !== undefined) {
      obj.resolved = message.resolved;
    }
    return obj;
  },

  create(base?: DeepPartial<IntentParameterValue>): IntentParameterValue {
    return IntentParameterValue.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<IntentParameterValue>): IntentParameterValue {
    const message = createBaseIntentParameterValue();
    message.original = object.original ?? "";
    message.resolved = object.resolved ?? undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
