// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/actions/sdk/v2/conversation/prompt/content/canvas.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Value } from "../../../../../../protobuf/struct.js";

export const protobufPackage = "google.actions.sdk.v2.conversation";

/**
 * Represents an Interactive Canvas response to be sent to the user.
 * This can be used in conjunction with the "first_simple" field in the
 * containing prompt to speak to the user in addition to displaying a
 * interactive canvas response. The maximum size of the response is 50k bytes.
 */
export interface Canvas {
  /**
   * URL of the interactive canvas web app to load. If not set, the url from
   * current active canvas will be reused.
   */
  url: string;
  /**
   * Optional. JSON data to be passed through to the immersive experience
   * web page as an event.
   * If the "override" field in the containing prompt is "false" data values
   * defined in this Canvas prompt will be added after data values defined in
   * previous Canvas prompts.
   */
  data: any[];
  /** Optional. Default value: false. */
  suppressMic: boolean;
  /**
   * If `true` the canvas application occupies the full screen and won't
   * have a header at the top. A toast message will also be displayed on the
   * loading screen that includes the Action's display name, the developer's
   * name, and instructions for exiting the Action. Default value: `false`.
   */
  enableFullScreen: boolean;
}

function createBaseCanvas(): Canvas {
  return { url: "", data: [], suppressMic: false, enableFullScreen: false };
}

export const Canvas: MessageFns<Canvas> = {
  encode(message: Canvas, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.url !== "") {
      writer.uint32(10).string(message.url);
    }
    for (const v of message.data) {
      Value.encode(Value.wrap(v!), writer.uint32(34).fork()).join();
    }
    if (message.suppressMic !== false) {
      writer.uint32(24).bool(message.suppressMic);
    }
    if (message.enableFullScreen !== false) {
      writer.uint32(64).bool(message.enableFullScreen);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Canvas {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCanvas();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.url = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.data.push(Value.unwrap(Value.decode(reader, reader.uint32())));
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.suppressMic = reader.bool();
          continue;
        case 8:
          if (tag !== 64) {
            break;
          }

          message.enableFullScreen = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Canvas {
    return {
      url: isSet(object.url) ? globalThis.String(object.url) : "",
      data: globalThis.Array.isArray(object?.data) ? [...object.data] : [],
      suppressMic: isSet(object.suppressMic) ? globalThis.Boolean(object.suppressMic) : false,
      enableFullScreen: isSet(object.enableFullScreen) ? globalThis.Boolean(object.enableFullScreen) : false,
    };
  },

  toJSON(message: Canvas): unknown {
    const obj: any = {};
    if (message.url !== "") {
      obj.url = message.url;
    }
    if (message.data?.length) {
      obj.data = message.data;
    }
    if (message.suppressMic !== false) {
      obj.suppressMic = message.suppressMic;
    }
    if (message.enableFullScreen !== false) {
      obj.enableFullScreen = message.enableFullScreen;
    }
    return obj;
  },

  create(base?: DeepPartial<Canvas>): Canvas {
    return Canvas.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Canvas>): Canvas {
    const message = createBaseCanvas();
    message.url = object.url ?? "";
    message.data = object.data?.map((e) => e) || [];
    message.suppressMic = object.suppressMic ?? false;
    message.enableFullScreen = object.enableFullScreen ?? false;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
