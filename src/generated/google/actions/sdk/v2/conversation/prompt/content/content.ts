// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/actions/sdk/v2/conversation/prompt/content/content.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Canvas } from "./canvas.js";
import { Card } from "./card.js";
import { Collection } from "./collection.js";
import { Image } from "./image.js";
import { List } from "./list.js";
import { Media } from "./media.js";
import { Table } from "./table.js";

export const protobufPackage = "google.actions.sdk.v2.conversation";

/** Content to be shown. */
export interface Content {
  /** A basic card. */
  card?:
    | Card
    | undefined;
  /** An image. */
  image?:
    | Image
    | undefined;
  /** Table card. */
  table?:
    | Table
    | undefined;
  /** Response indicating a set of media to be played. */
  media?:
    | Media
    | undefined;
  /**
   * A response to be used for interactive canvas experience.
   *
   * @deprecated
   */
  canvas?:
    | Canvas
    | undefined;
  /** A card presenting a collection of options to select from. */
  collection?:
    | Collection
    | undefined;
  /** A card presenting a list of options to select from. */
  list?: List | undefined;
}

function createBaseContent(): Content {
  return {
    card: undefined,
    image: undefined,
    table: undefined,
    media: undefined,
    canvas: undefined,
    collection: undefined,
    list: undefined,
  };
}

export const Content: MessageFns<Content> = {
  encode(message: Content, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.card !== undefined) {
      Card.encode(message.card, writer.uint32(10).fork()).join();
    }
    if (message.image !== undefined) {
      Image.encode(message.image, writer.uint32(18).fork()).join();
    }
    if (message.table !== undefined) {
      Table.encode(message.table, writer.uint32(26).fork()).join();
    }
    if (message.media !== undefined) {
      Media.encode(message.media, writer.uint32(34).fork()).join();
    }
    if (message.canvas !== undefined) {
      Canvas.encode(message.canvas, writer.uint32(42).fork()).join();
    }
    if (message.collection !== undefined) {
      Collection.encode(message.collection, writer.uint32(50).fork()).join();
    }
    if (message.list !== undefined) {
      List.encode(message.list, writer.uint32(58).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Content {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseContent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.card = Card.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.image = Image.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.table = Table.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.media = Media.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.canvas = Canvas.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.collection = Collection.decode(reader, reader.uint32());
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.list = List.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Content {
    return {
      card: isSet(object.card) ? Card.fromJSON(object.card) : undefined,
      image: isSet(object.image) ? Image.fromJSON(object.image) : undefined,
      table: isSet(object.table) ? Table.fromJSON(object.table) : undefined,
      media: isSet(object.media) ? Media.fromJSON(object.media) : undefined,
      canvas: isSet(object.canvas) ? Canvas.fromJSON(object.canvas) : undefined,
      collection: isSet(object.collection) ? Collection.fromJSON(object.collection) : undefined,
      list: isSet(object.list) ? List.fromJSON(object.list) : undefined,
    };
  },

  toJSON(message: Content): unknown {
    const obj: any = {};
    if (message.card !== undefined) {
      obj.card = Card.toJSON(message.card);
    }
    if (message.image !== undefined) {
      obj.image = Image.toJSON(message.image);
    }
    if (message.table !== undefined) {
      obj.table = Table.toJSON(message.table);
    }
    if (message.media !== undefined) {
      obj.media = Media.toJSON(message.media);
    }
    if (message.canvas !== undefined) {
      obj.canvas = Canvas.toJSON(message.canvas);
    }
    if (message.collection !== undefined) {
      obj.collection = Collection.toJSON(message.collection);
    }
    if (message.list !== undefined) {
      obj.list = List.toJSON(message.list);
    }
    return obj;
  },

  create(base?: DeepPartial<Content>): Content {
    return Content.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Content>): Content {
    const message = createBaseContent();
    message.card = (object.card !== undefined && object.card !== null) ? Card.fromPartial(object.card) : undefined;
    message.image = (object.image !== undefined && object.image !== null) ? Image.fromPartial(object.image) : undefined;
    message.table = (object.table !== undefined && object.table !== null) ? Table.fromPartial(object.table) : undefined;
    message.media = (object.media !== undefined && object.media !== null) ? Media.fromPartial(object.media) : undefined;
    message.canvas = (object.canvas !== undefined && object.canvas !== null)
      ? Canvas.fromPartial(object.canvas)
      : undefined;
    message.collection = (object.collection !== undefined && object.collection !== null)
      ? Collection.fromPartial(object.collection)
      : undefined;
    message.list = (object.list !== undefined && object.list !== null) ? List.fromPartial(object.list) : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
