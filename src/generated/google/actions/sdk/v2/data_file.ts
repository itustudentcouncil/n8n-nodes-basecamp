// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/actions/sdk/v2/data_file.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.actions.sdk.v2";

/** Wrapper for repeated data file. Repeated fields cannot exist in a oneof. */
export interface DataFiles {
  /** Multiple data files. */
  dataFiles: DataFile[];
}

/**
 * Represents a single file which contains unstructured data. Examples include
 * image files, audio files, and cloud function source code.
 */
export interface DataFile {
  /**
   * Relative path of the data file from the project root in the SDK file
   * structure.
   * Allowed file paths:
   *     - Images: `resources/images/{multiple
   *     directories}?/{ImageName}.{extension}`
   *     - Audio: `resources/audio/{multiple
   *     directories}?/{AudioFileName}.{extension}`
   *     - Inline Cloud Function Code: `webhooks/{WebhookName}.zip`
   * Allowed extensions:
   *     - Images: `png`, `jpg`, `jpeg`
   *     - Audio: `mp3`, `mpeg`
   *     - Inline Cloud Functions: `zip`
   */
  filePath: string;
  /**
   * Required. The content type of this asset. Example: `text/html`. The content
   * type must comply with the specification
   * (http://www.w3.org/Protocols/rfc1341/4_Content-Type.html).
   * Cloud functions must be in zip format and the content type should
   * be `application/zip;zip_type=cloud_function`. The zip_type parameter
   * indicates that the zip is for a cloud function.
   */
  contentType: string;
  /**
   * Content of the data file. Examples would be raw bytes of images, audio
   * files, or cloud function zip format.
   * There is 10 MB strict limit on the payload size.
   */
  payload: Buffer;
}

function createBaseDataFiles(): DataFiles {
  return { dataFiles: [] };
}

export const DataFiles: MessageFns<DataFiles> = {
  encode(message: DataFiles, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.dataFiles) {
      DataFile.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DataFiles {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDataFiles();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.dataFiles.push(DataFile.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DataFiles {
    return {
      dataFiles: globalThis.Array.isArray(object?.dataFiles)
        ? object.dataFiles.map((e: any) => DataFile.fromJSON(e))
        : [],
    };
  },

  toJSON(message: DataFiles): unknown {
    const obj: any = {};
    if (message.dataFiles?.length) {
      obj.dataFiles = message.dataFiles.map((e) => DataFile.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<DataFiles>): DataFiles {
    return DataFiles.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DataFiles>): DataFiles {
    const message = createBaseDataFiles();
    message.dataFiles = object.dataFiles?.map((e) => DataFile.fromPartial(e)) || [];
    return message;
  },
};

function createBaseDataFile(): DataFile {
  return { filePath: "", contentType: "", payload: Buffer.alloc(0) };
}

export const DataFile: MessageFns<DataFile> = {
  encode(message: DataFile, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.filePath !== "") {
      writer.uint32(10).string(message.filePath);
    }
    if (message.contentType !== "") {
      writer.uint32(18).string(message.contentType);
    }
    if (message.payload.length !== 0) {
      writer.uint32(26).bytes(message.payload);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DataFile {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDataFile();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.filePath = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.contentType = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.payload = Buffer.from(reader.bytes());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DataFile {
    return {
      filePath: isSet(object.filePath) ? globalThis.String(object.filePath) : "",
      contentType: isSet(object.contentType) ? globalThis.String(object.contentType) : "",
      payload: isSet(object.payload) ? Buffer.from(bytesFromBase64(object.payload)) : Buffer.alloc(0),
    };
  },

  toJSON(message: DataFile): unknown {
    const obj: any = {};
    if (message.filePath !== "") {
      obj.filePath = message.filePath;
    }
    if (message.contentType !== "") {
      obj.contentType = message.contentType;
    }
    if (message.payload.length !== 0) {
      obj.payload = base64FromBytes(message.payload);
    }
    return obj;
  },

  create(base?: DeepPartial<DataFile>): DataFile {
    return DataFile.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DataFile>): DataFile {
    const message = createBaseDataFile();
    message.filePath = object.filePath ?? "";
    message.contentType = object.contentType ?? "";
    message.payload = object.payload ?? Buffer.alloc(0);
    return message;
  },
};

function bytesFromBase64(b64: string): Uint8Array {
  return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
}

function base64FromBytes(arr: Uint8Array): string {
  return globalThis.Buffer.from(arr).toString("base64");
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
