// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/actions/sdk/v2/localized_settings.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { ThemeCustomization } from "./theme_customization.js";

export const protobufPackage = "google.actions.sdk.v2";

/**
 * Represents settings of an Actions project that are specific to a user locale.
 * In this instance, user means the end user who invokes your Actions.
 * **This message is localizable.**
 */
export interface LocalizedSettings {
  /**
   * Required. The default display name for this Actions project (if there is no
   * translation available)
   */
  displayName: string;
  /**
   * Required. The pronunciation of the display name to invoke it within a voice
   * (spoken) context.
   */
  pronunciation: string;
  /**
   * Required. The default short description for the Actions project (if there is no
   * translation available). 80 character limit.
   */
  shortDescription: string;
  /**
   * Required. The default long description for the Actions project (if there is no
   * translation available). 4000 character limit.
   */
  fullDescription: string;
  /**
   * Required. Small square image, 192 x 192 px.
   * This should be specified as a reference to the corresponding image in the
   * `resources/images/` directory. For example, `$resources.images.foo` (without the
   * extension) for image in `resources/images/foo.jpg`
   * When working on a project pulled from Console, the Google-managed URL
   * pulled could be used. URLs from external sources are not allowed.
   */
  smallLogoImage: string;
  /**
   * Optional. Large landscape image, 1920 x 1080 px.
   * This should be specified as a reference to the corresponding image in the
   * `resources/images/` directory. For example, `$resources.images.foo` (without the
   * extension) for image in `resources/images/foo.jpg`
   * When working on a project pulled from Console, the Google-managed URL
   * pulled could be used. URLs from external sources are not allowed.
   */
  largeBannerImage: string;
  /** Required. The name of the developer to be displayed to users. */
  developerName: string;
  /** Required. The contact email address for the developer. */
  developerEmail: string;
  /** Optional. The terms of service URL. */
  termsOfServiceUrl: string;
  /**
   * Required. The Google Assistant voice type that users hear when they interact with
   * your Actions. The supported values are "male_1", "male_2", "female_1", and
   * "female_2".
   */
  voice: string;
  /**
   * Optional. The locale for the specified voice. If not specified, this resolves
   * to the user's Assistant locale. If specified, the voice locale must have
   * the same root language as the locale specified in LocalizedSettings.
   */
  voiceLocale: string;
  /** Required. The privacy policy URL. */
  privacyPolicyUrl: string;
  /**
   * Optional. Sample invocation phrases displayed as part of your Actions project's
   * description in the Assistant directory. This will help users learn how to
   * use it.
   */
  sampleInvocations: string[];
  /** Optional. Theme customizations for visual components of your Actions. */
  themeCustomization: ThemeCustomization | undefined;
}

function createBaseLocalizedSettings(): LocalizedSettings {
  return {
    displayName: "",
    pronunciation: "",
    shortDescription: "",
    fullDescription: "",
    smallLogoImage: "",
    largeBannerImage: "",
    developerName: "",
    developerEmail: "",
    termsOfServiceUrl: "",
    voice: "",
    voiceLocale: "",
    privacyPolicyUrl: "",
    sampleInvocations: [],
    themeCustomization: undefined,
  };
}

export const LocalizedSettings: MessageFns<LocalizedSettings> = {
  encode(message: LocalizedSettings, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.displayName !== "") {
      writer.uint32(10).string(message.displayName);
    }
    if (message.pronunciation !== "") {
      writer.uint32(18).string(message.pronunciation);
    }
    if (message.shortDescription !== "") {
      writer.uint32(26).string(message.shortDescription);
    }
    if (message.fullDescription !== "") {
      writer.uint32(34).string(message.fullDescription);
    }
    if (message.smallLogoImage !== "") {
      writer.uint32(42).string(message.smallLogoImage);
    }
    if (message.largeBannerImage !== "") {
      writer.uint32(50).string(message.largeBannerImage);
    }
    if (message.developerName !== "") {
      writer.uint32(58).string(message.developerName);
    }
    if (message.developerEmail !== "") {
      writer.uint32(66).string(message.developerEmail);
    }
    if (message.termsOfServiceUrl !== "") {
      writer.uint32(74).string(message.termsOfServiceUrl);
    }
    if (message.voice !== "") {
      writer.uint32(82).string(message.voice);
    }
    if (message.voiceLocale !== "") {
      writer.uint32(114).string(message.voiceLocale);
    }
    if (message.privacyPolicyUrl !== "") {
      writer.uint32(90).string(message.privacyPolicyUrl);
    }
    for (const v of message.sampleInvocations) {
      writer.uint32(98).string(v!);
    }
    if (message.themeCustomization !== undefined) {
      ThemeCustomization.encode(message.themeCustomization, writer.uint32(106).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LocalizedSettings {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLocalizedSettings();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.displayName = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.pronunciation = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.shortDescription = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.fullDescription = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.smallLogoImage = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.largeBannerImage = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.developerName = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.developerEmail = reader.string();
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.termsOfServiceUrl = reader.string();
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.voice = reader.string();
          continue;
        case 14:
          if (tag !== 114) {
            break;
          }

          message.voiceLocale = reader.string();
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.privacyPolicyUrl = reader.string();
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }

          message.sampleInvocations.push(reader.string());
          continue;
        case 13:
          if (tag !== 106) {
            break;
          }

          message.themeCustomization = ThemeCustomization.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LocalizedSettings {
    return {
      displayName: isSet(object.displayName) ? globalThis.String(object.displayName) : "",
      pronunciation: isSet(object.pronunciation) ? globalThis.String(object.pronunciation) : "",
      shortDescription: isSet(object.shortDescription) ? globalThis.String(object.shortDescription) : "",
      fullDescription: isSet(object.fullDescription) ? globalThis.String(object.fullDescription) : "",
      smallLogoImage: isSet(object.smallLogoImage) ? globalThis.String(object.smallLogoImage) : "",
      largeBannerImage: isSet(object.largeBannerImage) ? globalThis.String(object.largeBannerImage) : "",
      developerName: isSet(object.developerName) ? globalThis.String(object.developerName) : "",
      developerEmail: isSet(object.developerEmail) ? globalThis.String(object.developerEmail) : "",
      termsOfServiceUrl: isSet(object.termsOfServiceUrl) ? globalThis.String(object.termsOfServiceUrl) : "",
      voice: isSet(object.voice) ? globalThis.String(object.voice) : "",
      voiceLocale: isSet(object.voiceLocale) ? globalThis.String(object.voiceLocale) : "",
      privacyPolicyUrl: isSet(object.privacyPolicyUrl) ? globalThis.String(object.privacyPolicyUrl) : "",
      sampleInvocations: globalThis.Array.isArray(object?.sampleInvocations)
        ? object.sampleInvocations.map((e: any) => globalThis.String(e))
        : [],
      themeCustomization: isSet(object.themeCustomization)
        ? ThemeCustomization.fromJSON(object.themeCustomization)
        : undefined,
    };
  },

  toJSON(message: LocalizedSettings): unknown {
    const obj: any = {};
    if (message.displayName !== "") {
      obj.displayName = message.displayName;
    }
    if (message.pronunciation !== "") {
      obj.pronunciation = message.pronunciation;
    }
    if (message.shortDescription !== "") {
      obj.shortDescription = message.shortDescription;
    }
    if (message.fullDescription !== "") {
      obj.fullDescription = message.fullDescription;
    }
    if (message.smallLogoImage !== "") {
      obj.smallLogoImage = message.smallLogoImage;
    }
    if (message.largeBannerImage !== "") {
      obj.largeBannerImage = message.largeBannerImage;
    }
    if (message.developerName !== "") {
      obj.developerName = message.developerName;
    }
    if (message.developerEmail !== "") {
      obj.developerEmail = message.developerEmail;
    }
    if (message.termsOfServiceUrl !== "") {
      obj.termsOfServiceUrl = message.termsOfServiceUrl;
    }
    if (message.voice !== "") {
      obj.voice = message.voice;
    }
    if (message.voiceLocale !== "") {
      obj.voiceLocale = message.voiceLocale;
    }
    if (message.privacyPolicyUrl !== "") {
      obj.privacyPolicyUrl = message.privacyPolicyUrl;
    }
    if (message.sampleInvocations?.length) {
      obj.sampleInvocations = message.sampleInvocations;
    }
    if (message.themeCustomization !== undefined) {
      obj.themeCustomization = ThemeCustomization.toJSON(message.themeCustomization);
    }
    return obj;
  },

  create(base?: DeepPartial<LocalizedSettings>): LocalizedSettings {
    return LocalizedSettings.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<LocalizedSettings>): LocalizedSettings {
    const message = createBaseLocalizedSettings();
    message.displayName = object.displayName ?? "";
    message.pronunciation = object.pronunciation ?? "";
    message.shortDescription = object.shortDescription ?? "";
    message.fullDescription = object.fullDescription ?? "";
    message.smallLogoImage = object.smallLogoImage ?? "";
    message.largeBannerImage = object.largeBannerImage ?? "";
    message.developerName = object.developerName ?? "";
    message.developerEmail = object.developerEmail ?? "";
    message.termsOfServiceUrl = object.termsOfServiceUrl ?? "";
    message.voice = object.voice ?? "";
    message.voiceLocale = object.voiceLocale ?? "";
    message.privacyPolicyUrl = object.privacyPolicyUrl ?? "";
    message.sampleInvocations = object.sampleInvocations?.map((e) => e) || [];
    message.themeCustomization = (object.themeCustomization !== undefined && object.themeCustomization !== null)
      ? ThemeCustomization.fromPartial(object.themeCustomization)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
