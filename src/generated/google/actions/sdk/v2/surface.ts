// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/actions/sdk/v2/surface.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.actions.sdk.v2";

/**
 * Contains a set of requirements that the client surface must support to invoke
 * Actions in your project.
 */
export interface SurfaceRequirements {
  /**
   * The minimum set of capabilities needed to invoke the Actions in your
   * project. If the surface is missing any of these, the Action will not be
   * triggered.
   */
  minimumRequirements: CapabilityRequirement[];
}

/** Represents a requirement about the availability of a given capability. */
export interface CapabilityRequirement {
  /** The type of capability. */
  capability: CapabilityRequirement_SurfaceCapability;
}

/** Possible set of surface capabilities. */
export enum CapabilityRequirement_SurfaceCapability {
  /** SURFACE_CAPABILITY_UNSPECIFIED - Unknown / Unspecified. */
  SURFACE_CAPABILITY_UNSPECIFIED = 0,
  /** AUDIO_OUTPUT - Surface supports audio output. */
  AUDIO_OUTPUT = 1,
  /** SCREEN_OUTPUT - Surface supports screen/visual output. */
  SCREEN_OUTPUT = 2,
  /** MEDIA_RESPONSE_AUDIO - Surface supports media response audio. */
  MEDIA_RESPONSE_AUDIO = 3,
  /** WEB_BROWSER - Surface supports web browsers. */
  WEB_BROWSER = 4,
  /** ACCOUNT_LINKING - Surface supports account linking. */
  ACCOUNT_LINKING = 7,
  /** INTERACTIVE_CANVAS - Surface supports Interactive Canvas. */
  INTERACTIVE_CANVAS = 8,
  /** HOME_STORAGE - Surface supports home storage. */
  HOME_STORAGE = 9,
  UNRECOGNIZED = -1,
}

export function capabilityRequirement_SurfaceCapabilityFromJSON(object: any): CapabilityRequirement_SurfaceCapability {
  switch (object) {
    case 0:
    case "SURFACE_CAPABILITY_UNSPECIFIED":
      return CapabilityRequirement_SurfaceCapability.SURFACE_CAPABILITY_UNSPECIFIED;
    case 1:
    case "AUDIO_OUTPUT":
      return CapabilityRequirement_SurfaceCapability.AUDIO_OUTPUT;
    case 2:
    case "SCREEN_OUTPUT":
      return CapabilityRequirement_SurfaceCapability.SCREEN_OUTPUT;
    case 3:
    case "MEDIA_RESPONSE_AUDIO":
      return CapabilityRequirement_SurfaceCapability.MEDIA_RESPONSE_AUDIO;
    case 4:
    case "WEB_BROWSER":
      return CapabilityRequirement_SurfaceCapability.WEB_BROWSER;
    case 7:
    case "ACCOUNT_LINKING":
      return CapabilityRequirement_SurfaceCapability.ACCOUNT_LINKING;
    case 8:
    case "INTERACTIVE_CANVAS":
      return CapabilityRequirement_SurfaceCapability.INTERACTIVE_CANVAS;
    case 9:
    case "HOME_STORAGE":
      return CapabilityRequirement_SurfaceCapability.HOME_STORAGE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return CapabilityRequirement_SurfaceCapability.UNRECOGNIZED;
  }
}

export function capabilityRequirement_SurfaceCapabilityToJSON(object: CapabilityRequirement_SurfaceCapability): string {
  switch (object) {
    case CapabilityRequirement_SurfaceCapability.SURFACE_CAPABILITY_UNSPECIFIED:
      return "SURFACE_CAPABILITY_UNSPECIFIED";
    case CapabilityRequirement_SurfaceCapability.AUDIO_OUTPUT:
      return "AUDIO_OUTPUT";
    case CapabilityRequirement_SurfaceCapability.SCREEN_OUTPUT:
      return "SCREEN_OUTPUT";
    case CapabilityRequirement_SurfaceCapability.MEDIA_RESPONSE_AUDIO:
      return "MEDIA_RESPONSE_AUDIO";
    case CapabilityRequirement_SurfaceCapability.WEB_BROWSER:
      return "WEB_BROWSER";
    case CapabilityRequirement_SurfaceCapability.ACCOUNT_LINKING:
      return "ACCOUNT_LINKING";
    case CapabilityRequirement_SurfaceCapability.INTERACTIVE_CANVAS:
      return "INTERACTIVE_CANVAS";
    case CapabilityRequirement_SurfaceCapability.HOME_STORAGE:
      return "HOME_STORAGE";
    case CapabilityRequirement_SurfaceCapability.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

function createBaseSurfaceRequirements(): SurfaceRequirements {
  return { minimumRequirements: [] };
}

export const SurfaceRequirements: MessageFns<SurfaceRequirements> = {
  encode(message: SurfaceRequirements, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.minimumRequirements) {
      CapabilityRequirement.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SurfaceRequirements {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSurfaceRequirements();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.minimumRequirements.push(CapabilityRequirement.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SurfaceRequirements {
    return {
      minimumRequirements: globalThis.Array.isArray(object?.minimumRequirements)
        ? object.minimumRequirements.map((e: any) => CapabilityRequirement.fromJSON(e))
        : [],
    };
  },

  toJSON(message: SurfaceRequirements): unknown {
    const obj: any = {};
    if (message.minimumRequirements?.length) {
      obj.minimumRequirements = message.minimumRequirements.map((e) => CapabilityRequirement.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<SurfaceRequirements>): SurfaceRequirements {
    return SurfaceRequirements.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SurfaceRequirements>): SurfaceRequirements {
    const message = createBaseSurfaceRequirements();
    message.minimumRequirements = object.minimumRequirements?.map((e) => CapabilityRequirement.fromPartial(e)) || [];
    return message;
  },
};

function createBaseCapabilityRequirement(): CapabilityRequirement {
  return { capability: 0 };
}

export const CapabilityRequirement: MessageFns<CapabilityRequirement> = {
  encode(message: CapabilityRequirement, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.capability !== 0) {
      writer.uint32(8).int32(message.capability);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CapabilityRequirement {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCapabilityRequirement();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.capability = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CapabilityRequirement {
    return {
      capability: isSet(object.capability) ? capabilityRequirement_SurfaceCapabilityFromJSON(object.capability) : 0,
    };
  },

  toJSON(message: CapabilityRequirement): unknown {
    const obj: any = {};
    if (message.capability !== 0) {
      obj.capability = capabilityRequirement_SurfaceCapabilityToJSON(message.capability);
    }
    return obj;
  },

  create(base?: DeepPartial<CapabilityRequirement>): CapabilityRequirement {
    return CapabilityRequirement.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CapabilityRequirement>): CapabilityRequirement {
    const message = createBaseCapabilityRequirement();
    message.capability = object.capability ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
