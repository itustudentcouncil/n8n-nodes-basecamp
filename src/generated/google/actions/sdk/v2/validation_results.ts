// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/actions/sdk/v2/validation_results.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.actions.sdk.v2";

/** Wrapper for repeated validation result. */
export interface ValidationResults {
  /** Multiple validation results. */
  results: ValidationResult[];
}

/** Represents a validation result associated with the app content. */
export interface ValidationResult {
  /** Holds the validation message. */
  validationMessage: string;
  /** Context to identify the resource the validation message relates to. */
  validationContext: ValidationResult_ValidationContext | undefined;
}

/** Context to identify the resource the validation message relates to. */
export interface ValidationResult_ValidationContext {
  /**
   * Language code of the lozalized resource.
   * Empty if the error is for non-localized resource.
   * See the list of supported languages in
   * https://developers.google.com/assistant/console/languages-locales
   */
  languageCode: string;
}

function createBaseValidationResults(): ValidationResults {
  return { results: [] };
}

export const ValidationResults: MessageFns<ValidationResults> = {
  encode(message: ValidationResults, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.results) {
      ValidationResult.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ValidationResults {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseValidationResults();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.results.push(ValidationResult.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ValidationResults {
    return {
      results: globalThis.Array.isArray(object?.results)
        ? object.results.map((e: any) => ValidationResult.fromJSON(e))
        : [],
    };
  },

  toJSON(message: ValidationResults): unknown {
    const obj: any = {};
    if (message.results?.length) {
      obj.results = message.results.map((e) => ValidationResult.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<ValidationResults>): ValidationResults {
    return ValidationResults.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ValidationResults>): ValidationResults {
    const message = createBaseValidationResults();
    message.results = object.results?.map((e) => ValidationResult.fromPartial(e)) || [];
    return message;
  },
};

function createBaseValidationResult(): ValidationResult {
  return { validationMessage: "", validationContext: undefined };
}

export const ValidationResult: MessageFns<ValidationResult> = {
  encode(message: ValidationResult, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.validationMessage !== "") {
      writer.uint32(10).string(message.validationMessage);
    }
    if (message.validationContext !== undefined) {
      ValidationResult_ValidationContext.encode(message.validationContext, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ValidationResult {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseValidationResult();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.validationMessage = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.validationContext = ValidationResult_ValidationContext.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ValidationResult {
    return {
      validationMessage: isSet(object.validationMessage) ? globalThis.String(object.validationMessage) : "",
      validationContext: isSet(object.validationContext)
        ? ValidationResult_ValidationContext.fromJSON(object.validationContext)
        : undefined,
    };
  },

  toJSON(message: ValidationResult): unknown {
    const obj: any = {};
    if (message.validationMessage !== "") {
      obj.validationMessage = message.validationMessage;
    }
    if (message.validationContext !== undefined) {
      obj.validationContext = ValidationResult_ValidationContext.toJSON(message.validationContext);
    }
    return obj;
  },

  create(base?: DeepPartial<ValidationResult>): ValidationResult {
    return ValidationResult.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ValidationResult>): ValidationResult {
    const message = createBaseValidationResult();
    message.validationMessage = object.validationMessage ?? "";
    message.validationContext = (object.validationContext !== undefined && object.validationContext !== null)
      ? ValidationResult_ValidationContext.fromPartial(object.validationContext)
      : undefined;
    return message;
  },
};

function createBaseValidationResult_ValidationContext(): ValidationResult_ValidationContext {
  return { languageCode: "" };
}

export const ValidationResult_ValidationContext: MessageFns<ValidationResult_ValidationContext> = {
  encode(message: ValidationResult_ValidationContext, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.languageCode !== "") {
      writer.uint32(10).string(message.languageCode);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ValidationResult_ValidationContext {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseValidationResult_ValidationContext();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.languageCode = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ValidationResult_ValidationContext {
    return { languageCode: isSet(object.languageCode) ? globalThis.String(object.languageCode) : "" };
  },

  toJSON(message: ValidationResult_ValidationContext): unknown {
    const obj: any = {};
    if (message.languageCode !== "") {
      obj.languageCode = message.languageCode;
    }
    return obj;
  },

  create(base?: DeepPartial<ValidationResult_ValidationContext>): ValidationResult_ValidationContext {
    return ValidationResult_ValidationContext.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ValidationResult_ValidationContext>): ValidationResult_ValidationContext {
    const message = createBaseValidationResult_ValidationContext();
    message.languageCode = object.languageCode ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
