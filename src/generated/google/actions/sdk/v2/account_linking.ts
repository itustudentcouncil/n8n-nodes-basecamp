// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/actions/sdk/v2/account_linking.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.actions.sdk.v2";

/**
 * AccountLinking allows Google to guide the user to sign-in to the App's web
 * services.
 *
 * For Google Sign In and OAuth + Google Sign In linking types, Google generates
 * a client ID identifying your App to Google ("Client ID issued by Google to
 * your Actions" on Console UI). This field is read-only and can be checked by
 * navigating to the Console UI's Account Linking page.
 * See: https://developers.google.com/assistant/identity/google-sign-in
 *
 * Note: For all account linking setting types (except for Google Sign In), you
 * must provide a username and password for a test account in
 * Settings.testing_instructions for the review team to review the app (they
 * will not be visible to users).
 */
export interface AccountLinking {
  /**
   * Required. If `true`, users are allowed to sign up for new accounts via voice.
   * If `false`, account creation is only allowed on your website. Select this
   * option if you want to display your terms of service or obtain user consents
   * during sign-up.
   * linking_type cannot be GOOGLE_SIGN_IN when this is `false`.
   * linking_type cannot be OAUTH when this is `true`.
   */
  enableAccountCreation: boolean;
  /**
   * Required. The linking type to use.
   * See https://developers.google.com/assistant/identity for further details on
   * the linking types.
   */
  linkingType: AccountLinking_LinkingType;
  /** Optional. Indicates the type of authentication for OAUTH linking_type. */
  authGrantType: AccountLinking_AuthGrantType;
  /**
   * Optional. Client ID issued by your App to Google.
   * This is the OAuth2 Client ID identifying Google to your service.
   * Only set when using OAuth.
   */
  appClientId: string;
  /**
   * Optional. Endpoint for your sign-in web page that supports OAuth2 code or
   * implicit flows.
   * URL must use HTTPS.
   * Only set when using OAuth.
   */
  authorizationUrl: string;
  /**
   * Optional. OAuth2 endpoint for token exchange.
   * URL must use HTTPS.
   * This is not set when only using OAuth with IMPLICIT grant as the
   * linking type.
   * Only set when using OAuth.
   */
  tokenUrl: string;
  /**
   * Optional. List of permissions the user must consent to in order to use
   * your service.
   * Only set when using OAuth.
   * Make sure to provide a Terms of Service in the directory information in
   * LocalizedSettings.terms_of_service_url section if specifying this field.
   */
  scopes: string[];
  /**
   * Optional. This is the web page on your service which describes the
   * permissions the user is granting to Google.
   * Only set if using OAuth and Google Sign In.
   * Make sure to provide a Terms of Service in the directory information in
   * LocalizedSettings.terms_of_service_url section if specifying this field.
   */
  learnMoreUrl: string;
  /**
   * Optional. If true, allow Google to transmit client ID and secret via HTTP
   * basic auth header. Otherwise, Google uses the client ID and secret inside
   * the post body.
   * Only set when using OAuth.
   * Make sure to provide a Terms of Service in the directory information in
   * LocalizedSettings.terms_of_service_url section if specifying this field.
   */
  useBasicAuthHeader: boolean;
}

/** The type of Account Linking to perform. */
export enum AccountLinking_LinkingType {
  /** LINKING_TYPE_UNSPECIFIED - Unspecified. */
  LINKING_TYPE_UNSPECIFIED = 0,
  /**
   * GOOGLE_SIGN_IN - Google Sign In linking type.
   * If using this linking type, no OAuth-related fields need to be set below.
   */
  GOOGLE_SIGN_IN = 1,
  /** OAUTH_AND_GOOGLE_SIGN_IN - OAuth and Google Sign In linking type. */
  OAUTH_AND_GOOGLE_SIGN_IN = 2,
  /** OAUTH - OAuth linking type. */
  OAUTH = 3,
  UNRECOGNIZED = -1,
}

export function accountLinking_LinkingTypeFromJSON(object: any): AccountLinking_LinkingType {
  switch (object) {
    case 0:
    case "LINKING_TYPE_UNSPECIFIED":
      return AccountLinking_LinkingType.LINKING_TYPE_UNSPECIFIED;
    case 1:
    case "GOOGLE_SIGN_IN":
      return AccountLinking_LinkingType.GOOGLE_SIGN_IN;
    case 2:
    case "OAUTH_AND_GOOGLE_SIGN_IN":
      return AccountLinking_LinkingType.OAUTH_AND_GOOGLE_SIGN_IN;
    case 3:
    case "OAUTH":
      return AccountLinking_LinkingType.OAUTH;
    case -1:
    case "UNRECOGNIZED":
    default:
      return AccountLinking_LinkingType.UNRECOGNIZED;
  }
}

export function accountLinking_LinkingTypeToJSON(object: AccountLinking_LinkingType): string {
  switch (object) {
    case AccountLinking_LinkingType.LINKING_TYPE_UNSPECIFIED:
      return "LINKING_TYPE_UNSPECIFIED";
    case AccountLinking_LinkingType.GOOGLE_SIGN_IN:
      return "GOOGLE_SIGN_IN";
    case AccountLinking_LinkingType.OAUTH_AND_GOOGLE_SIGN_IN:
      return "OAUTH_AND_GOOGLE_SIGN_IN";
    case AccountLinking_LinkingType.OAUTH:
      return "OAUTH";
    case AccountLinking_LinkingType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/**
 * The OAuth2 grant type Google uses to guide the user to sign in to your
 * App's web service.
 */
export enum AccountLinking_AuthGrantType {
  /** AUTH_GRANT_TYPE_UNSPECIFIED - Unspecified. */
  AUTH_GRANT_TYPE_UNSPECIFIED = 0,
  /**
   * AUTH_CODE - Authorization code grant. Requires you to provide both
   * authentication URL and access token URL.
   */
  AUTH_CODE = 1,
  /**
   * IMPLICIT - Implicit code grant. Only requires you to provide authentication
   * URL.
   */
  IMPLICIT = 2,
  UNRECOGNIZED = -1,
}

export function accountLinking_AuthGrantTypeFromJSON(object: any): AccountLinking_AuthGrantType {
  switch (object) {
    case 0:
    case "AUTH_GRANT_TYPE_UNSPECIFIED":
      return AccountLinking_AuthGrantType.AUTH_GRANT_TYPE_UNSPECIFIED;
    case 1:
    case "AUTH_CODE":
      return AccountLinking_AuthGrantType.AUTH_CODE;
    case 2:
    case "IMPLICIT":
      return AccountLinking_AuthGrantType.IMPLICIT;
    case -1:
    case "UNRECOGNIZED":
    default:
      return AccountLinking_AuthGrantType.UNRECOGNIZED;
  }
}

export function accountLinking_AuthGrantTypeToJSON(object: AccountLinking_AuthGrantType): string {
  switch (object) {
    case AccountLinking_AuthGrantType.AUTH_GRANT_TYPE_UNSPECIFIED:
      return "AUTH_GRANT_TYPE_UNSPECIFIED";
    case AccountLinking_AuthGrantType.AUTH_CODE:
      return "AUTH_CODE";
    case AccountLinking_AuthGrantType.IMPLICIT:
      return "IMPLICIT";
    case AccountLinking_AuthGrantType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

function createBaseAccountLinking(): AccountLinking {
  return {
    enableAccountCreation: false,
    linkingType: 0,
    authGrantType: 0,
    appClientId: "",
    authorizationUrl: "",
    tokenUrl: "",
    scopes: [],
    learnMoreUrl: "",
    useBasicAuthHeader: false,
  };
}

export const AccountLinking: MessageFns<AccountLinking> = {
  encode(message: AccountLinking, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.enableAccountCreation !== false) {
      writer.uint32(8).bool(message.enableAccountCreation);
    }
    if (message.linkingType !== 0) {
      writer.uint32(16).int32(message.linkingType);
    }
    if (message.authGrantType !== 0) {
      writer.uint32(24).int32(message.authGrantType);
    }
    if (message.appClientId !== "") {
      writer.uint32(34).string(message.appClientId);
    }
    if (message.authorizationUrl !== "") {
      writer.uint32(42).string(message.authorizationUrl);
    }
    if (message.tokenUrl !== "") {
      writer.uint32(50).string(message.tokenUrl);
    }
    for (const v of message.scopes) {
      writer.uint32(58).string(v!);
    }
    if (message.learnMoreUrl !== "") {
      writer.uint32(66).string(message.learnMoreUrl);
    }
    if (message.useBasicAuthHeader !== false) {
      writer.uint32(72).bool(message.useBasicAuthHeader);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AccountLinking {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAccountLinking();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.enableAccountCreation = reader.bool();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.linkingType = reader.int32() as any;
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.authGrantType = reader.int32() as any;
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.appClientId = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.authorizationUrl = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.tokenUrl = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.scopes.push(reader.string());
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.learnMoreUrl = reader.string();
          continue;
        case 9:
          if (tag !== 72) {
            break;
          }

          message.useBasicAuthHeader = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AccountLinking {
    return {
      enableAccountCreation: isSet(object.enableAccountCreation)
        ? globalThis.Boolean(object.enableAccountCreation)
        : false,
      linkingType: isSet(object.linkingType) ? accountLinking_LinkingTypeFromJSON(object.linkingType) : 0,
      authGrantType: isSet(object.authGrantType) ? accountLinking_AuthGrantTypeFromJSON(object.authGrantType) : 0,
      appClientId: isSet(object.appClientId) ? globalThis.String(object.appClientId) : "",
      authorizationUrl: isSet(object.authorizationUrl) ? globalThis.String(object.authorizationUrl) : "",
      tokenUrl: isSet(object.tokenUrl) ? globalThis.String(object.tokenUrl) : "",
      scopes: globalThis.Array.isArray(object?.scopes) ? object.scopes.map((e: any) => globalThis.String(e)) : [],
      learnMoreUrl: isSet(object.learnMoreUrl) ? globalThis.String(object.learnMoreUrl) : "",
      useBasicAuthHeader: isSet(object.useBasicAuthHeader) ? globalThis.Boolean(object.useBasicAuthHeader) : false,
    };
  },

  toJSON(message: AccountLinking): unknown {
    const obj: any = {};
    if (message.enableAccountCreation !== false) {
      obj.enableAccountCreation = message.enableAccountCreation;
    }
    if (message.linkingType !== 0) {
      obj.linkingType = accountLinking_LinkingTypeToJSON(message.linkingType);
    }
    if (message.authGrantType !== 0) {
      obj.authGrantType = accountLinking_AuthGrantTypeToJSON(message.authGrantType);
    }
    if (message.appClientId !== "") {
      obj.appClientId = message.appClientId;
    }
    if (message.authorizationUrl !== "") {
      obj.authorizationUrl = message.authorizationUrl;
    }
    if (message.tokenUrl !== "") {
      obj.tokenUrl = message.tokenUrl;
    }
    if (message.scopes?.length) {
      obj.scopes = message.scopes;
    }
    if (message.learnMoreUrl !== "") {
      obj.learnMoreUrl = message.learnMoreUrl;
    }
    if (message.useBasicAuthHeader !== false) {
      obj.useBasicAuthHeader = message.useBasicAuthHeader;
    }
    return obj;
  },

  create(base?: DeepPartial<AccountLinking>): AccountLinking {
    return AccountLinking.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AccountLinking>): AccountLinking {
    const message = createBaseAccountLinking();
    message.enableAccountCreation = object.enableAccountCreation ?? false;
    message.linkingType = object.linkingType ?? 0;
    message.authGrantType = object.authGrantType ?? 0;
    message.appClientId = object.appClientId ?? "";
    message.authorizationUrl = object.authorizationUrl ?? "";
    message.tokenUrl = object.tokenUrl ?? "";
    message.scopes = object.scopes?.map((e) => e) || [];
    message.learnMoreUrl = object.learnMoreUrl ?? "";
    message.useBasicAuthHeader = object.useBasicAuthHeader ?? false;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
