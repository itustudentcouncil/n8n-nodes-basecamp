// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/actions/sdk/v2/interactionmodel/type/synonym_type.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { EntityDisplay } from "./entity_display.js";

export const protobufPackage = "google.actions.sdk.v2.interactionmodel.type";

/** Type that matches text by set of synonyms. */
export interface SynonymType {
  /** Optional. The match type for the synonym. */
  matchType: SynonymType_MatchType;
  /**
   * Optional. When set to true this will match unknown words or phrases based on
   * surrounding input and intent training data, such as items that might be
   * added to a grocery list.
   */
  acceptUnknownValues: boolean;
  /** Required. Named map of synonym entities. */
  entities: { [key: string]: SynonymType_Entity };
}

/**
 * The type of matching that entries in this type will use. This will ensure
 * all of the types use the same matching method and allow variation of
 * matching for synonym matching (i.e. fuzzy versus exact). If the value is
 * `UNSPECIFIED` it will be defaulted to `EXACT_MATCH`.
 */
export enum SynonymType_MatchType {
  /** UNSPECIFIED - Defaults to `EXACT_MATCH`. */
  UNSPECIFIED = 0,
  /** EXACT_MATCH - Looks for an exact match of the synonym or name. */
  EXACT_MATCH = 1,
  /**
   * FUZZY_MATCH - Looser than `EXACT_MATCH`. Looks for similar matches as well as exact
   * matches.
   */
  FUZZY_MATCH = 2,
  UNRECOGNIZED = -1,
}

export function synonymType_MatchTypeFromJSON(object: any): SynonymType_MatchType {
  switch (object) {
    case 0:
    case "UNSPECIFIED":
      return SynonymType_MatchType.UNSPECIFIED;
    case 1:
    case "EXACT_MATCH":
      return SynonymType_MatchType.EXACT_MATCH;
    case 2:
    case "FUZZY_MATCH":
      return SynonymType_MatchType.FUZZY_MATCH;
    case -1:
    case "UNRECOGNIZED":
    default:
      return SynonymType_MatchType.UNRECOGNIZED;
  }
}

export function synonymType_MatchTypeToJSON(object: SynonymType_MatchType): string {
  switch (object) {
    case SynonymType_MatchType.UNSPECIFIED:
      return "UNSPECIFIED";
    case SynonymType_MatchType.EXACT_MATCH:
      return "EXACT_MATCH";
    case SynonymType_MatchType.FUZZY_MATCH:
      return "FUZZY_MATCH";
    case SynonymType_MatchType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/**
 * Represents a synonym entity field that contains the details of a single
 * entry inside the type.
 */
export interface SynonymType_Entity {
  /** Optional. The entity display details. */
  display:
    | EntityDisplay
    | undefined;
  /**
   * Optional. The list of synonyms for the entity.
   * **This field is localizable.**
   */
  synonyms: string[];
}

export interface SynonymType_EntitiesEntry {
  key: string;
  value: SynonymType_Entity | undefined;
}

function createBaseSynonymType(): SynonymType {
  return { matchType: 0, acceptUnknownValues: false, entities: {} };
}

export const SynonymType: MessageFns<SynonymType> = {
  encode(message: SynonymType, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.matchType !== 0) {
      writer.uint32(8).int32(message.matchType);
    }
    if (message.acceptUnknownValues !== false) {
      writer.uint32(24).bool(message.acceptUnknownValues);
    }
    Object.entries(message.entities).forEach(([key, value]) => {
      SynonymType_EntitiesEntry.encode({ key: key as any, value }, writer.uint32(18).fork()).join();
    });
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SynonymType {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSynonymType();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.matchType = reader.int32() as any;
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.acceptUnknownValues = reader.bool();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          const entry2 = SynonymType_EntitiesEntry.decode(reader, reader.uint32());
          if (entry2.value !== undefined) {
            message.entities[entry2.key] = entry2.value;
          }
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SynonymType {
    return {
      matchType: isSet(object.matchType) ? synonymType_MatchTypeFromJSON(object.matchType) : 0,
      acceptUnknownValues: isSet(object.acceptUnknownValues) ? globalThis.Boolean(object.acceptUnknownValues) : false,
      entities: isObject(object.entities)
        ? Object.entries(object.entities).reduce<{ [key: string]: SynonymType_Entity }>((acc, [key, value]) => {
          acc[key] = SynonymType_Entity.fromJSON(value);
          return acc;
        }, {})
        : {},
    };
  },

  toJSON(message: SynonymType): unknown {
    const obj: any = {};
    if (message.matchType !== 0) {
      obj.matchType = synonymType_MatchTypeToJSON(message.matchType);
    }
    if (message.acceptUnknownValues !== false) {
      obj.acceptUnknownValues = message.acceptUnknownValues;
    }
    if (message.entities) {
      const entries = Object.entries(message.entities);
      if (entries.length > 0) {
        obj.entities = {};
        entries.forEach(([k, v]) => {
          obj.entities[k] = SynonymType_Entity.toJSON(v);
        });
      }
    }
    return obj;
  },

  create(base?: DeepPartial<SynonymType>): SynonymType {
    return SynonymType.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SynonymType>): SynonymType {
    const message = createBaseSynonymType();
    message.matchType = object.matchType ?? 0;
    message.acceptUnknownValues = object.acceptUnknownValues ?? false;
    message.entities = Object.entries(object.entities ?? {}).reduce<{ [key: string]: SynonymType_Entity }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = SynonymType_Entity.fromPartial(value);
        }
        return acc;
      },
      {},
    );
    return message;
  },
};

function createBaseSynonymType_Entity(): SynonymType_Entity {
  return { display: undefined, synonyms: [] };
}

export const SynonymType_Entity: MessageFns<SynonymType_Entity> = {
  encode(message: SynonymType_Entity, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.display !== undefined) {
      EntityDisplay.encode(message.display, writer.uint32(10).fork()).join();
    }
    for (const v of message.synonyms) {
      writer.uint32(18).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SynonymType_Entity {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSynonymType_Entity();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.display = EntityDisplay.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.synonyms.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SynonymType_Entity {
    return {
      display: isSet(object.display) ? EntityDisplay.fromJSON(object.display) : undefined,
      synonyms: globalThis.Array.isArray(object?.synonyms) ? object.synonyms.map((e: any) => globalThis.String(e)) : [],
    };
  },

  toJSON(message: SynonymType_Entity): unknown {
    const obj: any = {};
    if (message.display !== undefined) {
      obj.display = EntityDisplay.toJSON(message.display);
    }
    if (message.synonyms?.length) {
      obj.synonyms = message.synonyms;
    }
    return obj;
  },

  create(base?: DeepPartial<SynonymType_Entity>): SynonymType_Entity {
    return SynonymType_Entity.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SynonymType_Entity>): SynonymType_Entity {
    const message = createBaseSynonymType_Entity();
    message.display = (object.display !== undefined && object.display !== null)
      ? EntityDisplay.fromPartial(object.display)
      : undefined;
    message.synonyms = object.synonyms?.map((e) => e) || [];
    return message;
  },
};

function createBaseSynonymType_EntitiesEntry(): SynonymType_EntitiesEntry {
  return { key: "", value: undefined };
}

export const SynonymType_EntitiesEntry: MessageFns<SynonymType_EntitiesEntry> = {
  encode(message: SynonymType_EntitiesEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== undefined) {
      SynonymType_Entity.encode(message.value, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SynonymType_EntitiesEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSynonymType_EntitiesEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = SynonymType_Entity.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SynonymType_EntitiesEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? SynonymType_Entity.fromJSON(object.value) : undefined,
    };
  },

  toJSON(message: SynonymType_EntitiesEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== undefined) {
      obj.value = SynonymType_Entity.toJSON(message.value);
    }
    return obj;
  },

  create(base?: DeepPartial<SynonymType_EntitiesEntry>): SynonymType_EntitiesEntry {
    return SynonymType_EntitiesEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SynonymType_EntitiesEntry>): SynonymType_EntitiesEntry {
    const message = createBaseSynonymType_EntitiesEntry();
    message.key = object.key ?? "";
    message.value = (object.value !== undefined && object.value !== null)
      ? SynonymType_Entity.fromPartial(object.value)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
