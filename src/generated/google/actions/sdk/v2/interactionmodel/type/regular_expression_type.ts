// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/actions/sdk/v2/interactionmodel/type/regular_expression_type.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { EntityDisplay } from "./entity_display.js";

export const protobufPackage = "google.actions.sdk.v2.interactionmodel.type";

/**
 * Type that matches text by regular expressions.
 * **This message is localizable.**
 */
export interface RegularExpressionType {
  /** Required. Named map of entities which each contain Regex strings. */
  entities: { [key: string]: RegularExpressionType_Entity };
}

/**
 * Represents an entity object that contains the regular expression that is
 * used for comparison.
 */
export interface RegularExpressionType_Entity {
  /**
   * Optional. Elements that will be displayed on the canvas once an entity is
   * extracted from a query. Only relevant for canvas enabled apps.
   */
  display:
    | EntityDisplay
    | undefined;
  /**
   * Required. Uses RE2 regex syntax (See
   * https://github.com/google/re2/wiki/Syntax for more details)
   */
  regularExpressions: string[];
}

export interface RegularExpressionType_EntitiesEntry {
  key: string;
  value: RegularExpressionType_Entity | undefined;
}

function createBaseRegularExpressionType(): RegularExpressionType {
  return { entities: {} };
}

export const RegularExpressionType: MessageFns<RegularExpressionType> = {
  encode(message: RegularExpressionType, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    Object.entries(message.entities).forEach(([key, value]) => {
      RegularExpressionType_EntitiesEntry.encode({ key: key as any, value }, writer.uint32(10).fork()).join();
    });
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RegularExpressionType {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRegularExpressionType();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          const entry1 = RegularExpressionType_EntitiesEntry.decode(reader, reader.uint32());
          if (entry1.value !== undefined) {
            message.entities[entry1.key] = entry1.value;
          }
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RegularExpressionType {
    return {
      entities: isObject(object.entities)
        ? Object.entries(object.entities).reduce<{ [key: string]: RegularExpressionType_Entity }>(
          (acc, [key, value]) => {
            acc[key] = RegularExpressionType_Entity.fromJSON(value);
            return acc;
          },
          {},
        )
        : {},
    };
  },

  toJSON(message: RegularExpressionType): unknown {
    const obj: any = {};
    if (message.entities) {
      const entries = Object.entries(message.entities);
      if (entries.length > 0) {
        obj.entities = {};
        entries.forEach(([k, v]) => {
          obj.entities[k] = RegularExpressionType_Entity.toJSON(v);
        });
      }
    }
    return obj;
  },

  create(base?: DeepPartial<RegularExpressionType>): RegularExpressionType {
    return RegularExpressionType.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RegularExpressionType>): RegularExpressionType {
    const message = createBaseRegularExpressionType();
    message.entities = Object.entries(object.entities ?? {}).reduce<{ [key: string]: RegularExpressionType_Entity }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = RegularExpressionType_Entity.fromPartial(value);
        }
        return acc;
      },
      {},
    );
    return message;
  },
};

function createBaseRegularExpressionType_Entity(): RegularExpressionType_Entity {
  return { display: undefined, regularExpressions: [] };
}

export const RegularExpressionType_Entity: MessageFns<RegularExpressionType_Entity> = {
  encode(message: RegularExpressionType_Entity, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.display !== undefined) {
      EntityDisplay.encode(message.display, writer.uint32(10).fork()).join();
    }
    for (const v of message.regularExpressions) {
      writer.uint32(18).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RegularExpressionType_Entity {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRegularExpressionType_Entity();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.display = EntityDisplay.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.regularExpressions.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RegularExpressionType_Entity {
    return {
      display: isSet(object.display) ? EntityDisplay.fromJSON(object.display) : undefined,
      regularExpressions: globalThis.Array.isArray(object?.regularExpressions)
        ? object.regularExpressions.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: RegularExpressionType_Entity): unknown {
    const obj: any = {};
    if (message.display !== undefined) {
      obj.display = EntityDisplay.toJSON(message.display);
    }
    if (message.regularExpressions?.length) {
      obj.regularExpressions = message.regularExpressions;
    }
    return obj;
  },

  create(base?: DeepPartial<RegularExpressionType_Entity>): RegularExpressionType_Entity {
    return RegularExpressionType_Entity.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RegularExpressionType_Entity>): RegularExpressionType_Entity {
    const message = createBaseRegularExpressionType_Entity();
    message.display = (object.display !== undefined && object.display !== null)
      ? EntityDisplay.fromPartial(object.display)
      : undefined;
    message.regularExpressions = object.regularExpressions?.map((e) => e) || [];
    return message;
  },
};

function createBaseRegularExpressionType_EntitiesEntry(): RegularExpressionType_EntitiesEntry {
  return { key: "", value: undefined };
}

export const RegularExpressionType_EntitiesEntry: MessageFns<RegularExpressionType_EntitiesEntry> = {
  encode(message: RegularExpressionType_EntitiesEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== undefined) {
      RegularExpressionType_Entity.encode(message.value, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RegularExpressionType_EntitiesEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRegularExpressionType_EntitiesEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = RegularExpressionType_Entity.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RegularExpressionType_EntitiesEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? RegularExpressionType_Entity.fromJSON(object.value) : undefined,
    };
  },

  toJSON(message: RegularExpressionType_EntitiesEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== undefined) {
      obj.value = RegularExpressionType_Entity.toJSON(message.value);
    }
    return obj;
  },

  create(base?: DeepPartial<RegularExpressionType_EntitiesEntry>): RegularExpressionType_EntitiesEntry {
    return RegularExpressionType_EntitiesEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RegularExpressionType_EntitiesEntry>): RegularExpressionType_EntitiesEntry {
    const message = createBaseRegularExpressionType_EntitiesEntry();
    message.key = object.key ?? "";
    message.value = (object.value !== undefined && object.value !== null)
      ? RegularExpressionType_Entity.fromPartial(object.value)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
