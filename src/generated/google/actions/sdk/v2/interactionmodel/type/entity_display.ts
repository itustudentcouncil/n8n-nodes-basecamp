// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/actions/sdk/v2/interactionmodel/type/entity_display.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.actions.sdk.v2.interactionmodel.type";

/**
 * Elements that will be displayed on the canvas once a particular type's entity
 * is extracted from a query. Only relevant for canvas enabled apps.
 * **This message is localizable.**
 */
export interface EntityDisplay {
  /** Optional. Title of the icon. */
  iconTitle: string;
  /** Required. Url of the icon. */
  iconUrl: string;
}

function createBaseEntityDisplay(): EntityDisplay {
  return { iconTitle: "", iconUrl: "" };
}

export const EntityDisplay: MessageFns<EntityDisplay> = {
  encode(message: EntityDisplay, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.iconTitle !== "") {
      writer.uint32(10).string(message.iconTitle);
    }
    if (message.iconUrl !== "") {
      writer.uint32(18).string(message.iconUrl);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EntityDisplay {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEntityDisplay();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.iconTitle = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.iconUrl = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EntityDisplay {
    return {
      iconTitle: isSet(object.iconTitle) ? globalThis.String(object.iconTitle) : "",
      iconUrl: isSet(object.iconUrl) ? globalThis.String(object.iconUrl) : "",
    };
  },

  toJSON(message: EntityDisplay): unknown {
    const obj: any = {};
    if (message.iconTitle !== "") {
      obj.iconTitle = message.iconTitle;
    }
    if (message.iconUrl !== "") {
      obj.iconUrl = message.iconUrl;
    }
    return obj;
  },

  create(base?: DeepPartial<EntityDisplay>): EntityDisplay {
    return EntityDisplay.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<EntityDisplay>): EntityDisplay {
    const message = createBaseEntityDisplay();
    message.iconTitle = object.iconTitle ?? "";
    message.iconUrl = object.iconUrl ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
