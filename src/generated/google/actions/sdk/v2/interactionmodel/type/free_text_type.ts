// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/actions/sdk/v2/interactionmodel/type/free_text_type.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { EntityDisplay } from "./entity_display.js";

export const protobufPackage = "google.actions.sdk.v2.interactionmodel.type";

/**
 * Type that matches any text if surrounding words context is close to provided
 * training examples.
 */
export interface FreeTextType {
  /**
   * Optional. Elements that will be displayed on the canvas once an entity is extracted
   * from a query. Only relevant for canvas enabled apps.
   */
  display: EntityDisplay | undefined;
}

function createBaseFreeTextType(): FreeTextType {
  return { display: undefined };
}

export const FreeTextType: MessageFns<FreeTextType> = {
  encode(message: FreeTextType, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.display !== undefined) {
      EntityDisplay.encode(message.display, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FreeTextType {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFreeTextType();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2:
          if (tag !== 18) {
            break;
          }

          message.display = EntityDisplay.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FreeTextType {
    return { display: isSet(object.display) ? EntityDisplay.fromJSON(object.display) : undefined };
  },

  toJSON(message: FreeTextType): unknown {
    const obj: any = {};
    if (message.display !== undefined) {
      obj.display = EntityDisplay.toJSON(message.display);
    }
    return obj;
  },

  create(base?: DeepPartial<FreeTextType>): FreeTextType {
    return FreeTextType.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<FreeTextType>): FreeTextType {
    const message = createBaseFreeTextType();
    message.display = (object.display !== undefined && object.display !== null)
      ? EntityDisplay.fromPartial(object.display)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
