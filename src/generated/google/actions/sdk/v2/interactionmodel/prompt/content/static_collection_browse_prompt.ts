// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/actions/sdk/v2/interactionmodel/prompt/content/static_collection_browse_prompt.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import {
  StaticImagePrompt,
  StaticImagePrompt_ImageFill,
  staticImagePrompt_ImageFillFromJSON,
  staticImagePrompt_ImageFillToJSON,
} from "./static_image_prompt.js";
import { OpenUrl } from "./static_link_prompt.js";

export const protobufPackage = "google.actions.sdk.v2.interactionmodel.prompt";

/**
 * Presents a set of web documents as a collection of large-tile items. Items
 * may be selected to launch their associated web document in a web viewer.
 */
export interface StaticCollectionBrowsePrompt {
  /**
   * Items in the browse collection. The list size should be in the range [2,
   * 10].
   */
  items: StaticCollectionBrowsePrompt_CollectionBrowseItem[];
  /** Image display option for images in the collection. */
  imageFill: StaticImagePrompt_ImageFill;
}

/** Item in the collection. */
export interface StaticCollectionBrowsePrompt_CollectionBrowseItem {
  /** Required. Title of the collection item. */
  title: string;
  /** Description of the collection item. */
  description: string;
  /**
   * Footer text for the collection item, displayed below the description.
   * Single line of text, truncated with an ellipsis.
   */
  footer: string;
  /** Image for the collection item. */
  image:
    | StaticImagePrompt
    | undefined;
  /** Required. URI to open if the item selected. */
  openUriAction: OpenUrl | undefined;
}

function createBaseStaticCollectionBrowsePrompt(): StaticCollectionBrowsePrompt {
  return { items: [], imageFill: 0 };
}

export const StaticCollectionBrowsePrompt: MessageFns<StaticCollectionBrowsePrompt> = {
  encode(message: StaticCollectionBrowsePrompt, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.items) {
      StaticCollectionBrowsePrompt_CollectionBrowseItem.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.imageFill !== 0) {
      writer.uint32(16).int32(message.imageFill);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StaticCollectionBrowsePrompt {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStaticCollectionBrowsePrompt();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.items.push(StaticCollectionBrowsePrompt_CollectionBrowseItem.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.imageFill = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StaticCollectionBrowsePrompt {
    return {
      items: globalThis.Array.isArray(object?.items)
        ? object.items.map((e: any) => StaticCollectionBrowsePrompt_CollectionBrowseItem.fromJSON(e))
        : [],
      imageFill: isSet(object.imageFill) ? staticImagePrompt_ImageFillFromJSON(object.imageFill) : 0,
    };
  },

  toJSON(message: StaticCollectionBrowsePrompt): unknown {
    const obj: any = {};
    if (message.items?.length) {
      obj.items = message.items.map((e) => StaticCollectionBrowsePrompt_CollectionBrowseItem.toJSON(e));
    }
    if (message.imageFill !== 0) {
      obj.imageFill = staticImagePrompt_ImageFillToJSON(message.imageFill);
    }
    return obj;
  },

  create(base?: DeepPartial<StaticCollectionBrowsePrompt>): StaticCollectionBrowsePrompt {
    return StaticCollectionBrowsePrompt.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<StaticCollectionBrowsePrompt>): StaticCollectionBrowsePrompt {
    const message = createBaseStaticCollectionBrowsePrompt();
    message.items = object.items?.map((e) => StaticCollectionBrowsePrompt_CollectionBrowseItem.fromPartial(e)) || [];
    message.imageFill = object.imageFill ?? 0;
    return message;
  },
};

function createBaseStaticCollectionBrowsePrompt_CollectionBrowseItem(): StaticCollectionBrowsePrompt_CollectionBrowseItem {
  return { title: "", description: "", footer: "", image: undefined, openUriAction: undefined };
}

export const StaticCollectionBrowsePrompt_CollectionBrowseItem: MessageFns<
  StaticCollectionBrowsePrompt_CollectionBrowseItem
> = {
  encode(
    message: StaticCollectionBrowsePrompt_CollectionBrowseItem,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.title !== "") {
      writer.uint32(10).string(message.title);
    }
    if (message.description !== "") {
      writer.uint32(18).string(message.description);
    }
    if (message.footer !== "") {
      writer.uint32(26).string(message.footer);
    }
    if (message.image !== undefined) {
      StaticImagePrompt.encode(message.image, writer.uint32(34).fork()).join();
    }
    if (message.openUriAction !== undefined) {
      OpenUrl.encode(message.openUriAction, writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StaticCollectionBrowsePrompt_CollectionBrowseItem {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStaticCollectionBrowsePrompt_CollectionBrowseItem();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.title = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.description = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.footer = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.image = StaticImagePrompt.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.openUriAction = OpenUrl.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StaticCollectionBrowsePrompt_CollectionBrowseItem {
    return {
      title: isSet(object.title) ? globalThis.String(object.title) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      footer: isSet(object.footer) ? globalThis.String(object.footer) : "",
      image: isSet(object.image) ? StaticImagePrompt.fromJSON(object.image) : undefined,
      openUriAction: isSet(object.openUriAction) ? OpenUrl.fromJSON(object.openUriAction) : undefined,
    };
  },

  toJSON(message: StaticCollectionBrowsePrompt_CollectionBrowseItem): unknown {
    const obj: any = {};
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.footer !== "") {
      obj.footer = message.footer;
    }
    if (message.image !== undefined) {
      obj.image = StaticImagePrompt.toJSON(message.image);
    }
    if (message.openUriAction !== undefined) {
      obj.openUriAction = OpenUrl.toJSON(message.openUriAction);
    }
    return obj;
  },

  create(
    base?: DeepPartial<StaticCollectionBrowsePrompt_CollectionBrowseItem>,
  ): StaticCollectionBrowsePrompt_CollectionBrowseItem {
    return StaticCollectionBrowsePrompt_CollectionBrowseItem.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<StaticCollectionBrowsePrompt_CollectionBrowseItem>,
  ): StaticCollectionBrowsePrompt_CollectionBrowseItem {
    const message = createBaseStaticCollectionBrowsePrompt_CollectionBrowseItem();
    message.title = object.title ?? "";
    message.description = object.description ?? "";
    message.footer = object.footer ?? "";
    message.image = (object.image !== undefined && object.image !== null)
      ? StaticImagePrompt.fromPartial(object.image)
      : undefined;
    message.openUriAction = (object.openUriAction !== undefined && object.openUriAction !== null)
      ? OpenUrl.fromPartial(object.openUriAction)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
