// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/actions/sdk/v2/interactionmodel/prompt/static_prompt.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { StaticCanvasPrompt } from "./content/static_canvas_prompt.js";
import { StaticContentPrompt } from "./content/static_content_prompt.js";
import { StaticLinkPrompt } from "./content/static_link_prompt.js";
import { StaticSimplePrompt } from "./static_simple_prompt.js";
import { Suggestion } from "./suggestion.js";
import { SurfaceCapabilities } from "./surface_capabilities.js";

export const protobufPackage = "google.actions.sdk.v2.interactionmodel.prompt";

/**
 * Represents a list of prompt candidates, one of which will be selected as the
 * prompt to be shown in the response to the user.
 * **This message is localizable.**
 */
export interface StaticPrompt {
  /**
   * The list of candidate prompts to be sent to the client. Each prompt has a
   * selector to determine when it can be used. The first selector that matches
   * a request will be sent and the rest will be ignored.
   */
  candidates: StaticPrompt_StaticPromptCandidate[];
}

/** Represents a static prompt candidate. */
export interface StaticPrompt_StaticPromptCandidate {
  /**
   * Optional. The criteria for whether this prompt matches a request. If the selector
   * is empty, this prompt will always be triggered.
   */
  selector:
    | StaticPrompt_Selector
    | undefined;
  /** The prompt response associated with the selector. */
  promptResponse: StaticPrompt_StaticPromptCandidate_StaticPromptResponse | undefined;
}

/**
 * Represents structured responses to send to the user, such as text,
 * speech, cards, canvas data, suggestion chips, etc.
 */
export interface StaticPrompt_StaticPromptCandidate_StaticPromptResponse {
  /** Optional. The first voice and text-only response. */
  firstSimple:
    | StaticSimplePrompt
    | undefined;
  /** Optional. A content like a card, list or media to display to the user. */
  content:
    | StaticContentPrompt
    | undefined;
  /** Optional. The last voice and text-only response. */
  lastSimple:
    | StaticSimplePrompt
    | undefined;
  /**
   * Optional. Suggestions to be displayed to the user which will always
   * appear at the end of the response. If the `append` field in the
   * containing prompt is `true` the titles defined in this field will be
   * added to titles defined in any previously defined suggestions prompts
   * and duplicate values will be removed.
   */
  suggestions: Suggestion[];
  /**
   * Optional. An additional suggestion chip that can link out to the associated app
   * or site.
   * The chip will be rendered with the title "Open <name>". Max 20 chars.
   */
  link:
    | StaticLinkPrompt
    | undefined;
  /**
   * Optional. Mode for how this messages should be merged with previously defined
   * messages.
   * `true` will clear all previously defined messages (first and last
   * simple, content, suggestions link and canvas) and add messages defined
   * in this prompt. `false` will add messages defined in this prompt to
   * messages defined in previous responses. Setting this field to `false`
   * will also enable appending to some fields inside Simple prompts, the
   * Suggestions prompt and the Canvas prompt (part of the Content prompt).
   * The Content and Link messages will always be overwritten if defined in
   * the prompt. Default value is `false`.
   */
  override: boolean;
  /** A response to be used for interactive canvas experience. */
  canvas: StaticCanvasPrompt | undefined;
}

/** Defines the criteria for whether a prompt matches a request. */
export interface StaticPrompt_Selector {
  /** The set of required surface capabilities. */
  surfaceCapabilities: SurfaceCapabilities | undefined;
}

function createBaseStaticPrompt(): StaticPrompt {
  return { candidates: [] };
}

export const StaticPrompt: MessageFns<StaticPrompt> = {
  encode(message: StaticPrompt, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.candidates) {
      StaticPrompt_StaticPromptCandidate.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StaticPrompt {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStaticPrompt();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.candidates.push(StaticPrompt_StaticPromptCandidate.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StaticPrompt {
    return {
      candidates: globalThis.Array.isArray(object?.candidates)
        ? object.candidates.map((e: any) => StaticPrompt_StaticPromptCandidate.fromJSON(e))
        : [],
    };
  },

  toJSON(message: StaticPrompt): unknown {
    const obj: any = {};
    if (message.candidates?.length) {
      obj.candidates = message.candidates.map((e) => StaticPrompt_StaticPromptCandidate.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<StaticPrompt>): StaticPrompt {
    return StaticPrompt.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<StaticPrompt>): StaticPrompt {
    const message = createBaseStaticPrompt();
    message.candidates = object.candidates?.map((e) => StaticPrompt_StaticPromptCandidate.fromPartial(e)) || [];
    return message;
  },
};

function createBaseStaticPrompt_StaticPromptCandidate(): StaticPrompt_StaticPromptCandidate {
  return { selector: undefined, promptResponse: undefined };
}

export const StaticPrompt_StaticPromptCandidate: MessageFns<StaticPrompt_StaticPromptCandidate> = {
  encode(message: StaticPrompt_StaticPromptCandidate, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.selector !== undefined) {
      StaticPrompt_Selector.encode(message.selector, writer.uint32(10).fork()).join();
    }
    if (message.promptResponse !== undefined) {
      StaticPrompt_StaticPromptCandidate_StaticPromptResponse.encode(message.promptResponse, writer.uint32(18).fork())
        .join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StaticPrompt_StaticPromptCandidate {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStaticPrompt_StaticPromptCandidate();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.selector = StaticPrompt_Selector.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.promptResponse = StaticPrompt_StaticPromptCandidate_StaticPromptResponse.decode(
            reader,
            reader.uint32(),
          );
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StaticPrompt_StaticPromptCandidate {
    return {
      selector: isSet(object.selector) ? StaticPrompt_Selector.fromJSON(object.selector) : undefined,
      promptResponse: isSet(object.promptResponse)
        ? StaticPrompt_StaticPromptCandidate_StaticPromptResponse.fromJSON(object.promptResponse)
        : undefined,
    };
  },

  toJSON(message: StaticPrompt_StaticPromptCandidate): unknown {
    const obj: any = {};
    if (message.selector !== undefined) {
      obj.selector = StaticPrompt_Selector.toJSON(message.selector);
    }
    if (message.promptResponse !== undefined) {
      obj.promptResponse = StaticPrompt_StaticPromptCandidate_StaticPromptResponse.toJSON(message.promptResponse);
    }
    return obj;
  },

  create(base?: DeepPartial<StaticPrompt_StaticPromptCandidate>): StaticPrompt_StaticPromptCandidate {
    return StaticPrompt_StaticPromptCandidate.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<StaticPrompt_StaticPromptCandidate>): StaticPrompt_StaticPromptCandidate {
    const message = createBaseStaticPrompt_StaticPromptCandidate();
    message.selector = (object.selector !== undefined && object.selector !== null)
      ? StaticPrompt_Selector.fromPartial(object.selector)
      : undefined;
    message.promptResponse = (object.promptResponse !== undefined && object.promptResponse !== null)
      ? StaticPrompt_StaticPromptCandidate_StaticPromptResponse.fromPartial(object.promptResponse)
      : undefined;
    return message;
  },
};

function createBaseStaticPrompt_StaticPromptCandidate_StaticPromptResponse(): StaticPrompt_StaticPromptCandidate_StaticPromptResponse {
  return {
    firstSimple: undefined,
    content: undefined,
    lastSimple: undefined,
    suggestions: [],
    link: undefined,
    override: false,
    canvas: undefined,
  };
}

export const StaticPrompt_StaticPromptCandidate_StaticPromptResponse: MessageFns<
  StaticPrompt_StaticPromptCandidate_StaticPromptResponse
> = {
  encode(
    message: StaticPrompt_StaticPromptCandidate_StaticPromptResponse,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.firstSimple !== undefined) {
      StaticSimplePrompt.encode(message.firstSimple, writer.uint32(18).fork()).join();
    }
    if (message.content !== undefined) {
      StaticContentPrompt.encode(message.content, writer.uint32(26).fork()).join();
    }
    if (message.lastSimple !== undefined) {
      StaticSimplePrompt.encode(message.lastSimple, writer.uint32(34).fork()).join();
    }
    for (const v of message.suggestions) {
      Suggestion.encode(v!, writer.uint32(42).fork()).join();
    }
    if (message.link !== undefined) {
      StaticLinkPrompt.encode(message.link, writer.uint32(50).fork()).join();
    }
    if (message.override !== false) {
      writer.uint32(56).bool(message.override);
    }
    if (message.canvas !== undefined) {
      StaticCanvasPrompt.encode(message.canvas, writer.uint32(66).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StaticPrompt_StaticPromptCandidate_StaticPromptResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStaticPrompt_StaticPromptCandidate_StaticPromptResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2:
          if (tag !== 18) {
            break;
          }

          message.firstSimple = StaticSimplePrompt.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.content = StaticContentPrompt.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.lastSimple = StaticSimplePrompt.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.suggestions.push(Suggestion.decode(reader, reader.uint32()));
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.link = StaticLinkPrompt.decode(reader, reader.uint32());
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }

          message.override = reader.bool();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.canvas = StaticCanvasPrompt.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StaticPrompt_StaticPromptCandidate_StaticPromptResponse {
    return {
      firstSimple: isSet(object.firstSimple) ? StaticSimplePrompt.fromJSON(object.firstSimple) : undefined,
      content: isSet(object.content) ? StaticContentPrompt.fromJSON(object.content) : undefined,
      lastSimple: isSet(object.lastSimple) ? StaticSimplePrompt.fromJSON(object.lastSimple) : undefined,
      suggestions: globalThis.Array.isArray(object?.suggestions)
        ? object.suggestions.map((e: any) => Suggestion.fromJSON(e))
        : [],
      link: isSet(object.link) ? StaticLinkPrompt.fromJSON(object.link) : undefined,
      override: isSet(object.override) ? globalThis.Boolean(object.override) : false,
      canvas: isSet(object.canvas) ? StaticCanvasPrompt.fromJSON(object.canvas) : undefined,
    };
  },

  toJSON(message: StaticPrompt_StaticPromptCandidate_StaticPromptResponse): unknown {
    const obj: any = {};
    if (message.firstSimple !== undefined) {
      obj.firstSimple = StaticSimplePrompt.toJSON(message.firstSimple);
    }
    if (message.content !== undefined) {
      obj.content = StaticContentPrompt.toJSON(message.content);
    }
    if (message.lastSimple !== undefined) {
      obj.lastSimple = StaticSimplePrompt.toJSON(message.lastSimple);
    }
    if (message.suggestions?.length) {
      obj.suggestions = message.suggestions.map((e) => Suggestion.toJSON(e));
    }
    if (message.link !== undefined) {
      obj.link = StaticLinkPrompt.toJSON(message.link);
    }
    if (message.override !== false) {
      obj.override = message.override;
    }
    if (message.canvas !== undefined) {
      obj.canvas = StaticCanvasPrompt.toJSON(message.canvas);
    }
    return obj;
  },

  create(
    base?: DeepPartial<StaticPrompt_StaticPromptCandidate_StaticPromptResponse>,
  ): StaticPrompt_StaticPromptCandidate_StaticPromptResponse {
    return StaticPrompt_StaticPromptCandidate_StaticPromptResponse.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<StaticPrompt_StaticPromptCandidate_StaticPromptResponse>,
  ): StaticPrompt_StaticPromptCandidate_StaticPromptResponse {
    const message = createBaseStaticPrompt_StaticPromptCandidate_StaticPromptResponse();
    message.firstSimple = (object.firstSimple !== undefined && object.firstSimple !== null)
      ? StaticSimplePrompt.fromPartial(object.firstSimple)
      : undefined;
    message.content = (object.content !== undefined && object.content !== null)
      ? StaticContentPrompt.fromPartial(object.content)
      : undefined;
    message.lastSimple = (object.lastSimple !== undefined && object.lastSimple !== null)
      ? StaticSimplePrompt.fromPartial(object.lastSimple)
      : undefined;
    message.suggestions = object.suggestions?.map((e) => Suggestion.fromPartial(e)) || [];
    message.link = (object.link !== undefined && object.link !== null)
      ? StaticLinkPrompt.fromPartial(object.link)
      : undefined;
    message.override = object.override ?? false;
    message.canvas = (object.canvas !== undefined && object.canvas !== null)
      ? StaticCanvasPrompt.fromPartial(object.canvas)
      : undefined;
    return message;
  },
};

function createBaseStaticPrompt_Selector(): StaticPrompt_Selector {
  return { surfaceCapabilities: undefined };
}

export const StaticPrompt_Selector: MessageFns<StaticPrompt_Selector> = {
  encode(message: StaticPrompt_Selector, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.surfaceCapabilities !== undefined) {
      SurfaceCapabilities.encode(message.surfaceCapabilities, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StaticPrompt_Selector {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStaticPrompt_Selector();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.surfaceCapabilities = SurfaceCapabilities.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StaticPrompt_Selector {
    return {
      surfaceCapabilities: isSet(object.surfaceCapabilities)
        ? SurfaceCapabilities.fromJSON(object.surfaceCapabilities)
        : undefined,
    };
  },

  toJSON(message: StaticPrompt_Selector): unknown {
    const obj: any = {};
    if (message.surfaceCapabilities !== undefined) {
      obj.surfaceCapabilities = SurfaceCapabilities.toJSON(message.surfaceCapabilities);
    }
    return obj;
  },

  create(base?: DeepPartial<StaticPrompt_Selector>): StaticPrompt_Selector {
    return StaticPrompt_Selector.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<StaticPrompt_Selector>): StaticPrompt_Selector {
    const message = createBaseStaticPrompt_Selector();
    message.surfaceCapabilities = (object.surfaceCapabilities !== undefined && object.surfaceCapabilities !== null)
      ? SurfaceCapabilities.fromPartial(object.surfaceCapabilities)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
