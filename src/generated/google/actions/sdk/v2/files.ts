// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/actions/sdk/v2/files.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { ConfigFiles } from "./config_file.js";
import { DataFiles } from "./data_file.js";

export const protobufPackage = "google.actions.sdk.v2";

/** Wrapper for a list of files. */
export interface Files {
  /**
   * List of config files. This includes manifest, settings, interaction model
   * resource bundles and more.
   */
  configFiles?:
    | ConfigFiles
    | undefined;
  /**
   * List of data files. This includes image, audio file, cloud function
   * source code.
   */
  dataFiles?: DataFiles | undefined;
}

function createBaseFiles(): Files {
  return { configFiles: undefined, dataFiles: undefined };
}

export const Files: MessageFns<Files> = {
  encode(message: Files, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.configFiles !== undefined) {
      ConfigFiles.encode(message.configFiles, writer.uint32(10).fork()).join();
    }
    if (message.dataFiles !== undefined) {
      DataFiles.encode(message.dataFiles, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Files {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFiles();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.configFiles = ConfigFiles.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.dataFiles = DataFiles.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Files {
    return {
      configFiles: isSet(object.configFiles) ? ConfigFiles.fromJSON(object.configFiles) : undefined,
      dataFiles: isSet(object.dataFiles) ? DataFiles.fromJSON(object.dataFiles) : undefined,
    };
  },

  toJSON(message: Files): unknown {
    const obj: any = {};
    if (message.configFiles !== undefined) {
      obj.configFiles = ConfigFiles.toJSON(message.configFiles);
    }
    if (message.dataFiles !== undefined) {
      obj.dataFiles = DataFiles.toJSON(message.dataFiles);
    }
    return obj;
  },

  create(base?: DeepPartial<Files>): Files {
    return Files.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Files>): Files {
    const message = createBaseFiles();
    message.configFiles = (object.configFiles !== undefined && object.configFiles !== null)
      ? ConfigFiles.fromPartial(object.configFiles)
      : undefined;
    message.dataFiles = (object.dataFiles !== undefined && object.dataFiles !== null)
      ? DataFiles.fromPartial(object.dataFiles)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
