// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/bigtable/v2/feature_flags.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.bigtable.v2";

/**
 * Feature flags supported or enabled by a client.
 * This is intended to be sent as part of request metadata to assure the server
 * that certain behaviors are safe to enable. This proto is meant to be
 * serialized and websafe-base64 encoded under the `bigtable-features` metadata
 * key. The value will remain constant for the lifetime of a client and due to
 * HTTP2's HPACK compression, the request overhead will be tiny.
 * This is an internal implementation detail and should not be used by end users
 * directly.
 */
export interface FeatureFlags {
  /**
   * Notify the server that the client supports reverse scans. The server will
   * reject ReadRowsRequests with the reverse bit set when this is absent.
   */
  reverseScans: boolean;
  /**
   * Notify the server that the client enables batch write flow control by
   * requesting RateLimitInfo from MutateRowsResponse. Due to technical reasons,
   * this disables partial retries.
   */
  mutateRowsRateLimit: boolean;
  /**
   * Notify the server that the client enables batch write flow control by
   * requesting RateLimitInfo from MutateRowsResponse. With partial retries
   * enabled.
   */
  mutateRowsRateLimit2: boolean;
  /**
   * Notify the server that the client supports the last_scanned_row field
   * in ReadRowsResponse for long-running scans.
   */
  lastScannedRowResponses: boolean;
  /**
   * Notify the server that the client supports using encoded routing cookie
   * strings to retry requests with.
   */
  routingCookie: boolean;
  /**
   * Notify the server that the client supports using retry info back off
   * durations to retry requests with.
   */
  retryInfo: boolean;
  /** Notify the server that the client has client side metrics enabled. */
  clientSideMetricsEnabled: boolean;
}

function createBaseFeatureFlags(): FeatureFlags {
  return {
    reverseScans: false,
    mutateRowsRateLimit: false,
    mutateRowsRateLimit2: false,
    lastScannedRowResponses: false,
    routingCookie: false,
    retryInfo: false,
    clientSideMetricsEnabled: false,
  };
}

export const FeatureFlags: MessageFns<FeatureFlags> = {
  encode(message: FeatureFlags, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.reverseScans !== false) {
      writer.uint32(8).bool(message.reverseScans);
    }
    if (message.mutateRowsRateLimit !== false) {
      writer.uint32(24).bool(message.mutateRowsRateLimit);
    }
    if (message.mutateRowsRateLimit2 !== false) {
      writer.uint32(40).bool(message.mutateRowsRateLimit2);
    }
    if (message.lastScannedRowResponses !== false) {
      writer.uint32(32).bool(message.lastScannedRowResponses);
    }
    if (message.routingCookie !== false) {
      writer.uint32(48).bool(message.routingCookie);
    }
    if (message.retryInfo !== false) {
      writer.uint32(56).bool(message.retryInfo);
    }
    if (message.clientSideMetricsEnabled !== false) {
      writer.uint32(64).bool(message.clientSideMetricsEnabled);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FeatureFlags {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFeatureFlags();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.reverseScans = reader.bool();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.mutateRowsRateLimit = reader.bool();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.mutateRowsRateLimit2 = reader.bool();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.lastScannedRowResponses = reader.bool();
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.routingCookie = reader.bool();
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }

          message.retryInfo = reader.bool();
          continue;
        case 8:
          if (tag !== 64) {
            break;
          }

          message.clientSideMetricsEnabled = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FeatureFlags {
    return {
      reverseScans: isSet(object.reverseScans) ? globalThis.Boolean(object.reverseScans) : false,
      mutateRowsRateLimit: isSet(object.mutateRowsRateLimit) ? globalThis.Boolean(object.mutateRowsRateLimit) : false,
      mutateRowsRateLimit2: isSet(object.mutateRowsRateLimit2)
        ? globalThis.Boolean(object.mutateRowsRateLimit2)
        : false,
      lastScannedRowResponses: isSet(object.lastScannedRowResponses)
        ? globalThis.Boolean(object.lastScannedRowResponses)
        : false,
      routingCookie: isSet(object.routingCookie) ? globalThis.Boolean(object.routingCookie) : false,
      retryInfo: isSet(object.retryInfo) ? globalThis.Boolean(object.retryInfo) : false,
      clientSideMetricsEnabled: isSet(object.clientSideMetricsEnabled)
        ? globalThis.Boolean(object.clientSideMetricsEnabled)
        : false,
    };
  },

  toJSON(message: FeatureFlags): unknown {
    const obj: any = {};
    if (message.reverseScans !== false) {
      obj.reverseScans = message.reverseScans;
    }
    if (message.mutateRowsRateLimit !== false) {
      obj.mutateRowsRateLimit = message.mutateRowsRateLimit;
    }
    if (message.mutateRowsRateLimit2 !== false) {
      obj.mutateRowsRateLimit2 = message.mutateRowsRateLimit2;
    }
    if (message.lastScannedRowResponses !== false) {
      obj.lastScannedRowResponses = message.lastScannedRowResponses;
    }
    if (message.routingCookie !== false) {
      obj.routingCookie = message.routingCookie;
    }
    if (message.retryInfo !== false) {
      obj.retryInfo = message.retryInfo;
    }
    if (message.clientSideMetricsEnabled !== false) {
      obj.clientSideMetricsEnabled = message.clientSideMetricsEnabled;
    }
    return obj;
  },

  create(base?: DeepPartial<FeatureFlags>): FeatureFlags {
    return FeatureFlags.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<FeatureFlags>): FeatureFlags {
    const message = createBaseFeatureFlags();
    message.reverseScans = object.reverseScans ?? false;
    message.mutateRowsRateLimit = object.mutateRowsRateLimit ?? false;
    message.mutateRowsRateLimit2 = object.mutateRowsRateLimit2 ?? false;
    message.lastScannedRowResponses = object.lastScannedRowResponses ?? false;
    message.routingCookie = object.routingCookie ?? false;
    message.retryInfo = object.retryInfo ?? false;
    message.clientSideMetricsEnabled = object.clientSideMetricsEnabled ?? false;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
