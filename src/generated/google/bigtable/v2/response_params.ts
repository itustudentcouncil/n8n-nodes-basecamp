// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/bigtable/v2/response_params.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.bigtable.v2";

/**
 * Response metadata proto
 * This is an experimental feature that will be used to get zone_id and
 * cluster_id from response trailers to tag the metrics. This should not be
 * used by customers directly
 */
export interface ResponseParams {
  /** The cloud bigtable zone associated with the cluster. */
  zoneId?:
    | string
    | undefined;
  /**
   * Identifier for a cluster that represents set of
   * bigtable resources.
   */
  clusterId?: string | undefined;
}

function createBaseResponseParams(): ResponseParams {
  return { zoneId: undefined, clusterId: undefined };
}

export const ResponseParams: MessageFns<ResponseParams> = {
  encode(message: ResponseParams, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.zoneId !== undefined) {
      writer.uint32(10).string(message.zoneId);
    }
    if (message.clusterId !== undefined) {
      writer.uint32(18).string(message.clusterId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ResponseParams {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResponseParams();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.zoneId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.clusterId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ResponseParams {
    return {
      zoneId: isSet(object.zoneId) ? globalThis.String(object.zoneId) : undefined,
      clusterId: isSet(object.clusterId) ? globalThis.String(object.clusterId) : undefined,
    };
  },

  toJSON(message: ResponseParams): unknown {
    const obj: any = {};
    if (message.zoneId !== undefined) {
      obj.zoneId = message.zoneId;
    }
    if (message.clusterId !== undefined) {
      obj.clusterId = message.clusterId;
    }
    return obj;
  },

  create(base?: DeepPartial<ResponseParams>): ResponseParams {
    return ResponseParams.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ResponseParams>): ResponseParams {
    const message = createBaseResponseParams();
    message.zoneId = object.zoneId ?? undefined;
    message.clusterId = object.clusterId ?? undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
