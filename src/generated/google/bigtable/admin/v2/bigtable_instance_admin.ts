// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/bigtable/admin/v2/bigtable_instance_admin.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import {
  GetIamPolicyRequest,
  SetIamPolicyRequest,
  TestIamPermissionsRequest,
  TestIamPermissionsResponse,
} from "../../../iam/v1/iam_policy.js";
import { Policy } from "../../../iam/v1/policy.js";
import { Operation } from "../../../longrunning/operations.js";
import { Empty } from "../../../protobuf/empty.js";
import { FieldMask } from "../../../protobuf/field_mask.js";
import { Timestamp } from "../../../protobuf/timestamp.js";
import { AppProfile, Cluster, HotTablet, Instance } from "./instance.js";

export const protobufPackage = "google.bigtable.admin.v2";

/** Request message for BigtableInstanceAdmin.CreateInstance. */
export interface CreateInstanceRequest {
  /**
   * Required. The unique name of the project in which to create the new
   * instance. Values are of the form `projects/{project}`.
   */
  parent: string;
  /**
   * Required. The ID to be used when referring to the new instance within its
   * project, e.g., just `myinstance` rather than
   * `projects/myproject/instances/myinstance`.
   */
  instanceId: string;
  /**
   * Required. The instance to create.
   * Fields marked `OutputOnly` must be left blank.
   */
  instance:
    | Instance
    | undefined;
  /**
   * Required. The clusters to be created within the instance, mapped by desired
   * cluster ID, e.g., just `mycluster` rather than
   * `projects/myproject/instances/myinstance/clusters/mycluster`.
   * Fields marked `OutputOnly` must be left blank.
   * Currently, at most four clusters can be specified.
   */
  clusters: { [key: string]: Cluster };
}

export interface CreateInstanceRequest_ClustersEntry {
  key: string;
  value: Cluster | undefined;
}

/** Request message for BigtableInstanceAdmin.GetInstance. */
export interface GetInstanceRequest {
  /**
   * Required. The unique name of the requested instance. Values are of the form
   * `projects/{project}/instances/{instance}`.
   */
  name: string;
}

/** Request message for BigtableInstanceAdmin.ListInstances. */
export interface ListInstancesRequest {
  /**
   * Required. The unique name of the project for which a list of instances is
   * requested. Values are of the form `projects/{project}`.
   */
  parent: string;
  /** DEPRECATED: This field is unused and ignored. */
  pageToken: string;
}

/** Response message for BigtableInstanceAdmin.ListInstances. */
export interface ListInstancesResponse {
  /** The list of requested instances. */
  instances: Instance[];
  /**
   * Locations from which Instance information could not be retrieved,
   * due to an outage or some other transient condition.
   * Instances whose Clusters are all in one of the failed locations
   * may be missing from `instances`, and Instances with at least one
   * Cluster in a failed location may only have partial information returned.
   * Values are of the form `projects/<project>/locations/<zone_id>`
   */
  failedLocations: string[];
  /** DEPRECATED: This field is unused and ignored. */
  nextPageToken: string;
}

/** Request message for BigtableInstanceAdmin.PartialUpdateInstance. */
export interface PartialUpdateInstanceRequest {
  /** Required. The Instance which will (partially) replace the current value. */
  instance:
    | Instance
    | undefined;
  /**
   * Required. The subset of Instance fields which should be replaced.
   * Must be explicitly set.
   */
  updateMask: string[] | undefined;
}

/** Request message for BigtableInstanceAdmin.DeleteInstance. */
export interface DeleteInstanceRequest {
  /**
   * Required. The unique name of the instance to be deleted.
   * Values are of the form `projects/{project}/instances/{instance}`.
   */
  name: string;
}

/** Request message for BigtableInstanceAdmin.CreateCluster. */
export interface CreateClusterRequest {
  /**
   * Required. The unique name of the instance in which to create the new
   * cluster. Values are of the form `projects/{project}/instances/{instance}`.
   */
  parent: string;
  /**
   * Required. The ID to be used when referring to the new cluster within its
   * instance, e.g., just `mycluster` rather than
   * `projects/myproject/instances/myinstance/clusters/mycluster`.
   */
  clusterId: string;
  /**
   * Required. The cluster to be created.
   * Fields marked `OutputOnly` must be left blank.
   */
  cluster: Cluster | undefined;
}

/** Request message for BigtableInstanceAdmin.GetCluster. */
export interface GetClusterRequest {
  /**
   * Required. The unique name of the requested cluster. Values are of the form
   * `projects/{project}/instances/{instance}/clusters/{cluster}`.
   */
  name: string;
}

/** Request message for BigtableInstanceAdmin.ListClusters. */
export interface ListClustersRequest {
  /**
   * Required. The unique name of the instance for which a list of clusters is
   * requested. Values are of the form
   * `projects/{project}/instances/{instance}`. Use `{instance} = '-'` to list
   * Clusters for all Instances in a project, e.g.,
   * `projects/myproject/instances/-`.
   */
  parent: string;
  /** DEPRECATED: This field is unused and ignored. */
  pageToken: string;
}

/** Response message for BigtableInstanceAdmin.ListClusters. */
export interface ListClustersResponse {
  /** The list of requested clusters. */
  clusters: Cluster[];
  /**
   * Locations from which Cluster information could not be retrieved,
   * due to an outage or some other transient condition.
   * Clusters from these locations may be missing from `clusters`,
   * or may only have partial information returned.
   * Values are of the form `projects/<project>/locations/<zone_id>`
   */
  failedLocations: string[];
  /** DEPRECATED: This field is unused and ignored. */
  nextPageToken: string;
}

/** Request message for BigtableInstanceAdmin.DeleteCluster. */
export interface DeleteClusterRequest {
  /**
   * Required. The unique name of the cluster to be deleted. Values are of the
   * form `projects/{project}/instances/{instance}/clusters/{cluster}`.
   */
  name: string;
}

/** The metadata for the Operation returned by CreateInstance. */
export interface CreateInstanceMetadata {
  /** The request that prompted the initiation of this CreateInstance operation. */
  originalRequest:
    | CreateInstanceRequest
    | undefined;
  /** The time at which the original request was received. */
  requestTime:
    | Date
    | undefined;
  /** The time at which the operation failed or was completed successfully. */
  finishTime: Date | undefined;
}

/** The metadata for the Operation returned by UpdateInstance. */
export interface UpdateInstanceMetadata {
  /** The request that prompted the initiation of this UpdateInstance operation. */
  originalRequest:
    | PartialUpdateInstanceRequest
    | undefined;
  /** The time at which the original request was received. */
  requestTime:
    | Date
    | undefined;
  /** The time at which the operation failed or was completed successfully. */
  finishTime: Date | undefined;
}

/** The metadata for the Operation returned by CreateCluster. */
export interface CreateClusterMetadata {
  /** The request that prompted the initiation of this CreateCluster operation. */
  originalRequest:
    | CreateClusterRequest
    | undefined;
  /** The time at which the original request was received. */
  requestTime:
    | Date
    | undefined;
  /** The time at which the operation failed or was completed successfully. */
  finishTime:
    | Date
    | undefined;
  /**
   * Keys: the full `name` of each table that existed in the instance when
   * CreateCluster was first called, i.e.
   * `projects/<project>/instances/<instance>/tables/<table>`. Any table added
   * to the instance by a later API call will be created in the new cluster by
   * that API call, not this one.
   *
   * Values: information on how much of a table's data has been copied to the
   * newly-created cluster so far.
   */
  tables: { [key: string]: CreateClusterMetadata_TableProgress };
}

/** Progress info for copying a table's data to the new cluster. */
export interface CreateClusterMetadata_TableProgress {
  /** Estimate of the size of the table to be copied. */
  estimatedSizeBytes: Long;
  /**
   * Estimate of the number of bytes copied so far for this table.
   * This will eventually reach 'estimated_size_bytes' unless the table copy
   * is CANCELLED.
   */
  estimatedCopiedBytes: Long;
  state: CreateClusterMetadata_TableProgress_State;
}

export enum CreateClusterMetadata_TableProgress_State {
  STATE_UNSPECIFIED = 0,
  /** PENDING - The table has not yet begun copying to the new cluster. */
  PENDING = 1,
  /** COPYING - The table is actively being copied to the new cluster. */
  COPYING = 2,
  /** COMPLETED - The table has been fully copied to the new cluster. */
  COMPLETED = 3,
  /**
   * CANCELLED - The table was deleted before it finished copying to the new cluster.
   * Note that tables deleted after completion will stay marked as
   * COMPLETED, not CANCELLED.
   */
  CANCELLED = 4,
  UNRECOGNIZED = -1,
}

export function createClusterMetadata_TableProgress_StateFromJSON(
  object: any,
): CreateClusterMetadata_TableProgress_State {
  switch (object) {
    case 0:
    case "STATE_UNSPECIFIED":
      return CreateClusterMetadata_TableProgress_State.STATE_UNSPECIFIED;
    case 1:
    case "PENDING":
      return CreateClusterMetadata_TableProgress_State.PENDING;
    case 2:
    case "COPYING":
      return CreateClusterMetadata_TableProgress_State.COPYING;
    case 3:
    case "COMPLETED":
      return CreateClusterMetadata_TableProgress_State.COMPLETED;
    case 4:
    case "CANCELLED":
      return CreateClusterMetadata_TableProgress_State.CANCELLED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return CreateClusterMetadata_TableProgress_State.UNRECOGNIZED;
  }
}

export function createClusterMetadata_TableProgress_StateToJSON(
  object: CreateClusterMetadata_TableProgress_State,
): string {
  switch (object) {
    case CreateClusterMetadata_TableProgress_State.STATE_UNSPECIFIED:
      return "STATE_UNSPECIFIED";
    case CreateClusterMetadata_TableProgress_State.PENDING:
      return "PENDING";
    case CreateClusterMetadata_TableProgress_State.COPYING:
      return "COPYING";
    case CreateClusterMetadata_TableProgress_State.COMPLETED:
      return "COMPLETED";
    case CreateClusterMetadata_TableProgress_State.CANCELLED:
      return "CANCELLED";
    case CreateClusterMetadata_TableProgress_State.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface CreateClusterMetadata_TablesEntry {
  key: string;
  value: CreateClusterMetadata_TableProgress | undefined;
}

/** The metadata for the Operation returned by UpdateCluster. */
export interface UpdateClusterMetadata {
  /** The request that prompted the initiation of this UpdateCluster operation. */
  originalRequest:
    | Cluster
    | undefined;
  /** The time at which the original request was received. */
  requestTime:
    | Date
    | undefined;
  /** The time at which the operation failed or was completed successfully. */
  finishTime: Date | undefined;
}

/** The metadata for the Operation returned by PartialUpdateCluster. */
export interface PartialUpdateClusterMetadata {
  /** The time at which the original request was received. */
  requestTime:
    | Date
    | undefined;
  /** The time at which the operation failed or was completed successfully. */
  finishTime:
    | Date
    | undefined;
  /** The original request for PartialUpdateCluster. */
  originalRequest: PartialUpdateClusterRequest | undefined;
}

/** Request message for BigtableInstanceAdmin.PartialUpdateCluster. */
export interface PartialUpdateClusterRequest {
  /**
   * Required. The Cluster which contains the partial updates to be applied,
   * subject to the update_mask.
   */
  cluster:
    | Cluster
    | undefined;
  /** Required. The subset of Cluster fields which should be replaced. */
  updateMask: string[] | undefined;
}

/** Request message for BigtableInstanceAdmin.CreateAppProfile. */
export interface CreateAppProfileRequest {
  /**
   * Required. The unique name of the instance in which to create the new app
   * profile. Values are of the form `projects/{project}/instances/{instance}`.
   */
  parent: string;
  /**
   * Required. The ID to be used when referring to the new app profile within
   * its instance, e.g., just `myprofile` rather than
   * `projects/myproject/instances/myinstance/appProfiles/myprofile`.
   */
  appProfileId: string;
  /**
   * Required. The app profile to be created.
   * Fields marked `OutputOnly` will be ignored.
   */
  appProfile:
    | AppProfile
    | undefined;
  /** If true, ignore safety checks when creating the app profile. */
  ignoreWarnings: boolean;
}

/** Request message for BigtableInstanceAdmin.GetAppProfile. */
export interface GetAppProfileRequest {
  /**
   * Required. The unique name of the requested app profile. Values are of the
   * form `projects/{project}/instances/{instance}/appProfiles/{app_profile}`.
   */
  name: string;
}

/** Request message for BigtableInstanceAdmin.ListAppProfiles. */
export interface ListAppProfilesRequest {
  /**
   * Required. The unique name of the instance for which a list of app profiles
   * is requested. Values are of the form
   * `projects/{project}/instances/{instance}`.
   * Use `{instance} = '-'` to list AppProfiles for all Instances in a project,
   * e.g., `projects/myproject/instances/-`.
   */
  parent: string;
  /**
   * Maximum number of results per page.
   *
   * A page_size of zero lets the server choose the number of items to return.
   * A page_size which is strictly positive will return at most that many items.
   * A negative page_size will cause an error.
   *
   * Following the first request, subsequent paginated calls are not required
   * to pass a page_size. If a page_size is set in subsequent calls, it must
   * match the page_size given in the first request.
   */
  pageSize: number;
  /** The value of `next_page_token` returned by a previous call. */
  pageToken: string;
}

/** Response message for BigtableInstanceAdmin.ListAppProfiles. */
export interface ListAppProfilesResponse {
  /** The list of requested app profiles. */
  appProfiles: AppProfile[];
  /**
   * Set if not all app profiles could be returned in a single response.
   * Pass this value to `page_token` in another request to get the next
   * page of results.
   */
  nextPageToken: string;
  /**
   * Locations from which AppProfile information could not be retrieved,
   * due to an outage or some other transient condition.
   * AppProfiles from these locations may be missing from `app_profiles`.
   * Values are of the form `projects/<project>/locations/<zone_id>`
   */
  failedLocations: string[];
}

/** Request message for BigtableInstanceAdmin.UpdateAppProfile. */
export interface UpdateAppProfileRequest {
  /** Required. The app profile which will (partially) replace the current value. */
  appProfile:
    | AppProfile
    | undefined;
  /**
   * Required. The subset of app profile fields which should be replaced.
   * If unset, all fields will be replaced.
   */
  updateMask:
    | string[]
    | undefined;
  /** If true, ignore safety checks when updating the app profile. */
  ignoreWarnings: boolean;
}

/** Request message for BigtableInstanceAdmin.DeleteAppProfile. */
export interface DeleteAppProfileRequest {
  /**
   * Required. The unique name of the app profile to be deleted. Values are of
   * the form
   * `projects/{project}/instances/{instance}/appProfiles/{app_profile}`.
   */
  name: string;
  /** Required. If true, ignore safety checks when deleting the app profile. */
  ignoreWarnings: boolean;
}

/** The metadata for the Operation returned by UpdateAppProfile. */
export interface UpdateAppProfileMetadata {
}

/** Request message for BigtableInstanceAdmin.ListHotTablets. */
export interface ListHotTabletsRequest {
  /**
   * Required. The cluster name to list hot tablets.
   * Value is in the following form:
   * `projects/{project}/instances/{instance}/clusters/{cluster}`.
   */
  parent: string;
  /**
   * The start time to list hot tablets. The hot tablets in the response will
   * have start times between the requested start time and end time. Start time
   * defaults to Now if it is unset, and end time defaults to Now - 24 hours if
   * it is unset. The start time should be less than the end time, and the
   * maximum allowed time range between start time and end time is 48 hours.
   * Start time and end time should have values between Now and Now - 14 days.
   */
  startTime:
    | Date
    | undefined;
  /** The end time to list hot tablets. */
  endTime:
    | Date
    | undefined;
  /**
   * Maximum number of results per page.
   *
   * A page_size that is empty or zero lets the server choose the number of
   * items to return. A page_size which is strictly positive will return at most
   * that many items. A negative page_size will cause an error.
   *
   * Following the first request, subsequent paginated calls do not need a
   * page_size field. If a page_size is set in subsequent calls, it must match
   * the page_size given in the first request.
   */
  pageSize: number;
  /** The value of `next_page_token` returned by a previous call. */
  pageToken: string;
}

/** Response message for BigtableInstanceAdmin.ListHotTablets. */
export interface ListHotTabletsResponse {
  /**
   * List of hot tablets in the tables of the requested cluster that fall
   * within the requested time range. Hot tablets are ordered by node cpu usage
   * percent. If there are multiple hot tablets that correspond to the same
   * tablet within a 15-minute interval, only the hot tablet with the highest
   * node cpu usage will be included in the response.
   */
  hotTablets: HotTablet[];
  /**
   * Set if not all hot tablets could be returned in a single response.
   * Pass this value to `page_token` in another request to get the next
   * page of results.
   */
  nextPageToken: string;
}

function createBaseCreateInstanceRequest(): CreateInstanceRequest {
  return { parent: "", instanceId: "", instance: undefined, clusters: {} };
}

export const CreateInstanceRequest: MessageFns<CreateInstanceRequest> = {
  encode(message: CreateInstanceRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.instanceId !== "") {
      writer.uint32(18).string(message.instanceId);
    }
    if (message.instance !== undefined) {
      Instance.encode(message.instance, writer.uint32(26).fork()).join();
    }
    Object.entries(message.clusters).forEach(([key, value]) => {
      CreateInstanceRequest_ClustersEntry.encode({ key: key as any, value }, writer.uint32(34).fork()).join();
    });
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateInstanceRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateInstanceRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.instanceId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.instance = Instance.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          const entry4 = CreateInstanceRequest_ClustersEntry.decode(reader, reader.uint32());
          if (entry4.value !== undefined) {
            message.clusters[entry4.key] = entry4.value;
          }
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateInstanceRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      instanceId: isSet(object.instanceId) ? globalThis.String(object.instanceId) : "",
      instance: isSet(object.instance) ? Instance.fromJSON(object.instance) : undefined,
      clusters: isObject(object.clusters)
        ? Object.entries(object.clusters).reduce<{ [key: string]: Cluster }>((acc, [key, value]) => {
          acc[key] = Cluster.fromJSON(value);
          return acc;
        }, {})
        : {},
    };
  },

  toJSON(message: CreateInstanceRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.instanceId !== "") {
      obj.instanceId = message.instanceId;
    }
    if (message.instance !== undefined) {
      obj.instance = Instance.toJSON(message.instance);
    }
    if (message.clusters) {
      const entries = Object.entries(message.clusters);
      if (entries.length > 0) {
        obj.clusters = {};
        entries.forEach(([k, v]) => {
          obj.clusters[k] = Cluster.toJSON(v);
        });
      }
    }
    return obj;
  },

  create(base?: DeepPartial<CreateInstanceRequest>): CreateInstanceRequest {
    return CreateInstanceRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateInstanceRequest>): CreateInstanceRequest {
    const message = createBaseCreateInstanceRequest();
    message.parent = object.parent ?? "";
    message.instanceId = object.instanceId ?? "";
    message.instance = (object.instance !== undefined && object.instance !== null)
      ? Instance.fromPartial(object.instance)
      : undefined;
    message.clusters = Object.entries(object.clusters ?? {}).reduce<{ [key: string]: Cluster }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = Cluster.fromPartial(value);
      }
      return acc;
    }, {});
    return message;
  },
};

function createBaseCreateInstanceRequest_ClustersEntry(): CreateInstanceRequest_ClustersEntry {
  return { key: "", value: undefined };
}

export const CreateInstanceRequest_ClustersEntry: MessageFns<CreateInstanceRequest_ClustersEntry> = {
  encode(message: CreateInstanceRequest_ClustersEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== undefined) {
      Cluster.encode(message.value, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateInstanceRequest_ClustersEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateInstanceRequest_ClustersEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = Cluster.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateInstanceRequest_ClustersEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? Cluster.fromJSON(object.value) : undefined,
    };
  },

  toJSON(message: CreateInstanceRequest_ClustersEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== undefined) {
      obj.value = Cluster.toJSON(message.value);
    }
    return obj;
  },

  create(base?: DeepPartial<CreateInstanceRequest_ClustersEntry>): CreateInstanceRequest_ClustersEntry {
    return CreateInstanceRequest_ClustersEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateInstanceRequest_ClustersEntry>): CreateInstanceRequest_ClustersEntry {
    const message = createBaseCreateInstanceRequest_ClustersEntry();
    message.key = object.key ?? "";
    message.value = (object.value !== undefined && object.value !== null)
      ? Cluster.fromPartial(object.value)
      : undefined;
    return message;
  },
};

function createBaseGetInstanceRequest(): GetInstanceRequest {
  return { name: "" };
}

export const GetInstanceRequest: MessageFns<GetInstanceRequest> = {
  encode(message: GetInstanceRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetInstanceRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetInstanceRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetInstanceRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetInstanceRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetInstanceRequest>): GetInstanceRequest {
    return GetInstanceRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetInstanceRequest>): GetInstanceRequest {
    const message = createBaseGetInstanceRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseListInstancesRequest(): ListInstancesRequest {
  return { parent: "", pageToken: "" };
}

export const ListInstancesRequest: MessageFns<ListInstancesRequest> = {
  encode(message: ListInstancesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageToken !== "") {
      writer.uint32(18).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListInstancesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListInstancesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListInstancesRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: ListInstancesRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListInstancesRequest>): ListInstancesRequest {
    return ListInstancesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListInstancesRequest>): ListInstancesRequest {
    const message = createBaseListInstancesRequest();
    message.parent = object.parent ?? "";
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseListInstancesResponse(): ListInstancesResponse {
  return { instances: [], failedLocations: [], nextPageToken: "" };
}

export const ListInstancesResponse: MessageFns<ListInstancesResponse> = {
  encode(message: ListInstancesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.instances) {
      Instance.encode(v!, writer.uint32(10).fork()).join();
    }
    for (const v of message.failedLocations) {
      writer.uint32(18).string(v!);
    }
    if (message.nextPageToken !== "") {
      writer.uint32(26).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListInstancesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListInstancesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.instances.push(Instance.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.failedLocations.push(reader.string());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListInstancesResponse {
    return {
      instances: globalThis.Array.isArray(object?.instances)
        ? object.instances.map((e: any) => Instance.fromJSON(e))
        : [],
      failedLocations: globalThis.Array.isArray(object?.failedLocations)
        ? object.failedLocations.map((e: any) => globalThis.String(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListInstancesResponse): unknown {
    const obj: any = {};
    if (message.instances?.length) {
      obj.instances = message.instances.map((e) => Instance.toJSON(e));
    }
    if (message.failedLocations?.length) {
      obj.failedLocations = message.failedLocations;
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListInstancesResponse>): ListInstancesResponse {
    return ListInstancesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListInstancesResponse>): ListInstancesResponse {
    const message = createBaseListInstancesResponse();
    message.instances = object.instances?.map((e) => Instance.fromPartial(e)) || [];
    message.failedLocations = object.failedLocations?.map((e) => e) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBasePartialUpdateInstanceRequest(): PartialUpdateInstanceRequest {
  return { instance: undefined, updateMask: undefined };
}

export const PartialUpdateInstanceRequest: MessageFns<PartialUpdateInstanceRequest> = {
  encode(message: PartialUpdateInstanceRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.instance !== undefined) {
      Instance.encode(message.instance, writer.uint32(10).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PartialUpdateInstanceRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePartialUpdateInstanceRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.instance = Instance.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PartialUpdateInstanceRequest {
    return {
      instance: isSet(object.instance) ? Instance.fromJSON(object.instance) : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
    };
  },

  toJSON(message: PartialUpdateInstanceRequest): unknown {
    const obj: any = {};
    if (message.instance !== undefined) {
      obj.instance = Instance.toJSON(message.instance);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    return obj;
  },

  create(base?: DeepPartial<PartialUpdateInstanceRequest>): PartialUpdateInstanceRequest {
    return PartialUpdateInstanceRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<PartialUpdateInstanceRequest>): PartialUpdateInstanceRequest {
    const message = createBasePartialUpdateInstanceRequest();
    message.instance = (object.instance !== undefined && object.instance !== null)
      ? Instance.fromPartial(object.instance)
      : undefined;
    message.updateMask = object.updateMask ?? undefined;
    return message;
  },
};

function createBaseDeleteInstanceRequest(): DeleteInstanceRequest {
  return { name: "" };
}

export const DeleteInstanceRequest: MessageFns<DeleteInstanceRequest> = {
  encode(message: DeleteInstanceRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteInstanceRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteInstanceRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteInstanceRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: DeleteInstanceRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteInstanceRequest>): DeleteInstanceRequest {
    return DeleteInstanceRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteInstanceRequest>): DeleteInstanceRequest {
    const message = createBaseDeleteInstanceRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseCreateClusterRequest(): CreateClusterRequest {
  return { parent: "", clusterId: "", cluster: undefined };
}

export const CreateClusterRequest: MessageFns<CreateClusterRequest> = {
  encode(message: CreateClusterRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.clusterId !== "") {
      writer.uint32(18).string(message.clusterId);
    }
    if (message.cluster !== undefined) {
      Cluster.encode(message.cluster, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateClusterRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateClusterRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.clusterId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.cluster = Cluster.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateClusterRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      clusterId: isSet(object.clusterId) ? globalThis.String(object.clusterId) : "",
      cluster: isSet(object.cluster) ? Cluster.fromJSON(object.cluster) : undefined,
    };
  },

  toJSON(message: CreateClusterRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.clusterId !== "") {
      obj.clusterId = message.clusterId;
    }
    if (message.cluster !== undefined) {
      obj.cluster = Cluster.toJSON(message.cluster);
    }
    return obj;
  },

  create(base?: DeepPartial<CreateClusterRequest>): CreateClusterRequest {
    return CreateClusterRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateClusterRequest>): CreateClusterRequest {
    const message = createBaseCreateClusterRequest();
    message.parent = object.parent ?? "";
    message.clusterId = object.clusterId ?? "";
    message.cluster = (object.cluster !== undefined && object.cluster !== null)
      ? Cluster.fromPartial(object.cluster)
      : undefined;
    return message;
  },
};

function createBaseGetClusterRequest(): GetClusterRequest {
  return { name: "" };
}

export const GetClusterRequest: MessageFns<GetClusterRequest> = {
  encode(message: GetClusterRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetClusterRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetClusterRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetClusterRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetClusterRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetClusterRequest>): GetClusterRequest {
    return GetClusterRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetClusterRequest>): GetClusterRequest {
    const message = createBaseGetClusterRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseListClustersRequest(): ListClustersRequest {
  return { parent: "", pageToken: "" };
}

export const ListClustersRequest: MessageFns<ListClustersRequest> = {
  encode(message: ListClustersRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageToken !== "") {
      writer.uint32(18).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListClustersRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListClustersRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListClustersRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: ListClustersRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListClustersRequest>): ListClustersRequest {
    return ListClustersRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListClustersRequest>): ListClustersRequest {
    const message = createBaseListClustersRequest();
    message.parent = object.parent ?? "";
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseListClustersResponse(): ListClustersResponse {
  return { clusters: [], failedLocations: [], nextPageToken: "" };
}

export const ListClustersResponse: MessageFns<ListClustersResponse> = {
  encode(message: ListClustersResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.clusters) {
      Cluster.encode(v!, writer.uint32(10).fork()).join();
    }
    for (const v of message.failedLocations) {
      writer.uint32(18).string(v!);
    }
    if (message.nextPageToken !== "") {
      writer.uint32(26).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListClustersResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListClustersResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.clusters.push(Cluster.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.failedLocations.push(reader.string());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListClustersResponse {
    return {
      clusters: globalThis.Array.isArray(object?.clusters) ? object.clusters.map((e: any) => Cluster.fromJSON(e)) : [],
      failedLocations: globalThis.Array.isArray(object?.failedLocations)
        ? object.failedLocations.map((e: any) => globalThis.String(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListClustersResponse): unknown {
    const obj: any = {};
    if (message.clusters?.length) {
      obj.clusters = message.clusters.map((e) => Cluster.toJSON(e));
    }
    if (message.failedLocations?.length) {
      obj.failedLocations = message.failedLocations;
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListClustersResponse>): ListClustersResponse {
    return ListClustersResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListClustersResponse>): ListClustersResponse {
    const message = createBaseListClustersResponse();
    message.clusters = object.clusters?.map((e) => Cluster.fromPartial(e)) || [];
    message.failedLocations = object.failedLocations?.map((e) => e) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseDeleteClusterRequest(): DeleteClusterRequest {
  return { name: "" };
}

export const DeleteClusterRequest: MessageFns<DeleteClusterRequest> = {
  encode(message: DeleteClusterRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteClusterRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteClusterRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteClusterRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: DeleteClusterRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteClusterRequest>): DeleteClusterRequest {
    return DeleteClusterRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteClusterRequest>): DeleteClusterRequest {
    const message = createBaseDeleteClusterRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseCreateInstanceMetadata(): CreateInstanceMetadata {
  return { originalRequest: undefined, requestTime: undefined, finishTime: undefined };
}

export const CreateInstanceMetadata: MessageFns<CreateInstanceMetadata> = {
  encode(message: CreateInstanceMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.originalRequest !== undefined) {
      CreateInstanceRequest.encode(message.originalRequest, writer.uint32(10).fork()).join();
    }
    if (message.requestTime !== undefined) {
      Timestamp.encode(toTimestamp(message.requestTime), writer.uint32(18).fork()).join();
    }
    if (message.finishTime !== undefined) {
      Timestamp.encode(toTimestamp(message.finishTime), writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateInstanceMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateInstanceMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.originalRequest = CreateInstanceRequest.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.requestTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.finishTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateInstanceMetadata {
    return {
      originalRequest: isSet(object.originalRequest)
        ? CreateInstanceRequest.fromJSON(object.originalRequest)
        : undefined,
      requestTime: isSet(object.requestTime) ? fromJsonTimestamp(object.requestTime) : undefined,
      finishTime: isSet(object.finishTime) ? fromJsonTimestamp(object.finishTime) : undefined,
    };
  },

  toJSON(message: CreateInstanceMetadata): unknown {
    const obj: any = {};
    if (message.originalRequest !== undefined) {
      obj.originalRequest = CreateInstanceRequest.toJSON(message.originalRequest);
    }
    if (message.requestTime !== undefined) {
      obj.requestTime = message.requestTime.toISOString();
    }
    if (message.finishTime !== undefined) {
      obj.finishTime = message.finishTime.toISOString();
    }
    return obj;
  },

  create(base?: DeepPartial<CreateInstanceMetadata>): CreateInstanceMetadata {
    return CreateInstanceMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateInstanceMetadata>): CreateInstanceMetadata {
    const message = createBaseCreateInstanceMetadata();
    message.originalRequest = (object.originalRequest !== undefined && object.originalRequest !== null)
      ? CreateInstanceRequest.fromPartial(object.originalRequest)
      : undefined;
    message.requestTime = object.requestTime ?? undefined;
    message.finishTime = object.finishTime ?? undefined;
    return message;
  },
};

function createBaseUpdateInstanceMetadata(): UpdateInstanceMetadata {
  return { originalRequest: undefined, requestTime: undefined, finishTime: undefined };
}

export const UpdateInstanceMetadata: MessageFns<UpdateInstanceMetadata> = {
  encode(message: UpdateInstanceMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.originalRequest !== undefined) {
      PartialUpdateInstanceRequest.encode(message.originalRequest, writer.uint32(10).fork()).join();
    }
    if (message.requestTime !== undefined) {
      Timestamp.encode(toTimestamp(message.requestTime), writer.uint32(18).fork()).join();
    }
    if (message.finishTime !== undefined) {
      Timestamp.encode(toTimestamp(message.finishTime), writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateInstanceMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateInstanceMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.originalRequest = PartialUpdateInstanceRequest.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.requestTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.finishTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateInstanceMetadata {
    return {
      originalRequest: isSet(object.originalRequest)
        ? PartialUpdateInstanceRequest.fromJSON(object.originalRequest)
        : undefined,
      requestTime: isSet(object.requestTime) ? fromJsonTimestamp(object.requestTime) : undefined,
      finishTime: isSet(object.finishTime) ? fromJsonTimestamp(object.finishTime) : undefined,
    };
  },

  toJSON(message: UpdateInstanceMetadata): unknown {
    const obj: any = {};
    if (message.originalRequest !== undefined) {
      obj.originalRequest = PartialUpdateInstanceRequest.toJSON(message.originalRequest);
    }
    if (message.requestTime !== undefined) {
      obj.requestTime = message.requestTime.toISOString();
    }
    if (message.finishTime !== undefined) {
      obj.finishTime = message.finishTime.toISOString();
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateInstanceMetadata>): UpdateInstanceMetadata {
    return UpdateInstanceMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateInstanceMetadata>): UpdateInstanceMetadata {
    const message = createBaseUpdateInstanceMetadata();
    message.originalRequest = (object.originalRequest !== undefined && object.originalRequest !== null)
      ? PartialUpdateInstanceRequest.fromPartial(object.originalRequest)
      : undefined;
    message.requestTime = object.requestTime ?? undefined;
    message.finishTime = object.finishTime ?? undefined;
    return message;
  },
};

function createBaseCreateClusterMetadata(): CreateClusterMetadata {
  return { originalRequest: undefined, requestTime: undefined, finishTime: undefined, tables: {} };
}

export const CreateClusterMetadata: MessageFns<CreateClusterMetadata> = {
  encode(message: CreateClusterMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.originalRequest !== undefined) {
      CreateClusterRequest.encode(message.originalRequest, writer.uint32(10).fork()).join();
    }
    if (message.requestTime !== undefined) {
      Timestamp.encode(toTimestamp(message.requestTime), writer.uint32(18).fork()).join();
    }
    if (message.finishTime !== undefined) {
      Timestamp.encode(toTimestamp(message.finishTime), writer.uint32(26).fork()).join();
    }
    Object.entries(message.tables).forEach(([key, value]) => {
      CreateClusterMetadata_TablesEntry.encode({ key: key as any, value }, writer.uint32(34).fork()).join();
    });
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateClusterMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateClusterMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.originalRequest = CreateClusterRequest.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.requestTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.finishTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          const entry4 = CreateClusterMetadata_TablesEntry.decode(reader, reader.uint32());
          if (entry4.value !== undefined) {
            message.tables[entry4.key] = entry4.value;
          }
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateClusterMetadata {
    return {
      originalRequest: isSet(object.originalRequest)
        ? CreateClusterRequest.fromJSON(object.originalRequest)
        : undefined,
      requestTime: isSet(object.requestTime) ? fromJsonTimestamp(object.requestTime) : undefined,
      finishTime: isSet(object.finishTime) ? fromJsonTimestamp(object.finishTime) : undefined,
      tables: isObject(object.tables)
        ? Object.entries(object.tables).reduce<{ [key: string]: CreateClusterMetadata_TableProgress }>(
          (acc, [key, value]) => {
            acc[key] = CreateClusterMetadata_TableProgress.fromJSON(value);
            return acc;
          },
          {},
        )
        : {},
    };
  },

  toJSON(message: CreateClusterMetadata): unknown {
    const obj: any = {};
    if (message.originalRequest !== undefined) {
      obj.originalRequest = CreateClusterRequest.toJSON(message.originalRequest);
    }
    if (message.requestTime !== undefined) {
      obj.requestTime = message.requestTime.toISOString();
    }
    if (message.finishTime !== undefined) {
      obj.finishTime = message.finishTime.toISOString();
    }
    if (message.tables) {
      const entries = Object.entries(message.tables);
      if (entries.length > 0) {
        obj.tables = {};
        entries.forEach(([k, v]) => {
          obj.tables[k] = CreateClusterMetadata_TableProgress.toJSON(v);
        });
      }
    }
    return obj;
  },

  create(base?: DeepPartial<CreateClusterMetadata>): CreateClusterMetadata {
    return CreateClusterMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateClusterMetadata>): CreateClusterMetadata {
    const message = createBaseCreateClusterMetadata();
    message.originalRequest = (object.originalRequest !== undefined && object.originalRequest !== null)
      ? CreateClusterRequest.fromPartial(object.originalRequest)
      : undefined;
    message.requestTime = object.requestTime ?? undefined;
    message.finishTime = object.finishTime ?? undefined;
    message.tables = Object.entries(object.tables ?? {}).reduce<{ [key: string]: CreateClusterMetadata_TableProgress }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = CreateClusterMetadata_TableProgress.fromPartial(value);
        }
        return acc;
      },
      {},
    );
    return message;
  },
};

function createBaseCreateClusterMetadata_TableProgress(): CreateClusterMetadata_TableProgress {
  return { estimatedSizeBytes: Long.ZERO, estimatedCopiedBytes: Long.ZERO, state: 0 };
}

export const CreateClusterMetadata_TableProgress: MessageFns<CreateClusterMetadata_TableProgress> = {
  encode(message: CreateClusterMetadata_TableProgress, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (!message.estimatedSizeBytes.equals(Long.ZERO)) {
      writer.uint32(16).int64(message.estimatedSizeBytes.toString());
    }
    if (!message.estimatedCopiedBytes.equals(Long.ZERO)) {
      writer.uint32(24).int64(message.estimatedCopiedBytes.toString());
    }
    if (message.state !== 0) {
      writer.uint32(32).int32(message.state);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateClusterMetadata_TableProgress {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateClusterMetadata_TableProgress();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2:
          if (tag !== 16) {
            break;
          }

          message.estimatedSizeBytes = Long.fromString(reader.int64().toString());
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.estimatedCopiedBytes = Long.fromString(reader.int64().toString());
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.state = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateClusterMetadata_TableProgress {
    return {
      estimatedSizeBytes: isSet(object.estimatedSizeBytes) ? Long.fromValue(object.estimatedSizeBytes) : Long.ZERO,
      estimatedCopiedBytes: isSet(object.estimatedCopiedBytes)
        ? Long.fromValue(object.estimatedCopiedBytes)
        : Long.ZERO,
      state: isSet(object.state) ? createClusterMetadata_TableProgress_StateFromJSON(object.state) : 0,
    };
  },

  toJSON(message: CreateClusterMetadata_TableProgress): unknown {
    const obj: any = {};
    if (!message.estimatedSizeBytes.equals(Long.ZERO)) {
      obj.estimatedSizeBytes = (message.estimatedSizeBytes || Long.ZERO).toString();
    }
    if (!message.estimatedCopiedBytes.equals(Long.ZERO)) {
      obj.estimatedCopiedBytes = (message.estimatedCopiedBytes || Long.ZERO).toString();
    }
    if (message.state !== 0) {
      obj.state = createClusterMetadata_TableProgress_StateToJSON(message.state);
    }
    return obj;
  },

  create(base?: DeepPartial<CreateClusterMetadata_TableProgress>): CreateClusterMetadata_TableProgress {
    return CreateClusterMetadata_TableProgress.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateClusterMetadata_TableProgress>): CreateClusterMetadata_TableProgress {
    const message = createBaseCreateClusterMetadata_TableProgress();
    message.estimatedSizeBytes = (object.estimatedSizeBytes !== undefined && object.estimatedSizeBytes !== null)
      ? Long.fromValue(object.estimatedSizeBytes)
      : Long.ZERO;
    message.estimatedCopiedBytes = (object.estimatedCopiedBytes !== undefined && object.estimatedCopiedBytes !== null)
      ? Long.fromValue(object.estimatedCopiedBytes)
      : Long.ZERO;
    message.state = object.state ?? 0;
    return message;
  },
};

function createBaseCreateClusterMetadata_TablesEntry(): CreateClusterMetadata_TablesEntry {
  return { key: "", value: undefined };
}

export const CreateClusterMetadata_TablesEntry: MessageFns<CreateClusterMetadata_TablesEntry> = {
  encode(message: CreateClusterMetadata_TablesEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== undefined) {
      CreateClusterMetadata_TableProgress.encode(message.value, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateClusterMetadata_TablesEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateClusterMetadata_TablesEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = CreateClusterMetadata_TableProgress.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateClusterMetadata_TablesEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? CreateClusterMetadata_TableProgress.fromJSON(object.value) : undefined,
    };
  },

  toJSON(message: CreateClusterMetadata_TablesEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== undefined) {
      obj.value = CreateClusterMetadata_TableProgress.toJSON(message.value);
    }
    return obj;
  },

  create(base?: DeepPartial<CreateClusterMetadata_TablesEntry>): CreateClusterMetadata_TablesEntry {
    return CreateClusterMetadata_TablesEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateClusterMetadata_TablesEntry>): CreateClusterMetadata_TablesEntry {
    const message = createBaseCreateClusterMetadata_TablesEntry();
    message.key = object.key ?? "";
    message.value = (object.value !== undefined && object.value !== null)
      ? CreateClusterMetadata_TableProgress.fromPartial(object.value)
      : undefined;
    return message;
  },
};

function createBaseUpdateClusterMetadata(): UpdateClusterMetadata {
  return { originalRequest: undefined, requestTime: undefined, finishTime: undefined };
}

export const UpdateClusterMetadata: MessageFns<UpdateClusterMetadata> = {
  encode(message: UpdateClusterMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.originalRequest !== undefined) {
      Cluster.encode(message.originalRequest, writer.uint32(10).fork()).join();
    }
    if (message.requestTime !== undefined) {
      Timestamp.encode(toTimestamp(message.requestTime), writer.uint32(18).fork()).join();
    }
    if (message.finishTime !== undefined) {
      Timestamp.encode(toTimestamp(message.finishTime), writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateClusterMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateClusterMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.originalRequest = Cluster.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.requestTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.finishTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateClusterMetadata {
    return {
      originalRequest: isSet(object.originalRequest) ? Cluster.fromJSON(object.originalRequest) : undefined,
      requestTime: isSet(object.requestTime) ? fromJsonTimestamp(object.requestTime) : undefined,
      finishTime: isSet(object.finishTime) ? fromJsonTimestamp(object.finishTime) : undefined,
    };
  },

  toJSON(message: UpdateClusterMetadata): unknown {
    const obj: any = {};
    if (message.originalRequest !== undefined) {
      obj.originalRequest = Cluster.toJSON(message.originalRequest);
    }
    if (message.requestTime !== undefined) {
      obj.requestTime = message.requestTime.toISOString();
    }
    if (message.finishTime !== undefined) {
      obj.finishTime = message.finishTime.toISOString();
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateClusterMetadata>): UpdateClusterMetadata {
    return UpdateClusterMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateClusterMetadata>): UpdateClusterMetadata {
    const message = createBaseUpdateClusterMetadata();
    message.originalRequest = (object.originalRequest !== undefined && object.originalRequest !== null)
      ? Cluster.fromPartial(object.originalRequest)
      : undefined;
    message.requestTime = object.requestTime ?? undefined;
    message.finishTime = object.finishTime ?? undefined;
    return message;
  },
};

function createBasePartialUpdateClusterMetadata(): PartialUpdateClusterMetadata {
  return { requestTime: undefined, finishTime: undefined, originalRequest: undefined };
}

export const PartialUpdateClusterMetadata: MessageFns<PartialUpdateClusterMetadata> = {
  encode(message: PartialUpdateClusterMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.requestTime !== undefined) {
      Timestamp.encode(toTimestamp(message.requestTime), writer.uint32(10).fork()).join();
    }
    if (message.finishTime !== undefined) {
      Timestamp.encode(toTimestamp(message.finishTime), writer.uint32(18).fork()).join();
    }
    if (message.originalRequest !== undefined) {
      PartialUpdateClusterRequest.encode(message.originalRequest, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PartialUpdateClusterMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePartialUpdateClusterMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.requestTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.finishTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.originalRequest = PartialUpdateClusterRequest.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PartialUpdateClusterMetadata {
    return {
      requestTime: isSet(object.requestTime) ? fromJsonTimestamp(object.requestTime) : undefined,
      finishTime: isSet(object.finishTime) ? fromJsonTimestamp(object.finishTime) : undefined,
      originalRequest: isSet(object.originalRequest)
        ? PartialUpdateClusterRequest.fromJSON(object.originalRequest)
        : undefined,
    };
  },

  toJSON(message: PartialUpdateClusterMetadata): unknown {
    const obj: any = {};
    if (message.requestTime !== undefined) {
      obj.requestTime = message.requestTime.toISOString();
    }
    if (message.finishTime !== undefined) {
      obj.finishTime = message.finishTime.toISOString();
    }
    if (message.originalRequest !== undefined) {
      obj.originalRequest = PartialUpdateClusterRequest.toJSON(message.originalRequest);
    }
    return obj;
  },

  create(base?: DeepPartial<PartialUpdateClusterMetadata>): PartialUpdateClusterMetadata {
    return PartialUpdateClusterMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<PartialUpdateClusterMetadata>): PartialUpdateClusterMetadata {
    const message = createBasePartialUpdateClusterMetadata();
    message.requestTime = object.requestTime ?? undefined;
    message.finishTime = object.finishTime ?? undefined;
    message.originalRequest = (object.originalRequest !== undefined && object.originalRequest !== null)
      ? PartialUpdateClusterRequest.fromPartial(object.originalRequest)
      : undefined;
    return message;
  },
};

function createBasePartialUpdateClusterRequest(): PartialUpdateClusterRequest {
  return { cluster: undefined, updateMask: undefined };
}

export const PartialUpdateClusterRequest: MessageFns<PartialUpdateClusterRequest> = {
  encode(message: PartialUpdateClusterRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.cluster !== undefined) {
      Cluster.encode(message.cluster, writer.uint32(10).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PartialUpdateClusterRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePartialUpdateClusterRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.cluster = Cluster.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PartialUpdateClusterRequest {
    return {
      cluster: isSet(object.cluster) ? Cluster.fromJSON(object.cluster) : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
    };
  },

  toJSON(message: PartialUpdateClusterRequest): unknown {
    const obj: any = {};
    if (message.cluster !== undefined) {
      obj.cluster = Cluster.toJSON(message.cluster);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    return obj;
  },

  create(base?: DeepPartial<PartialUpdateClusterRequest>): PartialUpdateClusterRequest {
    return PartialUpdateClusterRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<PartialUpdateClusterRequest>): PartialUpdateClusterRequest {
    const message = createBasePartialUpdateClusterRequest();
    message.cluster = (object.cluster !== undefined && object.cluster !== null)
      ? Cluster.fromPartial(object.cluster)
      : undefined;
    message.updateMask = object.updateMask ?? undefined;
    return message;
  },
};

function createBaseCreateAppProfileRequest(): CreateAppProfileRequest {
  return { parent: "", appProfileId: "", appProfile: undefined, ignoreWarnings: false };
}

export const CreateAppProfileRequest: MessageFns<CreateAppProfileRequest> = {
  encode(message: CreateAppProfileRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.appProfileId !== "") {
      writer.uint32(18).string(message.appProfileId);
    }
    if (message.appProfile !== undefined) {
      AppProfile.encode(message.appProfile, writer.uint32(26).fork()).join();
    }
    if (message.ignoreWarnings !== false) {
      writer.uint32(32).bool(message.ignoreWarnings);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateAppProfileRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateAppProfileRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.appProfileId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.appProfile = AppProfile.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.ignoreWarnings = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateAppProfileRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      appProfileId: isSet(object.appProfileId) ? globalThis.String(object.appProfileId) : "",
      appProfile: isSet(object.appProfile) ? AppProfile.fromJSON(object.appProfile) : undefined,
      ignoreWarnings: isSet(object.ignoreWarnings) ? globalThis.Boolean(object.ignoreWarnings) : false,
    };
  },

  toJSON(message: CreateAppProfileRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.appProfileId !== "") {
      obj.appProfileId = message.appProfileId;
    }
    if (message.appProfile !== undefined) {
      obj.appProfile = AppProfile.toJSON(message.appProfile);
    }
    if (message.ignoreWarnings !== false) {
      obj.ignoreWarnings = message.ignoreWarnings;
    }
    return obj;
  },

  create(base?: DeepPartial<CreateAppProfileRequest>): CreateAppProfileRequest {
    return CreateAppProfileRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateAppProfileRequest>): CreateAppProfileRequest {
    const message = createBaseCreateAppProfileRequest();
    message.parent = object.parent ?? "";
    message.appProfileId = object.appProfileId ?? "";
    message.appProfile = (object.appProfile !== undefined && object.appProfile !== null)
      ? AppProfile.fromPartial(object.appProfile)
      : undefined;
    message.ignoreWarnings = object.ignoreWarnings ?? false;
    return message;
  },
};

function createBaseGetAppProfileRequest(): GetAppProfileRequest {
  return { name: "" };
}

export const GetAppProfileRequest: MessageFns<GetAppProfileRequest> = {
  encode(message: GetAppProfileRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetAppProfileRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetAppProfileRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetAppProfileRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetAppProfileRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetAppProfileRequest>): GetAppProfileRequest {
    return GetAppProfileRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetAppProfileRequest>): GetAppProfileRequest {
    const message = createBaseGetAppProfileRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseListAppProfilesRequest(): ListAppProfilesRequest {
  return { parent: "", pageSize: 0, pageToken: "" };
}

export const ListAppProfilesRequest: MessageFns<ListAppProfilesRequest> = {
  encode(message: ListAppProfilesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(24).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(18).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListAppProfilesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListAppProfilesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListAppProfilesRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: ListAppProfilesRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListAppProfilesRequest>): ListAppProfilesRequest {
    return ListAppProfilesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListAppProfilesRequest>): ListAppProfilesRequest {
    const message = createBaseListAppProfilesRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseListAppProfilesResponse(): ListAppProfilesResponse {
  return { appProfiles: [], nextPageToken: "", failedLocations: [] };
}

export const ListAppProfilesResponse: MessageFns<ListAppProfilesResponse> = {
  encode(message: ListAppProfilesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.appProfiles) {
      AppProfile.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    for (const v of message.failedLocations) {
      writer.uint32(26).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListAppProfilesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListAppProfilesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.appProfiles.push(AppProfile.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.failedLocations.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListAppProfilesResponse {
    return {
      appProfiles: globalThis.Array.isArray(object?.appProfiles)
        ? object.appProfiles.map((e: any) => AppProfile.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
      failedLocations: globalThis.Array.isArray(object?.failedLocations)
        ? object.failedLocations.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: ListAppProfilesResponse): unknown {
    const obj: any = {};
    if (message.appProfiles?.length) {
      obj.appProfiles = message.appProfiles.map((e) => AppProfile.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    if (message.failedLocations?.length) {
      obj.failedLocations = message.failedLocations;
    }
    return obj;
  },

  create(base?: DeepPartial<ListAppProfilesResponse>): ListAppProfilesResponse {
    return ListAppProfilesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListAppProfilesResponse>): ListAppProfilesResponse {
    const message = createBaseListAppProfilesResponse();
    message.appProfiles = object.appProfiles?.map((e) => AppProfile.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    message.failedLocations = object.failedLocations?.map((e) => e) || [];
    return message;
  },
};

function createBaseUpdateAppProfileRequest(): UpdateAppProfileRequest {
  return { appProfile: undefined, updateMask: undefined, ignoreWarnings: false };
}

export const UpdateAppProfileRequest: MessageFns<UpdateAppProfileRequest> = {
  encode(message: UpdateAppProfileRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.appProfile !== undefined) {
      AppProfile.encode(message.appProfile, writer.uint32(10).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(18).fork()).join();
    }
    if (message.ignoreWarnings !== false) {
      writer.uint32(24).bool(message.ignoreWarnings);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateAppProfileRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateAppProfileRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.appProfile = AppProfile.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.ignoreWarnings = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateAppProfileRequest {
    return {
      appProfile: isSet(object.appProfile) ? AppProfile.fromJSON(object.appProfile) : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
      ignoreWarnings: isSet(object.ignoreWarnings) ? globalThis.Boolean(object.ignoreWarnings) : false,
    };
  },

  toJSON(message: UpdateAppProfileRequest): unknown {
    const obj: any = {};
    if (message.appProfile !== undefined) {
      obj.appProfile = AppProfile.toJSON(message.appProfile);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    if (message.ignoreWarnings !== false) {
      obj.ignoreWarnings = message.ignoreWarnings;
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateAppProfileRequest>): UpdateAppProfileRequest {
    return UpdateAppProfileRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateAppProfileRequest>): UpdateAppProfileRequest {
    const message = createBaseUpdateAppProfileRequest();
    message.appProfile = (object.appProfile !== undefined && object.appProfile !== null)
      ? AppProfile.fromPartial(object.appProfile)
      : undefined;
    message.updateMask = object.updateMask ?? undefined;
    message.ignoreWarnings = object.ignoreWarnings ?? false;
    return message;
  },
};

function createBaseDeleteAppProfileRequest(): DeleteAppProfileRequest {
  return { name: "", ignoreWarnings: false };
}

export const DeleteAppProfileRequest: MessageFns<DeleteAppProfileRequest> = {
  encode(message: DeleteAppProfileRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.ignoreWarnings !== false) {
      writer.uint32(16).bool(message.ignoreWarnings);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteAppProfileRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteAppProfileRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.ignoreWarnings = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteAppProfileRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      ignoreWarnings: isSet(object.ignoreWarnings) ? globalThis.Boolean(object.ignoreWarnings) : false,
    };
  },

  toJSON(message: DeleteAppProfileRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.ignoreWarnings !== false) {
      obj.ignoreWarnings = message.ignoreWarnings;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteAppProfileRequest>): DeleteAppProfileRequest {
    return DeleteAppProfileRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteAppProfileRequest>): DeleteAppProfileRequest {
    const message = createBaseDeleteAppProfileRequest();
    message.name = object.name ?? "";
    message.ignoreWarnings = object.ignoreWarnings ?? false;
    return message;
  },
};

function createBaseUpdateAppProfileMetadata(): UpdateAppProfileMetadata {
  return {};
}

export const UpdateAppProfileMetadata: MessageFns<UpdateAppProfileMetadata> = {
  encode(_: UpdateAppProfileMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateAppProfileMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateAppProfileMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): UpdateAppProfileMetadata {
    return {};
  },

  toJSON(_: UpdateAppProfileMetadata): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<UpdateAppProfileMetadata>): UpdateAppProfileMetadata {
    return UpdateAppProfileMetadata.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<UpdateAppProfileMetadata>): UpdateAppProfileMetadata {
    const message = createBaseUpdateAppProfileMetadata();
    return message;
  },
};

function createBaseListHotTabletsRequest(): ListHotTabletsRequest {
  return { parent: "", startTime: undefined, endTime: undefined, pageSize: 0, pageToken: "" };
}

export const ListHotTabletsRequest: MessageFns<ListHotTabletsRequest> = {
  encode(message: ListHotTabletsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.startTime !== undefined) {
      Timestamp.encode(toTimestamp(message.startTime), writer.uint32(18).fork()).join();
    }
    if (message.endTime !== undefined) {
      Timestamp.encode(toTimestamp(message.endTime), writer.uint32(26).fork()).join();
    }
    if (message.pageSize !== 0) {
      writer.uint32(32).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(42).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListHotTabletsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListHotTabletsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.startTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.endTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListHotTabletsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      startTime: isSet(object.startTime) ? fromJsonTimestamp(object.startTime) : undefined,
      endTime: isSet(object.endTime) ? fromJsonTimestamp(object.endTime) : undefined,
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: ListHotTabletsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.startTime !== undefined) {
      obj.startTime = message.startTime.toISOString();
    }
    if (message.endTime !== undefined) {
      obj.endTime = message.endTime.toISOString();
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListHotTabletsRequest>): ListHotTabletsRequest {
    return ListHotTabletsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListHotTabletsRequest>): ListHotTabletsRequest {
    const message = createBaseListHotTabletsRequest();
    message.parent = object.parent ?? "";
    message.startTime = object.startTime ?? undefined;
    message.endTime = object.endTime ?? undefined;
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseListHotTabletsResponse(): ListHotTabletsResponse {
  return { hotTablets: [], nextPageToken: "" };
}

export const ListHotTabletsResponse: MessageFns<ListHotTabletsResponse> = {
  encode(message: ListHotTabletsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.hotTablets) {
      HotTablet.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListHotTabletsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListHotTabletsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.hotTablets.push(HotTablet.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListHotTabletsResponse {
    return {
      hotTablets: globalThis.Array.isArray(object?.hotTablets)
        ? object.hotTablets.map((e: any) => HotTablet.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListHotTabletsResponse): unknown {
    const obj: any = {};
    if (message.hotTablets?.length) {
      obj.hotTablets = message.hotTablets.map((e) => HotTablet.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListHotTabletsResponse>): ListHotTabletsResponse {
    return ListHotTabletsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListHotTabletsResponse>): ListHotTabletsResponse {
    const message = createBaseListHotTabletsResponse();
    message.hotTablets = object.hotTablets?.map((e) => HotTablet.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

/**
 * Service for creating, configuring, and deleting Cloud Bigtable Instances and
 * Clusters. Provides access to the Instance and Cluster schemas only, not the
 * tables' metadata or data stored in those tables.
 */
export type BigtableInstanceAdminDefinition = typeof BigtableInstanceAdminDefinition;
export const BigtableInstanceAdminDefinition = {
  name: "BigtableInstanceAdmin",
  fullName: "google.bigtable.admin.v2.BigtableInstanceAdmin",
  methods: {
    /**
     * Create an instance within a project.
     *
     * Note that exactly one of Cluster.serve_nodes and
     * Cluster.cluster_config.cluster_autoscaling_config can be set. If
     * serve_nodes is set to non-zero, then the cluster is manually scaled. If
     * cluster_config.cluster_autoscaling_config is non-empty, then autoscaling is
     * enabled.
     */
    createInstance: {
      name: "CreateInstance",
      requestType: CreateInstanceRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              34,
              10,
              8,
              73,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              18,
              22,
              67,
              114,
              101,
              97,
              116,
              101,
              73,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [
            Buffer.from([
              36,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              95,
              105,
              100,
              44,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              44,
              99,
              108,
              117,
              115,
              116,
              101,
              114,
              115,
            ]),
          ],
          578365826: [
            Buffer.from([
              38,
              58,
              1,
              42,
              34,
              33,
              47,
              118,
              50,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              125,
              47,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /** Gets information about an instance. */
    getInstance: {
      name: "GetInstance",
      requestType: GetInstanceRequest,
      requestStream: false,
      responseType: Instance,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              35,
              18,
              33,
              47,
              118,
              50,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Lists information about instances in a project. */
    listInstances: {
      name: "ListInstances",
      requestType: ListInstancesRequest,
      requestStream: false,
      responseType: ListInstancesResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              35,
              18,
              33,
              47,
              118,
              50,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              125,
              47,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /**
     * Updates an instance within a project. This method updates only the display
     * name and type for an Instance. To update other Instance properties, such as
     * labels, use PartialUpdateInstance.
     */
    updateInstance: {
      name: "UpdateInstance",
      requestType: Instance,
      requestStream: false,
      responseType: Instance,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              38,
              58,
              1,
              42,
              26,
              33,
              47,
              118,
              50,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Partially updates an instance within a project. This method can modify all
     * fields of an Instance and is the preferred way to update an Instance.
     */
    partialUpdateInstance: {
      name: "PartialUpdateInstance",
      requestType: PartialUpdateInstanceRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              34,
              10,
              8,
              73,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              18,
              22,
              85,
              112,
              100,
              97,
              116,
              101,
              73,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [
            Buffer.from([
              20,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              44,
              117,
              112,
              100,
              97,
              116,
              101,
              95,
              109,
              97,
              115,
              107,
            ]),
          ],
          578365826: [
            Buffer.from([
              54,
              58,
              8,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              50,
              42,
              47,
              118,
              50,
              47,
              123,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Delete an instance from a project. */
    deleteInstance: {
      name: "DeleteInstance",
      requestType: DeleteInstanceRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              35,
              42,
              33,
              47,
              118,
              50,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Creates a cluster within an instance.
     *
     * Note that exactly one of Cluster.serve_nodes and
     * Cluster.cluster_config.cluster_autoscaling_config can be set. If
     * serve_nodes is set to non-zero, then the cluster is manually scaled. If
     * cluster_config.cluster_autoscaling_config is non-empty, then autoscaling is
     * enabled.
     */
    createCluster: {
      name: "CreateCluster",
      requestType: CreateClusterRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              32,
              10,
              7,
              67,
              108,
              117,
              115,
              116,
              101,
              114,
              18,
              21,
              67,
              114,
              101,
              97,
              116,
              101,
              67,
              108,
              117,
              115,
              116,
              101,
              114,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [
            Buffer.from([
              25,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              99,
              108,
              117,
              115,
              116,
              101,
              114,
              95,
              105,
              100,
              44,
              99,
              108,
              117,
              115,
              116,
              101,
              114,
            ]),
          ],
          578365826: [
            Buffer.from([
              55,
              58,
              7,
              99,
              108,
              117,
              115,
              116,
              101,
              114,
              34,
              44,
              47,
              118,
              50,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              115,
              47,
              42,
              125,
              47,
              99,
              108,
              117,
              115,
              116,
              101,
              114,
              115,
            ]),
          ],
        },
      },
    },
    /** Gets information about a cluster. */
    getCluster: {
      name: "GetCluster",
      requestType: GetClusterRequest,
      requestStream: false,
      responseType: Cluster,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              46,
              18,
              44,
              47,
              118,
              50,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              115,
              47,
              42,
              47,
              99,
              108,
              117,
              115,
              116,
              101,
              114,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Lists information about clusters in an instance. */
    listClusters: {
      name: "ListClusters",
      requestType: ListClustersRequest,
      requestStream: false,
      responseType: ListClustersResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              46,
              18,
              44,
              47,
              118,
              50,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              115,
              47,
              42,
              125,
              47,
              99,
              108,
              117,
              115,
              116,
              101,
              114,
              115,
            ]),
          ],
        },
      },
    },
    /**
     * Updates a cluster within an instance.
     *
     * Note that UpdateCluster does not support updating
     * cluster_config.cluster_autoscaling_config. In order to update it, you
     * must use PartialUpdateCluster.
     */
    updateCluster: {
      name: "UpdateCluster",
      requestType: Cluster,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              32,
              10,
              7,
              67,
              108,
              117,
              115,
              116,
              101,
              114,
              18,
              21,
              85,
              112,
              100,
              97,
              116,
              101,
              67,
              108,
              117,
              115,
              116,
              101,
              114,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          578365826: [
            Buffer.from([
              49,
              58,
              1,
              42,
              26,
              44,
              47,
              118,
              50,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              115,
              47,
              42,
              47,
              99,
              108,
              117,
              115,
              116,
              101,
              114,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Partially updates a cluster within a project. This method is the preferred
     * way to update a Cluster.
     *
     * To enable and update autoscaling, set
     * cluster_config.cluster_autoscaling_config. When autoscaling is enabled,
     * serve_nodes is treated as an OUTPUT_ONLY field, meaning that updates to it
     * are ignored. Note that an update cannot simultaneously set serve_nodes to
     * non-zero and cluster_config.cluster_autoscaling_config to non-empty, and
     * also specify both in the update_mask.
     *
     * To disable autoscaling, clear cluster_config.cluster_autoscaling_config,
     * and explicitly set a serve_node count via the update_mask.
     */
    partialUpdateCluster: {
      name: "PartialUpdateCluster",
      requestType: PartialUpdateClusterRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              39,
              10,
              7,
              67,
              108,
              117,
              115,
              116,
              101,
              114,
              18,
              28,
              80,
              97,
              114,
              116,
              105,
              97,
              108,
              85,
              112,
              100,
              97,
              116,
              101,
              67,
              108,
              117,
              115,
              116,
              101,
              114,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [
            Buffer.from([19, 99, 108, 117, 115, 116, 101, 114, 44, 117, 112, 100, 97, 116, 101, 95, 109, 97, 115, 107]),
          ],
          578365826: [
            Buffer.from([
              63,
              58,
              7,
              99,
              108,
              117,
              115,
              116,
              101,
              114,
              50,
              52,
              47,
              118,
              50,
              47,
              123,
              99,
              108,
              117,
              115,
              116,
              101,
              114,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              115,
              47,
              42,
              47,
              99,
              108,
              117,
              115,
              116,
              101,
              114,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Deletes a cluster from an instance. */
    deleteCluster: {
      name: "DeleteCluster",
      requestType: DeleteClusterRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              46,
              42,
              44,
              47,
              118,
              50,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              115,
              47,
              42,
              47,
              99,
              108,
              117,
              115,
              116,
              101,
              114,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Creates an app profile within an instance. */
    createAppProfile: {
      name: "CreateAppProfile",
      requestType: CreateAppProfileRequest,
      requestStream: false,
      responseType: AppProfile,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              33,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              97,
              112,
              112,
              95,
              112,
              114,
              111,
              102,
              105,
              108,
              101,
              95,
              105,
              100,
              44,
              97,
              112,
              112,
              95,
              112,
              114,
              111,
              102,
              105,
              108,
              101,
            ]),
          ],
          578365826: [
            Buffer.from([
              62,
              58,
              11,
              97,
              112,
              112,
              95,
              112,
              114,
              111,
              102,
              105,
              108,
              101,
              34,
              47,
              47,
              118,
              50,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              115,
              47,
              42,
              125,
              47,
              97,
              112,
              112,
              80,
              114,
              111,
              102,
              105,
              108,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /** Gets information about an app profile. */
    getAppProfile: {
      name: "GetAppProfile",
      requestType: GetAppProfileRequest,
      requestStream: false,
      responseType: AppProfile,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              49,
              18,
              47,
              47,
              118,
              50,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              115,
              47,
              42,
              47,
              97,
              112,
              112,
              80,
              114,
              111,
              102,
              105,
              108,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Lists information about app profiles in an instance. */
    listAppProfiles: {
      name: "ListAppProfiles",
      requestType: ListAppProfilesRequest,
      requestStream: false,
      responseType: ListAppProfilesResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              49,
              18,
              47,
              47,
              118,
              50,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              115,
              47,
              42,
              125,
              47,
              97,
              112,
              112,
              80,
              114,
              111,
              102,
              105,
              108,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /** Updates an app profile within an instance. */
    updateAppProfile: {
      name: "UpdateAppProfile",
      requestType: UpdateAppProfileRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              38,
              10,
              10,
              65,
              112,
              112,
              80,
              114,
              111,
              102,
              105,
              108,
              101,
              18,
              24,
              85,
              112,
              100,
              97,
              116,
              101,
              65,
              112,
              112,
              80,
              114,
              111,
              102,
              105,
              108,
              101,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [
            Buffer.from([
              23,
              97,
              112,
              112,
              95,
              112,
              114,
              111,
              102,
              105,
              108,
              101,
              44,
              117,
              112,
              100,
              97,
              116,
              101,
              95,
              109,
              97,
              115,
              107,
            ]),
          ],
          578365826: [
            Buffer.from([
              74,
              58,
              11,
              97,
              112,
              112,
              95,
              112,
              114,
              111,
              102,
              105,
              108,
              101,
              50,
              59,
              47,
              118,
              50,
              47,
              123,
              97,
              112,
              112,
              95,
              112,
              114,
              111,
              102,
              105,
              108,
              101,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              115,
              47,
              42,
              47,
              97,
              112,
              112,
              80,
              114,
              111,
              102,
              105,
              108,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Deletes an app profile from an instance. */
    deleteAppProfile: {
      name: "DeleteAppProfile",
      requestType: DeleteAppProfileRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              49,
              42,
              47,
              47,
              118,
              50,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              115,
              47,
              42,
              47,
              97,
              112,
              112,
              80,
              114,
              111,
              102,
              105,
              108,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Gets the access control policy for an instance resource. Returns an empty
     * policy if an instance exists but does not have a policy set.
     */
    getIamPolicy: {
      name: "GetIamPolicy",
      requestType: GetIamPolicyRequest,
      requestStream: false,
      responseType: Policy,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([8, 114, 101, 115, 111, 117, 114, 99, 101])],
          578365826: [
            Buffer.from([
              55,
              58,
              1,
              42,
              34,
              50,
              47,
              118,
              50,
              47,
              123,
              114,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              115,
              47,
              42,
              125,
              58,
              103,
              101,
              116,
              73,
              97,
              109,
              80,
              111,
              108,
              105,
              99,
              121,
            ]),
          ],
        },
      },
    },
    /**
     * Sets the access control policy on an instance resource. Replaces any
     * existing policy.
     */
    setIamPolicy: {
      name: "SetIamPolicy",
      requestType: SetIamPolicyRequest,
      requestStream: false,
      responseType: Policy,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([15, 114, 101, 115, 111, 117, 114, 99, 101, 44, 112, 111, 108, 105, 99, 121])],
          578365826: [
            Buffer.from([
              55,
              58,
              1,
              42,
              34,
              50,
              47,
              118,
              50,
              47,
              123,
              114,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              115,
              47,
              42,
              125,
              58,
              115,
              101,
              116,
              73,
              97,
              109,
              80,
              111,
              108,
              105,
              99,
              121,
            ]),
          ],
        },
      },
    },
    /** Returns permissions that the caller has on the specified instance resource. */
    testIamPermissions: {
      name: "TestIamPermissions",
      requestType: TestIamPermissionsRequest,
      requestStream: false,
      responseType: TestIamPermissionsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              20,
              114,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              44,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              115,
            ]),
          ],
          578365826: [
            Buffer.from([
              61,
              58,
              1,
              42,
              34,
              56,
              47,
              118,
              50,
              47,
              123,
              114,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              115,
              47,
              42,
              125,
              58,
              116,
              101,
              115,
              116,
              73,
              97,
              109,
              80,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              115,
            ]),
          ],
        },
      },
    },
    /**
     * Lists hot tablets in a cluster, within the time range provided. Hot
     * tablets are ordered based on CPU usage.
     */
    listHotTablets: {
      name: "ListHotTablets",
      requestType: ListHotTabletsRequest,
      requestStream: false,
      responseType: ListHotTabletsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              59,
              18,
              57,
              47,
              118,
              50,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              115,
              47,
              42,
              47,
              99,
              108,
              117,
              115,
              116,
              101,
              114,
              115,
              47,
              42,
              125,
              47,
              104,
              111,
              116,
              84,
              97,
              98,
              108,
              101,
              116,
              115,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface BigtableInstanceAdminServiceImplementation<CallContextExt = {}> {
  /**
   * Create an instance within a project.
   *
   * Note that exactly one of Cluster.serve_nodes and
   * Cluster.cluster_config.cluster_autoscaling_config can be set. If
   * serve_nodes is set to non-zero, then the cluster is manually scaled. If
   * cluster_config.cluster_autoscaling_config is non-empty, then autoscaling is
   * enabled.
   */
  createInstance(
    request: CreateInstanceRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Gets information about an instance. */
  getInstance(request: GetInstanceRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Instance>>;
  /** Lists information about instances in a project. */
  listInstances(
    request: ListInstancesRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListInstancesResponse>>;
  /**
   * Updates an instance within a project. This method updates only the display
   * name and type for an Instance. To update other Instance properties, such as
   * labels, use PartialUpdateInstance.
   */
  updateInstance(request: Instance, context: CallContext & CallContextExt): Promise<DeepPartial<Instance>>;
  /**
   * Partially updates an instance within a project. This method can modify all
   * fields of an Instance and is the preferred way to update an Instance.
   */
  partialUpdateInstance(
    request: PartialUpdateInstanceRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Delete an instance from a project. */
  deleteInstance(request: DeleteInstanceRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Empty>>;
  /**
   * Creates a cluster within an instance.
   *
   * Note that exactly one of Cluster.serve_nodes and
   * Cluster.cluster_config.cluster_autoscaling_config can be set. If
   * serve_nodes is set to non-zero, then the cluster is manually scaled. If
   * cluster_config.cluster_autoscaling_config is non-empty, then autoscaling is
   * enabled.
   */
  createCluster(request: CreateClusterRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Operation>>;
  /** Gets information about a cluster. */
  getCluster(request: GetClusterRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Cluster>>;
  /** Lists information about clusters in an instance. */
  listClusters(
    request: ListClustersRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListClustersResponse>>;
  /**
   * Updates a cluster within an instance.
   *
   * Note that UpdateCluster does not support updating
   * cluster_config.cluster_autoscaling_config. In order to update it, you
   * must use PartialUpdateCluster.
   */
  updateCluster(request: Cluster, context: CallContext & CallContextExt): Promise<DeepPartial<Operation>>;
  /**
   * Partially updates a cluster within a project. This method is the preferred
   * way to update a Cluster.
   *
   * To enable and update autoscaling, set
   * cluster_config.cluster_autoscaling_config. When autoscaling is enabled,
   * serve_nodes is treated as an OUTPUT_ONLY field, meaning that updates to it
   * are ignored. Note that an update cannot simultaneously set serve_nodes to
   * non-zero and cluster_config.cluster_autoscaling_config to non-empty, and
   * also specify both in the update_mask.
   *
   * To disable autoscaling, clear cluster_config.cluster_autoscaling_config,
   * and explicitly set a serve_node count via the update_mask.
   */
  partialUpdateCluster(
    request: PartialUpdateClusterRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Deletes a cluster from an instance. */
  deleteCluster(request: DeleteClusterRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Empty>>;
  /** Creates an app profile within an instance. */
  createAppProfile(
    request: CreateAppProfileRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<AppProfile>>;
  /** Gets information about an app profile. */
  getAppProfile(request: GetAppProfileRequest, context: CallContext & CallContextExt): Promise<DeepPartial<AppProfile>>;
  /** Lists information about app profiles in an instance. */
  listAppProfiles(
    request: ListAppProfilesRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListAppProfilesResponse>>;
  /** Updates an app profile within an instance. */
  updateAppProfile(
    request: UpdateAppProfileRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Deletes an app profile from an instance. */
  deleteAppProfile(
    request: DeleteAppProfileRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Empty>>;
  /**
   * Gets the access control policy for an instance resource. Returns an empty
   * policy if an instance exists but does not have a policy set.
   */
  getIamPolicy(request: GetIamPolicyRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Policy>>;
  /**
   * Sets the access control policy on an instance resource. Replaces any
   * existing policy.
   */
  setIamPolicy(request: SetIamPolicyRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Policy>>;
  /** Returns permissions that the caller has on the specified instance resource. */
  testIamPermissions(
    request: TestIamPermissionsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<TestIamPermissionsResponse>>;
  /**
   * Lists hot tablets in a cluster, within the time range provided. Hot
   * tablets are ordered based on CPU usage.
   */
  listHotTablets(
    request: ListHotTabletsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListHotTabletsResponse>>;
}

export interface BigtableInstanceAdminClient<CallOptionsExt = {}> {
  /**
   * Create an instance within a project.
   *
   * Note that exactly one of Cluster.serve_nodes and
   * Cluster.cluster_config.cluster_autoscaling_config can be set. If
   * serve_nodes is set to non-zero, then the cluster is manually scaled. If
   * cluster_config.cluster_autoscaling_config is non-empty, then autoscaling is
   * enabled.
   */
  createInstance(
    request: DeepPartial<CreateInstanceRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Gets information about an instance. */
  getInstance(request: DeepPartial<GetInstanceRequest>, options?: CallOptions & CallOptionsExt): Promise<Instance>;
  /** Lists information about instances in a project. */
  listInstances(
    request: DeepPartial<ListInstancesRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListInstancesResponse>;
  /**
   * Updates an instance within a project. This method updates only the display
   * name and type for an Instance. To update other Instance properties, such as
   * labels, use PartialUpdateInstance.
   */
  updateInstance(request: DeepPartial<Instance>, options?: CallOptions & CallOptionsExt): Promise<Instance>;
  /**
   * Partially updates an instance within a project. This method can modify all
   * fields of an Instance and is the preferred way to update an Instance.
   */
  partialUpdateInstance(
    request: DeepPartial<PartialUpdateInstanceRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Delete an instance from a project. */
  deleteInstance(request: DeepPartial<DeleteInstanceRequest>, options?: CallOptions & CallOptionsExt): Promise<Empty>;
  /**
   * Creates a cluster within an instance.
   *
   * Note that exactly one of Cluster.serve_nodes and
   * Cluster.cluster_config.cluster_autoscaling_config can be set. If
   * serve_nodes is set to non-zero, then the cluster is manually scaled. If
   * cluster_config.cluster_autoscaling_config is non-empty, then autoscaling is
   * enabled.
   */
  createCluster(request: DeepPartial<CreateClusterRequest>, options?: CallOptions & CallOptionsExt): Promise<Operation>;
  /** Gets information about a cluster. */
  getCluster(request: DeepPartial<GetClusterRequest>, options?: CallOptions & CallOptionsExt): Promise<Cluster>;
  /** Lists information about clusters in an instance. */
  listClusters(
    request: DeepPartial<ListClustersRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListClustersResponse>;
  /**
   * Updates a cluster within an instance.
   *
   * Note that UpdateCluster does not support updating
   * cluster_config.cluster_autoscaling_config. In order to update it, you
   * must use PartialUpdateCluster.
   */
  updateCluster(request: DeepPartial<Cluster>, options?: CallOptions & CallOptionsExt): Promise<Operation>;
  /**
   * Partially updates a cluster within a project. This method is the preferred
   * way to update a Cluster.
   *
   * To enable and update autoscaling, set
   * cluster_config.cluster_autoscaling_config. When autoscaling is enabled,
   * serve_nodes is treated as an OUTPUT_ONLY field, meaning that updates to it
   * are ignored. Note that an update cannot simultaneously set serve_nodes to
   * non-zero and cluster_config.cluster_autoscaling_config to non-empty, and
   * also specify both in the update_mask.
   *
   * To disable autoscaling, clear cluster_config.cluster_autoscaling_config,
   * and explicitly set a serve_node count via the update_mask.
   */
  partialUpdateCluster(
    request: DeepPartial<PartialUpdateClusterRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Deletes a cluster from an instance. */
  deleteCluster(request: DeepPartial<DeleteClusterRequest>, options?: CallOptions & CallOptionsExt): Promise<Empty>;
  /** Creates an app profile within an instance. */
  createAppProfile(
    request: DeepPartial<CreateAppProfileRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<AppProfile>;
  /** Gets information about an app profile. */
  getAppProfile(
    request: DeepPartial<GetAppProfileRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<AppProfile>;
  /** Lists information about app profiles in an instance. */
  listAppProfiles(
    request: DeepPartial<ListAppProfilesRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListAppProfilesResponse>;
  /** Updates an app profile within an instance. */
  updateAppProfile(
    request: DeepPartial<UpdateAppProfileRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Deletes an app profile from an instance. */
  deleteAppProfile(
    request: DeepPartial<DeleteAppProfileRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Empty>;
  /**
   * Gets the access control policy for an instance resource. Returns an empty
   * policy if an instance exists but does not have a policy set.
   */
  getIamPolicy(request: DeepPartial<GetIamPolicyRequest>, options?: CallOptions & CallOptionsExt): Promise<Policy>;
  /**
   * Sets the access control policy on an instance resource. Replaces any
   * existing policy.
   */
  setIamPolicy(request: DeepPartial<SetIamPolicyRequest>, options?: CallOptions & CallOptionsExt): Promise<Policy>;
  /** Returns permissions that the caller has on the specified instance resource. */
  testIamPermissions(
    request: DeepPartial<TestIamPermissionsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<TestIamPermissionsResponse>;
  /**
   * Lists hot tablets in a cluster, within the time range provided. Hot
   * tablets are ordered based on CPU usage.
   */
  listHotTablets(
    request: DeepPartial<ListHotTabletsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListHotTabletsResponse>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
