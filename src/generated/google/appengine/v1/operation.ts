// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/appengine/v1/operation.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Timestamp } from "../../protobuf/timestamp.js";

export const protobufPackage = "google.appengine.v1";

/** Metadata for the given [google.longrunning.Operation][google.longrunning.Operation]. */
export interface OperationMetadataV1 {
  /**
   * API method that initiated this operation. Example:
   * `google.appengine.v1.Versions.CreateVersion`.
   *
   * @OutputOnly
   */
  method: string;
  /**
   * Time that this operation was created.
   *
   * @OutputOnly
   */
  insertTime:
    | Date
    | undefined;
  /**
   * Time that this operation completed.
   *
   * @OutputOnly
   */
  endTime:
    | Date
    | undefined;
  /**
   * User who requested this operation.
   *
   * @OutputOnly
   */
  user: string;
  /**
   * Name of the resource that this operation is acting on. Example:
   * `apps/myapp/services/default`.
   *
   * @OutputOnly
   */
  target: string;
  /**
   * Ephemeral message that may change every time the operation is polled.
   * @OutputOnly
   */
  ephemeralMessage: string;
  /**
   * Durable messages that persist on every operation poll.
   * @OutputOnly
   */
  warning: string[];
  createVersionMetadata?: CreateVersionMetadataV1 | undefined;
}

/**
 * Metadata for the given [google.longrunning.Operation][google.longrunning.Operation] during a
 * [google.appengine.v1.CreateVersionRequest][google.appengine.v1.CreateVersionRequest].
 */
export interface CreateVersionMetadataV1 {
  /**
   * The Cloud Build ID if one was created as part of the version create.
   * @OutputOnly
   */
  cloudBuildId: string;
}

function createBaseOperationMetadataV1(): OperationMetadataV1 {
  return {
    method: "",
    insertTime: undefined,
    endTime: undefined,
    user: "",
    target: "",
    ephemeralMessage: "",
    warning: [],
    createVersionMetadata: undefined,
  };
}

export const OperationMetadataV1: MessageFns<OperationMetadataV1> = {
  encode(message: OperationMetadataV1, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.method !== "") {
      writer.uint32(10).string(message.method);
    }
    if (message.insertTime !== undefined) {
      Timestamp.encode(toTimestamp(message.insertTime), writer.uint32(18).fork()).join();
    }
    if (message.endTime !== undefined) {
      Timestamp.encode(toTimestamp(message.endTime), writer.uint32(26).fork()).join();
    }
    if (message.user !== "") {
      writer.uint32(34).string(message.user);
    }
    if (message.target !== "") {
      writer.uint32(42).string(message.target);
    }
    if (message.ephemeralMessage !== "") {
      writer.uint32(50).string(message.ephemeralMessage);
    }
    for (const v of message.warning) {
      writer.uint32(58).string(v!);
    }
    if (message.createVersionMetadata !== undefined) {
      CreateVersionMetadataV1.encode(message.createVersionMetadata, writer.uint32(66).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OperationMetadataV1 {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOperationMetadataV1();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.method = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.insertTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.endTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.user = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.target = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.ephemeralMessage = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.warning.push(reader.string());
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.createVersionMetadata = CreateVersionMetadataV1.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OperationMetadataV1 {
    return {
      method: isSet(object.method) ? globalThis.String(object.method) : "",
      insertTime: isSet(object.insertTime) ? fromJsonTimestamp(object.insertTime) : undefined,
      endTime: isSet(object.endTime) ? fromJsonTimestamp(object.endTime) : undefined,
      user: isSet(object.user) ? globalThis.String(object.user) : "",
      target: isSet(object.target) ? globalThis.String(object.target) : "",
      ephemeralMessage: isSet(object.ephemeralMessage) ? globalThis.String(object.ephemeralMessage) : "",
      warning: globalThis.Array.isArray(object?.warning) ? object.warning.map((e: any) => globalThis.String(e)) : [],
      createVersionMetadata: isSet(object.createVersionMetadata)
        ? CreateVersionMetadataV1.fromJSON(object.createVersionMetadata)
        : undefined,
    };
  },

  toJSON(message: OperationMetadataV1): unknown {
    const obj: any = {};
    if (message.method !== "") {
      obj.method = message.method;
    }
    if (message.insertTime !== undefined) {
      obj.insertTime = message.insertTime.toISOString();
    }
    if (message.endTime !== undefined) {
      obj.endTime = message.endTime.toISOString();
    }
    if (message.user !== "") {
      obj.user = message.user;
    }
    if (message.target !== "") {
      obj.target = message.target;
    }
    if (message.ephemeralMessage !== "") {
      obj.ephemeralMessage = message.ephemeralMessage;
    }
    if (message.warning?.length) {
      obj.warning = message.warning;
    }
    if (message.createVersionMetadata !== undefined) {
      obj.createVersionMetadata = CreateVersionMetadataV1.toJSON(message.createVersionMetadata);
    }
    return obj;
  },

  create(base?: DeepPartial<OperationMetadataV1>): OperationMetadataV1 {
    return OperationMetadataV1.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<OperationMetadataV1>): OperationMetadataV1 {
    const message = createBaseOperationMetadataV1();
    message.method = object.method ?? "";
    message.insertTime = object.insertTime ?? undefined;
    message.endTime = object.endTime ?? undefined;
    message.user = object.user ?? "";
    message.target = object.target ?? "";
    message.ephemeralMessage = object.ephemeralMessage ?? "";
    message.warning = object.warning?.map((e) => e) || [];
    message.createVersionMetadata =
      (object.createVersionMetadata !== undefined && object.createVersionMetadata !== null)
        ? CreateVersionMetadataV1.fromPartial(object.createVersionMetadata)
        : undefined;
    return message;
  },
};

function createBaseCreateVersionMetadataV1(): CreateVersionMetadataV1 {
  return { cloudBuildId: "" };
}

export const CreateVersionMetadataV1: MessageFns<CreateVersionMetadataV1> = {
  encode(message: CreateVersionMetadataV1, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.cloudBuildId !== "") {
      writer.uint32(10).string(message.cloudBuildId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateVersionMetadataV1 {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateVersionMetadataV1();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.cloudBuildId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateVersionMetadataV1 {
    return { cloudBuildId: isSet(object.cloudBuildId) ? globalThis.String(object.cloudBuildId) : "" };
  },

  toJSON(message: CreateVersionMetadataV1): unknown {
    const obj: any = {};
    if (message.cloudBuildId !== "") {
      obj.cloudBuildId = message.cloudBuildId;
    }
    return obj;
  },

  create(base?: DeepPartial<CreateVersionMetadataV1>): CreateVersionMetadataV1 {
    return CreateVersionMetadataV1.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateVersionMetadataV1>): CreateVersionMetadataV1 {
    const message = createBaseCreateVersionMetadataV1();
    message.cloudBuildId = object.cloudBuildId ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
