// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/appengine/v1/firewall.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.appengine.v1";

/**
 * A single firewall rule that is evaluated against incoming traffic
 * and provides an action to take on matched requests.
 */
export interface FirewallRule {
  /**
   * A positive integer between [1, Int32.MaxValue-1] that defines the order of
   * rule evaluation. Rules with the lowest priority are evaluated first.
   *
   * A default rule at priority Int32.MaxValue matches all IPv4 and IPv6 traffic
   * when no previous rule matches. Only the action of this rule can be modified
   * by the user.
   */
  priority: number;
  /** The action to take on matched requests. */
  action: FirewallRule_Action;
  /**
   * IP address or range, defined using CIDR notation, of requests that this
   * rule applies to. You can use the wildcard character "*" to match all IPs
   * equivalent to "0/0" and "::/0" together.
   * Examples: `192.168.1.1` or `192.168.0.0/16` or `2001:db8::/32`
   *           or `2001:0db8:0000:0042:0000:8a2e:0370:7334`.
   *
   * <p>Truncation will be silently performed on addresses which are not
   * properly truncated. For example, `1.2.3.4/24` is accepted as the same
   * address as `1.2.3.0/24`. Similarly, for IPv6, `2001:db8::1/32` is accepted
   * as the same address as `2001:db8::/32`.
   */
  sourceRange: string;
  /**
   * An optional string description of this rule.
   * This field has a maximum length of 100 characters.
   */
  description: string;
}

/** Available actions to take on matching requests. */
export enum FirewallRule_Action {
  UNSPECIFIED_ACTION = 0,
  /** ALLOW - Matching requests are allowed. */
  ALLOW = 1,
  /** DENY - Matching requests are denied. */
  DENY = 2,
  UNRECOGNIZED = -1,
}

export function firewallRule_ActionFromJSON(object: any): FirewallRule_Action {
  switch (object) {
    case 0:
    case "UNSPECIFIED_ACTION":
      return FirewallRule_Action.UNSPECIFIED_ACTION;
    case 1:
    case "ALLOW":
      return FirewallRule_Action.ALLOW;
    case 2:
    case "DENY":
      return FirewallRule_Action.DENY;
    case -1:
    case "UNRECOGNIZED":
    default:
      return FirewallRule_Action.UNRECOGNIZED;
  }
}

export function firewallRule_ActionToJSON(object: FirewallRule_Action): string {
  switch (object) {
    case FirewallRule_Action.UNSPECIFIED_ACTION:
      return "UNSPECIFIED_ACTION";
    case FirewallRule_Action.ALLOW:
      return "ALLOW";
    case FirewallRule_Action.DENY:
      return "DENY";
    case FirewallRule_Action.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

function createBaseFirewallRule(): FirewallRule {
  return { priority: 0, action: 0, sourceRange: "", description: "" };
}

export const FirewallRule: MessageFns<FirewallRule> = {
  encode(message: FirewallRule, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.priority !== 0) {
      writer.uint32(8).int32(message.priority);
    }
    if (message.action !== 0) {
      writer.uint32(16).int32(message.action);
    }
    if (message.sourceRange !== "") {
      writer.uint32(26).string(message.sourceRange);
    }
    if (message.description !== "") {
      writer.uint32(34).string(message.description);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FirewallRule {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFirewallRule();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.priority = reader.int32();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.action = reader.int32() as any;
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.sourceRange = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.description = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FirewallRule {
    return {
      priority: isSet(object.priority) ? globalThis.Number(object.priority) : 0,
      action: isSet(object.action) ? firewallRule_ActionFromJSON(object.action) : 0,
      sourceRange: isSet(object.sourceRange) ? globalThis.String(object.sourceRange) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
    };
  },

  toJSON(message: FirewallRule): unknown {
    const obj: any = {};
    if (message.priority !== 0) {
      obj.priority = Math.round(message.priority);
    }
    if (message.action !== 0) {
      obj.action = firewallRule_ActionToJSON(message.action);
    }
    if (message.sourceRange !== "") {
      obj.sourceRange = message.sourceRange;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    return obj;
  },

  create(base?: DeepPartial<FirewallRule>): FirewallRule {
    return FirewallRule.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<FirewallRule>): FirewallRule {
    const message = createBaseFirewallRule();
    message.priority = object.priority ?? 0;
    message.action = object.action ?? 0;
    message.sourceRange = object.sourceRange ?? "";
    message.description = object.description ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
