// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/appengine/v1/application.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Duration } from "../../protobuf/duration.js";

export const protobufPackage = "google.appengine.v1";

/**
 * An Application resource contains the top-level configuration of an App
 * Engine application.
 */
export interface Application {
  /**
   * Full path to the Application resource in the API.
   * Example: `apps/myapp`.
   *
   * @OutputOnly
   */
  name: string;
  /**
   * Identifier of the Application resource. This identifier is equivalent
   * to the project ID of the Google Cloud Platform project where you want to
   * deploy your application.
   * Example: `myapp`.
   */
  id: string;
  /**
   * HTTP path dispatch rules for requests to the application that do not
   * explicitly target a service or version. Rules are order-dependent.
   * Up to 20 dispatch rules can be supported.
   */
  dispatchRules: UrlDispatchRule[];
  /**
   * Google Apps authentication domain that controls which users can access
   * this application.
   *
   * Defaults to open access for any Google Account.
   */
  authDomain: string;
  /**
   * Location from which this application runs. Application instances
   * run out of the data centers in the specified location, which is also where
   * all of the application's end user content is stored.
   *
   * Defaults to `us-central`.
   *
   * View the list of
   * [supported locations](https://cloud.google.com/appengine/docs/locations).
   */
  locationId: string;
  /**
   * Google Cloud Storage bucket that can be used for storing files
   * associated with this application. This bucket is associated with the
   * application and can be used by the gcloud deployment commands.
   *
   * @OutputOnly
   */
  codeBucket: string;
  /** Cookie expiration policy for this application. */
  defaultCookieExpiration:
    | Duration
    | undefined;
  /** Serving status of this application. */
  servingStatus: Application_ServingStatus;
  /**
   * Hostname used to reach this application, as resolved by App Engine.
   *
   * @OutputOnly
   */
  defaultHostname: string;
  /**
   * Google Cloud Storage bucket that can be used by this application to store
   * content.
   *
   * @OutputOnly
   */
  defaultBucket: string;
  /**
   * The service account associated with the application.
   * This is the app-level default identity. If no identity provided during
   * create version, Admin API will fallback to this one.
   */
  serviceAccount: string;
  iap:
    | Application_IdentityAwareProxy
    | undefined;
  /**
   * The Google Container Registry domain used for storing managed build docker
   * images for this application.
   */
  gcrDomain: string;
  /**
   * The type of the Cloud Firestore or Cloud Datastore database associated with
   * this application.
   */
  databaseType: Application_DatabaseType;
  /** The feature specific settings to be used in the application. */
  featureSettings: Application_FeatureSettings | undefined;
}

export enum Application_ServingStatus {
  /** UNSPECIFIED - Serving status is unspecified. */
  UNSPECIFIED = 0,
  /** SERVING - Application is serving. */
  SERVING = 1,
  /** USER_DISABLED - Application has been disabled by the user. */
  USER_DISABLED = 2,
  /** SYSTEM_DISABLED - Application has been disabled by the system. */
  SYSTEM_DISABLED = 3,
  UNRECOGNIZED = -1,
}

export function application_ServingStatusFromJSON(object: any): Application_ServingStatus {
  switch (object) {
    case 0:
    case "UNSPECIFIED":
      return Application_ServingStatus.UNSPECIFIED;
    case 1:
    case "SERVING":
      return Application_ServingStatus.SERVING;
    case 2:
    case "USER_DISABLED":
      return Application_ServingStatus.USER_DISABLED;
    case 3:
    case "SYSTEM_DISABLED":
      return Application_ServingStatus.SYSTEM_DISABLED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Application_ServingStatus.UNRECOGNIZED;
  }
}

export function application_ServingStatusToJSON(object: Application_ServingStatus): string {
  switch (object) {
    case Application_ServingStatus.UNSPECIFIED:
      return "UNSPECIFIED";
    case Application_ServingStatus.SERVING:
      return "SERVING";
    case Application_ServingStatus.USER_DISABLED:
      return "USER_DISABLED";
    case Application_ServingStatus.SYSTEM_DISABLED:
      return "SYSTEM_DISABLED";
    case Application_ServingStatus.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum Application_DatabaseType {
  /** DATABASE_TYPE_UNSPECIFIED - Database type is unspecified. */
  DATABASE_TYPE_UNSPECIFIED = 0,
  /** CLOUD_DATASTORE - Cloud Datastore */
  CLOUD_DATASTORE = 1,
  /** CLOUD_FIRESTORE - Cloud Firestore Native */
  CLOUD_FIRESTORE = 2,
  /** CLOUD_DATASTORE_COMPATIBILITY - Cloud Firestore in Datastore Mode */
  CLOUD_DATASTORE_COMPATIBILITY = 3,
  UNRECOGNIZED = -1,
}

export function application_DatabaseTypeFromJSON(object: any): Application_DatabaseType {
  switch (object) {
    case 0:
    case "DATABASE_TYPE_UNSPECIFIED":
      return Application_DatabaseType.DATABASE_TYPE_UNSPECIFIED;
    case 1:
    case "CLOUD_DATASTORE":
      return Application_DatabaseType.CLOUD_DATASTORE;
    case 2:
    case "CLOUD_FIRESTORE":
      return Application_DatabaseType.CLOUD_FIRESTORE;
    case 3:
    case "CLOUD_DATASTORE_COMPATIBILITY":
      return Application_DatabaseType.CLOUD_DATASTORE_COMPATIBILITY;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Application_DatabaseType.UNRECOGNIZED;
  }
}

export function application_DatabaseTypeToJSON(object: Application_DatabaseType): string {
  switch (object) {
    case Application_DatabaseType.DATABASE_TYPE_UNSPECIFIED:
      return "DATABASE_TYPE_UNSPECIFIED";
    case Application_DatabaseType.CLOUD_DATASTORE:
      return "CLOUD_DATASTORE";
    case Application_DatabaseType.CLOUD_FIRESTORE:
      return "CLOUD_FIRESTORE";
    case Application_DatabaseType.CLOUD_DATASTORE_COMPATIBILITY:
      return "CLOUD_DATASTORE_COMPATIBILITY";
    case Application_DatabaseType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Identity-Aware Proxy */
export interface Application_IdentityAwareProxy {
  /**
   * Whether the serving infrastructure will authenticate and
   * authorize all incoming requests.
   *
   * If true, the `oauth2_client_id` and `oauth2_client_secret`
   * fields must be non-empty.
   */
  enabled: boolean;
  /** OAuth2 client ID to use for the authentication flow. */
  oauth2ClientId: string;
  /**
   * OAuth2 client secret to use for the authentication flow.
   *
   * For security reasons, this value cannot be retrieved via the API.
   * Instead, the SHA-256 hash of the value is returned in the
   * `oauth2_client_secret_sha256` field.
   *
   * @InputOnly
   */
  oauth2ClientSecret: string;
  /**
   * Hex-encoded SHA-256 hash of the client secret.
   *
   * @OutputOnly
   */
  oauth2ClientSecretSha256: string;
}

/**
 * The feature specific settings to be used in the application. These define
 * behaviors that are user configurable.
 */
export interface Application_FeatureSettings {
  /**
   * Boolean value indicating if split health checks should be used instead
   * of the legacy health checks. At an app.yaml level, this means defaulting
   * to 'readiness_check' and 'liveness_check' values instead of
   * 'health_check' ones. Once the legacy 'health_check' behavior is
   * deprecated, and this value is always true, this setting can
   * be removed.
   */
  splitHealthChecks: boolean;
  /**
   * If true, use [Container-Optimized OS](https://cloud.google.com/container-optimized-os/)
   * base image for VMs, rather than a base Debian image.
   */
  useContainerOptimizedOs: boolean;
}

/** Rules to match an HTTP request and dispatch that request to a service. */
export interface UrlDispatchRule {
  /**
   * Domain name to match against. The wildcard "`*`" is supported if
   * specified before a period: "`*.`".
   *
   * Defaults to matching all domains: "`*`".
   */
  domain: string;
  /**
   * Pathname within the host. Must start with a "`/`". A
   * single "`*`" can be included at the end of the path.
   *
   * The sum of the lengths of the domain and path may not
   * exceed 100 characters.
   */
  path: string;
  /**
   * Resource ID of a service in this application that should
   * serve the matched request. The service must already
   * exist. Example: `default`.
   */
  service: string;
}

function createBaseApplication(): Application {
  return {
    name: "",
    id: "",
    dispatchRules: [],
    authDomain: "",
    locationId: "",
    codeBucket: "",
    defaultCookieExpiration: undefined,
    servingStatus: 0,
    defaultHostname: "",
    defaultBucket: "",
    serviceAccount: "",
    iap: undefined,
    gcrDomain: "",
    databaseType: 0,
    featureSettings: undefined,
  };
}

export const Application: MessageFns<Application> = {
  encode(message: Application, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.id !== "") {
      writer.uint32(18).string(message.id);
    }
    for (const v of message.dispatchRules) {
      UrlDispatchRule.encode(v!, writer.uint32(26).fork()).join();
    }
    if (message.authDomain !== "") {
      writer.uint32(50).string(message.authDomain);
    }
    if (message.locationId !== "") {
      writer.uint32(58).string(message.locationId);
    }
    if (message.codeBucket !== "") {
      writer.uint32(66).string(message.codeBucket);
    }
    if (message.defaultCookieExpiration !== undefined) {
      Duration.encode(message.defaultCookieExpiration, writer.uint32(74).fork()).join();
    }
    if (message.servingStatus !== 0) {
      writer.uint32(80).int32(message.servingStatus);
    }
    if (message.defaultHostname !== "") {
      writer.uint32(90).string(message.defaultHostname);
    }
    if (message.defaultBucket !== "") {
      writer.uint32(98).string(message.defaultBucket);
    }
    if (message.serviceAccount !== "") {
      writer.uint32(106).string(message.serviceAccount);
    }
    if (message.iap !== undefined) {
      Application_IdentityAwareProxy.encode(message.iap, writer.uint32(114).fork()).join();
    }
    if (message.gcrDomain !== "") {
      writer.uint32(130).string(message.gcrDomain);
    }
    if (message.databaseType !== 0) {
      writer.uint32(136).int32(message.databaseType);
    }
    if (message.featureSettings !== undefined) {
      Application_FeatureSettings.encode(message.featureSettings, writer.uint32(146).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Application {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseApplication();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.id = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.dispatchRules.push(UrlDispatchRule.decode(reader, reader.uint32()));
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.authDomain = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.locationId = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.codeBucket = reader.string();
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.defaultCookieExpiration = Duration.decode(reader, reader.uint32());
          continue;
        case 10:
          if (tag !== 80) {
            break;
          }

          message.servingStatus = reader.int32() as any;
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.defaultHostname = reader.string();
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }

          message.defaultBucket = reader.string();
          continue;
        case 13:
          if (tag !== 106) {
            break;
          }

          message.serviceAccount = reader.string();
          continue;
        case 14:
          if (tag !== 114) {
            break;
          }

          message.iap = Application_IdentityAwareProxy.decode(reader, reader.uint32());
          continue;
        case 16:
          if (tag !== 130) {
            break;
          }

          message.gcrDomain = reader.string();
          continue;
        case 17:
          if (tag !== 136) {
            break;
          }

          message.databaseType = reader.int32() as any;
          continue;
        case 18:
          if (tag !== 146) {
            break;
          }

          message.featureSettings = Application_FeatureSettings.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Application {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      dispatchRules: globalThis.Array.isArray(object?.dispatchRules)
        ? object.dispatchRules.map((e: any) => UrlDispatchRule.fromJSON(e))
        : [],
      authDomain: isSet(object.authDomain) ? globalThis.String(object.authDomain) : "",
      locationId: isSet(object.locationId) ? globalThis.String(object.locationId) : "",
      codeBucket: isSet(object.codeBucket) ? globalThis.String(object.codeBucket) : "",
      defaultCookieExpiration: isSet(object.defaultCookieExpiration)
        ? Duration.fromJSON(object.defaultCookieExpiration)
        : undefined,
      servingStatus: isSet(object.servingStatus) ? application_ServingStatusFromJSON(object.servingStatus) : 0,
      defaultHostname: isSet(object.defaultHostname) ? globalThis.String(object.defaultHostname) : "",
      defaultBucket: isSet(object.defaultBucket) ? globalThis.String(object.defaultBucket) : "",
      serviceAccount: isSet(object.serviceAccount) ? globalThis.String(object.serviceAccount) : "",
      iap: isSet(object.iap) ? Application_IdentityAwareProxy.fromJSON(object.iap) : undefined,
      gcrDomain: isSet(object.gcrDomain) ? globalThis.String(object.gcrDomain) : "",
      databaseType: isSet(object.databaseType) ? application_DatabaseTypeFromJSON(object.databaseType) : 0,
      featureSettings: isSet(object.featureSettings)
        ? Application_FeatureSettings.fromJSON(object.featureSettings)
        : undefined,
    };
  },

  toJSON(message: Application): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.dispatchRules?.length) {
      obj.dispatchRules = message.dispatchRules.map((e) => UrlDispatchRule.toJSON(e));
    }
    if (message.authDomain !== "") {
      obj.authDomain = message.authDomain;
    }
    if (message.locationId !== "") {
      obj.locationId = message.locationId;
    }
    if (message.codeBucket !== "") {
      obj.codeBucket = message.codeBucket;
    }
    if (message.defaultCookieExpiration !== undefined) {
      obj.defaultCookieExpiration = Duration.toJSON(message.defaultCookieExpiration);
    }
    if (message.servingStatus !== 0) {
      obj.servingStatus = application_ServingStatusToJSON(message.servingStatus);
    }
    if (message.defaultHostname !== "") {
      obj.defaultHostname = message.defaultHostname;
    }
    if (message.defaultBucket !== "") {
      obj.defaultBucket = message.defaultBucket;
    }
    if (message.serviceAccount !== "") {
      obj.serviceAccount = message.serviceAccount;
    }
    if (message.iap !== undefined) {
      obj.iap = Application_IdentityAwareProxy.toJSON(message.iap);
    }
    if (message.gcrDomain !== "") {
      obj.gcrDomain = message.gcrDomain;
    }
    if (message.databaseType !== 0) {
      obj.databaseType = application_DatabaseTypeToJSON(message.databaseType);
    }
    if (message.featureSettings !== undefined) {
      obj.featureSettings = Application_FeatureSettings.toJSON(message.featureSettings);
    }
    return obj;
  },

  create(base?: DeepPartial<Application>): Application {
    return Application.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Application>): Application {
    const message = createBaseApplication();
    message.name = object.name ?? "";
    message.id = object.id ?? "";
    message.dispatchRules = object.dispatchRules?.map((e) => UrlDispatchRule.fromPartial(e)) || [];
    message.authDomain = object.authDomain ?? "";
    message.locationId = object.locationId ?? "";
    message.codeBucket = object.codeBucket ?? "";
    message.defaultCookieExpiration =
      (object.defaultCookieExpiration !== undefined && object.defaultCookieExpiration !== null)
        ? Duration.fromPartial(object.defaultCookieExpiration)
        : undefined;
    message.servingStatus = object.servingStatus ?? 0;
    message.defaultHostname = object.defaultHostname ?? "";
    message.defaultBucket = object.defaultBucket ?? "";
    message.serviceAccount = object.serviceAccount ?? "";
    message.iap = (object.iap !== undefined && object.iap !== null)
      ? Application_IdentityAwareProxy.fromPartial(object.iap)
      : undefined;
    message.gcrDomain = object.gcrDomain ?? "";
    message.databaseType = object.databaseType ?? 0;
    message.featureSettings = (object.featureSettings !== undefined && object.featureSettings !== null)
      ? Application_FeatureSettings.fromPartial(object.featureSettings)
      : undefined;
    return message;
  },
};

function createBaseApplication_IdentityAwareProxy(): Application_IdentityAwareProxy {
  return { enabled: false, oauth2ClientId: "", oauth2ClientSecret: "", oauth2ClientSecretSha256: "" };
}

export const Application_IdentityAwareProxy: MessageFns<Application_IdentityAwareProxy> = {
  encode(message: Application_IdentityAwareProxy, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.enabled !== false) {
      writer.uint32(8).bool(message.enabled);
    }
    if (message.oauth2ClientId !== "") {
      writer.uint32(18).string(message.oauth2ClientId);
    }
    if (message.oauth2ClientSecret !== "") {
      writer.uint32(26).string(message.oauth2ClientSecret);
    }
    if (message.oauth2ClientSecretSha256 !== "") {
      writer.uint32(34).string(message.oauth2ClientSecretSha256);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Application_IdentityAwareProxy {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseApplication_IdentityAwareProxy();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.enabled = reader.bool();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.oauth2ClientId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.oauth2ClientSecret = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.oauth2ClientSecretSha256 = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Application_IdentityAwareProxy {
    return {
      enabled: isSet(object.enabled) ? globalThis.Boolean(object.enabled) : false,
      oauth2ClientId: isSet(object.oauth2ClientId) ? globalThis.String(object.oauth2ClientId) : "",
      oauth2ClientSecret: isSet(object.oauth2ClientSecret) ? globalThis.String(object.oauth2ClientSecret) : "",
      oauth2ClientSecretSha256: isSet(object.oauth2ClientSecretSha256)
        ? globalThis.String(object.oauth2ClientSecretSha256)
        : "",
    };
  },

  toJSON(message: Application_IdentityAwareProxy): unknown {
    const obj: any = {};
    if (message.enabled !== false) {
      obj.enabled = message.enabled;
    }
    if (message.oauth2ClientId !== "") {
      obj.oauth2ClientId = message.oauth2ClientId;
    }
    if (message.oauth2ClientSecret !== "") {
      obj.oauth2ClientSecret = message.oauth2ClientSecret;
    }
    if (message.oauth2ClientSecretSha256 !== "") {
      obj.oauth2ClientSecretSha256 = message.oauth2ClientSecretSha256;
    }
    return obj;
  },

  create(base?: DeepPartial<Application_IdentityAwareProxy>): Application_IdentityAwareProxy {
    return Application_IdentityAwareProxy.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Application_IdentityAwareProxy>): Application_IdentityAwareProxy {
    const message = createBaseApplication_IdentityAwareProxy();
    message.enabled = object.enabled ?? false;
    message.oauth2ClientId = object.oauth2ClientId ?? "";
    message.oauth2ClientSecret = object.oauth2ClientSecret ?? "";
    message.oauth2ClientSecretSha256 = object.oauth2ClientSecretSha256 ?? "";
    return message;
  },
};

function createBaseApplication_FeatureSettings(): Application_FeatureSettings {
  return { splitHealthChecks: false, useContainerOptimizedOs: false };
}

export const Application_FeatureSettings: MessageFns<Application_FeatureSettings> = {
  encode(message: Application_FeatureSettings, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.splitHealthChecks !== false) {
      writer.uint32(8).bool(message.splitHealthChecks);
    }
    if (message.useContainerOptimizedOs !== false) {
      writer.uint32(16).bool(message.useContainerOptimizedOs);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Application_FeatureSettings {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseApplication_FeatureSettings();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.splitHealthChecks = reader.bool();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.useContainerOptimizedOs = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Application_FeatureSettings {
    return {
      splitHealthChecks: isSet(object.splitHealthChecks) ? globalThis.Boolean(object.splitHealthChecks) : false,
      useContainerOptimizedOs: isSet(object.useContainerOptimizedOs)
        ? globalThis.Boolean(object.useContainerOptimizedOs)
        : false,
    };
  },

  toJSON(message: Application_FeatureSettings): unknown {
    const obj: any = {};
    if (message.splitHealthChecks !== false) {
      obj.splitHealthChecks = message.splitHealthChecks;
    }
    if (message.useContainerOptimizedOs !== false) {
      obj.useContainerOptimizedOs = message.useContainerOptimizedOs;
    }
    return obj;
  },

  create(base?: DeepPartial<Application_FeatureSettings>): Application_FeatureSettings {
    return Application_FeatureSettings.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Application_FeatureSettings>): Application_FeatureSettings {
    const message = createBaseApplication_FeatureSettings();
    message.splitHealthChecks = object.splitHealthChecks ?? false;
    message.useContainerOptimizedOs = object.useContainerOptimizedOs ?? false;
    return message;
  },
};

function createBaseUrlDispatchRule(): UrlDispatchRule {
  return { domain: "", path: "", service: "" };
}

export const UrlDispatchRule: MessageFns<UrlDispatchRule> = {
  encode(message: UrlDispatchRule, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.domain !== "") {
      writer.uint32(10).string(message.domain);
    }
    if (message.path !== "") {
      writer.uint32(18).string(message.path);
    }
    if (message.service !== "") {
      writer.uint32(26).string(message.service);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UrlDispatchRule {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUrlDispatchRule();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.domain = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.path = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.service = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UrlDispatchRule {
    return {
      domain: isSet(object.domain) ? globalThis.String(object.domain) : "",
      path: isSet(object.path) ? globalThis.String(object.path) : "",
      service: isSet(object.service) ? globalThis.String(object.service) : "",
    };
  },

  toJSON(message: UrlDispatchRule): unknown {
    const obj: any = {};
    if (message.domain !== "") {
      obj.domain = message.domain;
    }
    if (message.path !== "") {
      obj.path = message.path;
    }
    if (message.service !== "") {
      obj.service = message.service;
    }
    return obj;
  },

  create(base?: DeepPartial<UrlDispatchRule>): UrlDispatchRule {
    return UrlDispatchRule.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UrlDispatchRule>): UrlDispatchRule {
    const message = createBaseUrlDispatchRule();
    message.domain = object.domain ?? "";
    message.path = object.path ?? "";
    message.service = object.service ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
