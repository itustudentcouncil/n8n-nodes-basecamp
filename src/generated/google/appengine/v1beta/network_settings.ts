// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/appengine/v1beta/network_settings.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.appengine.v1beta";

/**
 * A NetworkSettings resource is a container for ingress settings for a version
 * or service.
 */
export interface NetworkSettings {
  /** The ingress settings for version or service. */
  ingressTrafficAllowed: NetworkSettings_IngressTrafficAllowed;
}

/** If unspecified, INGRESS_TRAFFIC_ALLOWED_ALL will be used. */
export enum NetworkSettings_IngressTrafficAllowed {
  /** INGRESS_TRAFFIC_ALLOWED_UNSPECIFIED - Unspecified */
  INGRESS_TRAFFIC_ALLOWED_UNSPECIFIED = 0,
  /** INGRESS_TRAFFIC_ALLOWED_ALL - Allow HTTP traffic from public and private sources. */
  INGRESS_TRAFFIC_ALLOWED_ALL = 1,
  /** INGRESS_TRAFFIC_ALLOWED_INTERNAL_ONLY - Allow HTTP traffic from only private VPC sources. */
  INGRESS_TRAFFIC_ALLOWED_INTERNAL_ONLY = 2,
  /** INGRESS_TRAFFIC_ALLOWED_INTERNAL_AND_LB - Allow HTTP traffic from private VPC sources and through load balancers. */
  INGRESS_TRAFFIC_ALLOWED_INTERNAL_AND_LB = 3,
  UNRECOGNIZED = -1,
}

export function networkSettings_IngressTrafficAllowedFromJSON(object: any): NetworkSettings_IngressTrafficAllowed {
  switch (object) {
    case 0:
    case "INGRESS_TRAFFIC_ALLOWED_UNSPECIFIED":
      return NetworkSettings_IngressTrafficAllowed.INGRESS_TRAFFIC_ALLOWED_UNSPECIFIED;
    case 1:
    case "INGRESS_TRAFFIC_ALLOWED_ALL":
      return NetworkSettings_IngressTrafficAllowed.INGRESS_TRAFFIC_ALLOWED_ALL;
    case 2:
    case "INGRESS_TRAFFIC_ALLOWED_INTERNAL_ONLY":
      return NetworkSettings_IngressTrafficAllowed.INGRESS_TRAFFIC_ALLOWED_INTERNAL_ONLY;
    case 3:
    case "INGRESS_TRAFFIC_ALLOWED_INTERNAL_AND_LB":
      return NetworkSettings_IngressTrafficAllowed.INGRESS_TRAFFIC_ALLOWED_INTERNAL_AND_LB;
    case -1:
    case "UNRECOGNIZED":
    default:
      return NetworkSettings_IngressTrafficAllowed.UNRECOGNIZED;
  }
}

export function networkSettings_IngressTrafficAllowedToJSON(object: NetworkSettings_IngressTrafficAllowed): string {
  switch (object) {
    case NetworkSettings_IngressTrafficAllowed.INGRESS_TRAFFIC_ALLOWED_UNSPECIFIED:
      return "INGRESS_TRAFFIC_ALLOWED_UNSPECIFIED";
    case NetworkSettings_IngressTrafficAllowed.INGRESS_TRAFFIC_ALLOWED_ALL:
      return "INGRESS_TRAFFIC_ALLOWED_ALL";
    case NetworkSettings_IngressTrafficAllowed.INGRESS_TRAFFIC_ALLOWED_INTERNAL_ONLY:
      return "INGRESS_TRAFFIC_ALLOWED_INTERNAL_ONLY";
    case NetworkSettings_IngressTrafficAllowed.INGRESS_TRAFFIC_ALLOWED_INTERNAL_AND_LB:
      return "INGRESS_TRAFFIC_ALLOWED_INTERNAL_AND_LB";
    case NetworkSettings_IngressTrafficAllowed.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

function createBaseNetworkSettings(): NetworkSettings {
  return { ingressTrafficAllowed: 0 };
}

export const NetworkSettings: MessageFns<NetworkSettings> = {
  encode(message: NetworkSettings, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.ingressTrafficAllowed !== 0) {
      writer.uint32(8).int32(message.ingressTrafficAllowed);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): NetworkSettings {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkSettings();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.ingressTrafficAllowed = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkSettings {
    return {
      ingressTrafficAllowed: isSet(object.ingressTrafficAllowed)
        ? networkSettings_IngressTrafficAllowedFromJSON(object.ingressTrafficAllowed)
        : 0,
    };
  },

  toJSON(message: NetworkSettings): unknown {
    const obj: any = {};
    if (message.ingressTrafficAllowed !== 0) {
      obj.ingressTrafficAllowed = networkSettings_IngressTrafficAllowedToJSON(message.ingressTrafficAllowed);
    }
    return obj;
  },

  create(base?: DeepPartial<NetworkSettings>): NetworkSettings {
    return NetworkSettings.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<NetworkSettings>): NetworkSettings {
    const message = createBaseNetworkSettings();
    message.ingressTrafficAllowed = object.ingressTrafficAllowed ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
