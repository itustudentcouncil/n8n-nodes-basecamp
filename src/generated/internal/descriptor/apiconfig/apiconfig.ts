// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: internal/descriptor/apiconfig/apiconfig.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Http } from "../../../google/api/http.js";

export const protobufPackage = "grpc.gateway.internal.descriptor.apiconfig";

/**
 * GrpcAPIService represents a stripped down version of google.api.Service .
 * Compare to https://github.com/googleapis/googleapis/blob/master/google/api/service.proto
 * The original imports 23 other protobuf files we are not interested in. If a significant
 * subset (>50%) of these start being reproduced in this file we should swap to using the
 * full generated version instead.
 *
 * For the purposes of the gateway generator we only consider a small subset of all
 * available features google supports in their service descriptions. Thanks to backwards
 * compatibility guarantees by protobuf it is safe for us to remove the other fields.
 */
export interface GrpcAPIService {
  /** Http Rule. */
  http: Http | undefined;
}

function createBaseGrpcAPIService(): GrpcAPIService {
  return { http: undefined };
}

export const GrpcAPIService: MessageFns<GrpcAPIService> = {
  encode(message: GrpcAPIService, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.http !== undefined) {
      Http.encode(message.http, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GrpcAPIService {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGrpcAPIService();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.http = Http.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GrpcAPIService {
    return { http: isSet(object.http) ? Http.fromJSON(object.http) : undefined };
  },

  toJSON(message: GrpcAPIService): unknown {
    const obj: any = {};
    if (message.http !== undefined) {
      obj.http = Http.toJSON(message.http);
    }
    return obj;
  },

  create(base?: DeepPartial<GrpcAPIService>): GrpcAPIService {
    return GrpcAPIService.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GrpcAPIService>): GrpcAPIService {
    const message = createBaseGrpcAPIService();
    message.http = (object.http !== undefined && object.http !== null) ? Http.fromPartial(object.http) : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
