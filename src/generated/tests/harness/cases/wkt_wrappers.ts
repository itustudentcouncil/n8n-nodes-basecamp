// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: tests/harness/cases/wkt_wrappers.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import {
  BoolValue,
  BytesValue,
  DoubleValue,
  FloatValue,
  Int32Value,
  Int64Value,
  StringValue,
  UInt32Value,
  UInt64Value,
} from "../../../google/protobuf/wrappers.js";

export const protobufPackage = "tests.harness.cases";

export interface WrapperNone {
  val: number | undefined;
}

export interface WrapperFloat {
  val: number | undefined;
}

export interface WrapperDouble {
  val: number | undefined;
}

export interface WrapperInt64 {
  val: Long | undefined;
}

export interface WrapperInt32 {
  val: number | undefined;
}

export interface WrapperUInt64 {
  val: Long | undefined;
}

export interface WrapperUInt32 {
  val: number | undefined;
}

export interface WrapperBool {
  val: boolean | undefined;
}

export interface WrapperString {
  val: string | undefined;
}

export interface WrapperBytes {
  val: Buffer | undefined;
}

export interface WrapperRequiredString {
  val: string | undefined;
}

export interface WrapperRequiredEmptyString {
  val: string | undefined;
}

export interface WrapperOptionalUuidString {
  val: string | undefined;
}

export interface WrapperRequiredFloat {
  val: number | undefined;
}

function createBaseWrapperNone(): WrapperNone {
  return { val: undefined };
}

export const WrapperNone: MessageFns<WrapperNone> = {
  encode(message: WrapperNone, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.val !== undefined) {
      Int32Value.encode({ value: message.val! }, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WrapperNone {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWrapperNone();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.val = Int32Value.decode(reader, reader.uint32()).value;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WrapperNone {
    return { val: isSet(object.val) ? Number(object.val) : undefined };
  },

  toJSON(message: WrapperNone): unknown {
    const obj: any = {};
    if (message.val !== undefined) {
      obj.val = message.val;
    }
    return obj;
  },

  create(base?: DeepPartial<WrapperNone>): WrapperNone {
    return WrapperNone.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<WrapperNone>): WrapperNone {
    const message = createBaseWrapperNone();
    message.val = object.val ?? undefined;
    return message;
  },
};

function createBaseWrapperFloat(): WrapperFloat {
  return { val: undefined };
}

export const WrapperFloat: MessageFns<WrapperFloat> = {
  encode(message: WrapperFloat, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.val !== undefined) {
      FloatValue.encode({ value: message.val! }, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WrapperFloat {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWrapperFloat();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.val = FloatValue.decode(reader, reader.uint32()).value;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WrapperFloat {
    return { val: isSet(object.val) ? Number(object.val) : undefined };
  },

  toJSON(message: WrapperFloat): unknown {
    const obj: any = {};
    if (message.val !== undefined) {
      obj.val = message.val;
    }
    return obj;
  },

  create(base?: DeepPartial<WrapperFloat>): WrapperFloat {
    return WrapperFloat.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<WrapperFloat>): WrapperFloat {
    const message = createBaseWrapperFloat();
    message.val = object.val ?? undefined;
    return message;
  },
};

function createBaseWrapperDouble(): WrapperDouble {
  return { val: undefined };
}

export const WrapperDouble: MessageFns<WrapperDouble> = {
  encode(message: WrapperDouble, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.val !== undefined) {
      DoubleValue.encode({ value: message.val! }, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WrapperDouble {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWrapperDouble();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.val = DoubleValue.decode(reader, reader.uint32()).value;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WrapperDouble {
    return { val: isSet(object.val) ? Number(object.val) : undefined };
  },

  toJSON(message: WrapperDouble): unknown {
    const obj: any = {};
    if (message.val !== undefined) {
      obj.val = message.val;
    }
    return obj;
  },

  create(base?: DeepPartial<WrapperDouble>): WrapperDouble {
    return WrapperDouble.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<WrapperDouble>): WrapperDouble {
    const message = createBaseWrapperDouble();
    message.val = object.val ?? undefined;
    return message;
  },
};

function createBaseWrapperInt64(): WrapperInt64 {
  return { val: undefined };
}

export const WrapperInt64: MessageFns<WrapperInt64> = {
  encode(message: WrapperInt64, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.val !== undefined) {
      Int64Value.encode({ value: message.val! }, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WrapperInt64 {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWrapperInt64();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.val = Int64Value.decode(reader, reader.uint32()).value;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WrapperInt64 {
    return { val: isSet(object.val) ? Long.fromValue(object.val) : undefined };
  },

  toJSON(message: WrapperInt64): unknown {
    const obj: any = {};
    if (message.val !== undefined) {
      obj.val = message.val;
    }
    return obj;
  },

  create(base?: DeepPartial<WrapperInt64>): WrapperInt64 {
    return WrapperInt64.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<WrapperInt64>): WrapperInt64 {
    const message = createBaseWrapperInt64();
    message.val = (object.val !== undefined && object.val !== null) ? Long.fromValue(object.val) : undefined;
    return message;
  },
};

function createBaseWrapperInt32(): WrapperInt32 {
  return { val: undefined };
}

export const WrapperInt32: MessageFns<WrapperInt32> = {
  encode(message: WrapperInt32, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.val !== undefined) {
      Int32Value.encode({ value: message.val! }, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WrapperInt32 {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWrapperInt32();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.val = Int32Value.decode(reader, reader.uint32()).value;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WrapperInt32 {
    return { val: isSet(object.val) ? Number(object.val) : undefined };
  },

  toJSON(message: WrapperInt32): unknown {
    const obj: any = {};
    if (message.val !== undefined) {
      obj.val = message.val;
    }
    return obj;
  },

  create(base?: DeepPartial<WrapperInt32>): WrapperInt32 {
    return WrapperInt32.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<WrapperInt32>): WrapperInt32 {
    const message = createBaseWrapperInt32();
    message.val = object.val ?? undefined;
    return message;
  },
};

function createBaseWrapperUInt64(): WrapperUInt64 {
  return { val: undefined };
}

export const WrapperUInt64: MessageFns<WrapperUInt64> = {
  encode(message: WrapperUInt64, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.val !== undefined) {
      UInt64Value.encode({ value: message.val! }, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WrapperUInt64 {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWrapperUInt64();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.val = UInt64Value.decode(reader, reader.uint32()).value;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WrapperUInt64 {
    return { val: isSet(object.val) ? Long.fromValue(object.val) : undefined };
  },

  toJSON(message: WrapperUInt64): unknown {
    const obj: any = {};
    if (message.val !== undefined) {
      obj.val = message.val;
    }
    return obj;
  },

  create(base?: DeepPartial<WrapperUInt64>): WrapperUInt64 {
    return WrapperUInt64.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<WrapperUInt64>): WrapperUInt64 {
    const message = createBaseWrapperUInt64();
    message.val = (object.val !== undefined && object.val !== null) ? Long.fromValue(object.val) : undefined;
    return message;
  },
};

function createBaseWrapperUInt32(): WrapperUInt32 {
  return { val: undefined };
}

export const WrapperUInt32: MessageFns<WrapperUInt32> = {
  encode(message: WrapperUInt32, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.val !== undefined) {
      UInt32Value.encode({ value: message.val! }, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WrapperUInt32 {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWrapperUInt32();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.val = UInt32Value.decode(reader, reader.uint32()).value;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WrapperUInt32 {
    return { val: isSet(object.val) ? Number(object.val) : undefined };
  },

  toJSON(message: WrapperUInt32): unknown {
    const obj: any = {};
    if (message.val !== undefined) {
      obj.val = message.val;
    }
    return obj;
  },

  create(base?: DeepPartial<WrapperUInt32>): WrapperUInt32 {
    return WrapperUInt32.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<WrapperUInt32>): WrapperUInt32 {
    const message = createBaseWrapperUInt32();
    message.val = object.val ?? undefined;
    return message;
  },
};

function createBaseWrapperBool(): WrapperBool {
  return { val: undefined };
}

export const WrapperBool: MessageFns<WrapperBool> = {
  encode(message: WrapperBool, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.val !== undefined) {
      BoolValue.encode({ value: message.val! }, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WrapperBool {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWrapperBool();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.val = BoolValue.decode(reader, reader.uint32()).value;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WrapperBool {
    return { val: isSet(object.val) ? Boolean(object.val) : undefined };
  },

  toJSON(message: WrapperBool): unknown {
    const obj: any = {};
    if (message.val !== undefined) {
      obj.val = message.val;
    }
    return obj;
  },

  create(base?: DeepPartial<WrapperBool>): WrapperBool {
    return WrapperBool.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<WrapperBool>): WrapperBool {
    const message = createBaseWrapperBool();
    message.val = object.val ?? undefined;
    return message;
  },
};

function createBaseWrapperString(): WrapperString {
  return { val: undefined };
}

export const WrapperString: MessageFns<WrapperString> = {
  encode(message: WrapperString, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.val !== undefined) {
      StringValue.encode({ value: message.val! }, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WrapperString {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWrapperString();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.val = StringValue.decode(reader, reader.uint32()).value;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WrapperString {
    return { val: isSet(object.val) ? String(object.val) : undefined };
  },

  toJSON(message: WrapperString): unknown {
    const obj: any = {};
    if (message.val !== undefined) {
      obj.val = message.val;
    }
    return obj;
  },

  create(base?: DeepPartial<WrapperString>): WrapperString {
    return WrapperString.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<WrapperString>): WrapperString {
    const message = createBaseWrapperString();
    message.val = object.val ?? undefined;
    return message;
  },
};

function createBaseWrapperBytes(): WrapperBytes {
  return { val: undefined };
}

export const WrapperBytes: MessageFns<WrapperBytes> = {
  encode(message: WrapperBytes, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.val !== undefined) {
      BytesValue.encode({ value: message.val! }, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WrapperBytes {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWrapperBytes();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.val = BytesValue.decode(reader, reader.uint32()).value;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WrapperBytes {
    return { val: isSet(object.val) ? new Buffer(object.val) : undefined };
  },

  toJSON(message: WrapperBytes): unknown {
    const obj: any = {};
    if (message.val !== undefined) {
      obj.val = message.val;
    }
    return obj;
  },

  create(base?: DeepPartial<WrapperBytes>): WrapperBytes {
    return WrapperBytes.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<WrapperBytes>): WrapperBytes {
    const message = createBaseWrapperBytes();
    message.val = object.val ?? undefined;
    return message;
  },
};

function createBaseWrapperRequiredString(): WrapperRequiredString {
  return { val: undefined };
}

export const WrapperRequiredString: MessageFns<WrapperRequiredString> = {
  encode(message: WrapperRequiredString, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.val !== undefined) {
      StringValue.encode({ value: message.val! }, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WrapperRequiredString {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWrapperRequiredString();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.val = StringValue.decode(reader, reader.uint32()).value;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WrapperRequiredString {
    return { val: isSet(object.val) ? String(object.val) : undefined };
  },

  toJSON(message: WrapperRequiredString): unknown {
    const obj: any = {};
    if (message.val !== undefined) {
      obj.val = message.val;
    }
    return obj;
  },

  create(base?: DeepPartial<WrapperRequiredString>): WrapperRequiredString {
    return WrapperRequiredString.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<WrapperRequiredString>): WrapperRequiredString {
    const message = createBaseWrapperRequiredString();
    message.val = object.val ?? undefined;
    return message;
  },
};

function createBaseWrapperRequiredEmptyString(): WrapperRequiredEmptyString {
  return { val: undefined };
}

export const WrapperRequiredEmptyString: MessageFns<WrapperRequiredEmptyString> = {
  encode(message: WrapperRequiredEmptyString, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.val !== undefined) {
      StringValue.encode({ value: message.val! }, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WrapperRequiredEmptyString {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWrapperRequiredEmptyString();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.val = StringValue.decode(reader, reader.uint32()).value;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WrapperRequiredEmptyString {
    return { val: isSet(object.val) ? String(object.val) : undefined };
  },

  toJSON(message: WrapperRequiredEmptyString): unknown {
    const obj: any = {};
    if (message.val !== undefined) {
      obj.val = message.val;
    }
    return obj;
  },

  create(base?: DeepPartial<WrapperRequiredEmptyString>): WrapperRequiredEmptyString {
    return WrapperRequiredEmptyString.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<WrapperRequiredEmptyString>): WrapperRequiredEmptyString {
    const message = createBaseWrapperRequiredEmptyString();
    message.val = object.val ?? undefined;
    return message;
  },
};

function createBaseWrapperOptionalUuidString(): WrapperOptionalUuidString {
  return { val: undefined };
}

export const WrapperOptionalUuidString: MessageFns<WrapperOptionalUuidString> = {
  encode(message: WrapperOptionalUuidString, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.val !== undefined) {
      StringValue.encode({ value: message.val! }, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WrapperOptionalUuidString {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWrapperOptionalUuidString();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.val = StringValue.decode(reader, reader.uint32()).value;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WrapperOptionalUuidString {
    return { val: isSet(object.val) ? String(object.val) : undefined };
  },

  toJSON(message: WrapperOptionalUuidString): unknown {
    const obj: any = {};
    if (message.val !== undefined) {
      obj.val = message.val;
    }
    return obj;
  },

  create(base?: DeepPartial<WrapperOptionalUuidString>): WrapperOptionalUuidString {
    return WrapperOptionalUuidString.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<WrapperOptionalUuidString>): WrapperOptionalUuidString {
    const message = createBaseWrapperOptionalUuidString();
    message.val = object.val ?? undefined;
    return message;
  },
};

function createBaseWrapperRequiredFloat(): WrapperRequiredFloat {
  return { val: undefined };
}

export const WrapperRequiredFloat: MessageFns<WrapperRequiredFloat> = {
  encode(message: WrapperRequiredFloat, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.val !== undefined) {
      FloatValue.encode({ value: message.val! }, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WrapperRequiredFloat {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWrapperRequiredFloat();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.val = FloatValue.decode(reader, reader.uint32()).value;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WrapperRequiredFloat {
    return { val: isSet(object.val) ? Number(object.val) : undefined };
  },

  toJSON(message: WrapperRequiredFloat): unknown {
    const obj: any = {};
    if (message.val !== undefined) {
      obj.val = message.val;
    }
    return obj;
  },

  create(base?: DeepPartial<WrapperRequiredFloat>): WrapperRequiredFloat {
    return WrapperRequiredFloat.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<WrapperRequiredFloat>): WrapperRequiredFloat {
    const message = createBaseWrapperRequiredFloat();
    message.val = object.val ?? undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
