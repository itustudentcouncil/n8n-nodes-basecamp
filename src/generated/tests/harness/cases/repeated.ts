// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: tests/harness/cases/repeated.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Any } from "../../../google/protobuf/any.js";
import { Duration } from "../../../google/protobuf/duration.js";
import { Embed as Embed1 } from "./other_package/embed.js";

export const protobufPackage = "tests.harness.cases";

export enum AnEnum {
  X = 0,
  Y = 1,
  UNRECOGNIZED = -1,
}

export function anEnumFromJSON(object: any): AnEnum {
  switch (object) {
    case 0:
    case "X":
      return AnEnum.X;
    case 1:
    case "Y":
      return AnEnum.Y;
    case -1:
    case "UNRECOGNIZED":
    default:
      return AnEnum.UNRECOGNIZED;
  }
}

export function anEnumToJSON(object: AnEnum): string {
  switch (object) {
    case AnEnum.X:
      return "X";
    case AnEnum.Y:
      return "Y";
    case AnEnum.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface Embed {
  val: Long;
}

export interface RepeatedNone {
  val: Long[];
}

export interface RepeatedEmbedNone {
  val: Embed[];
}

export interface RepeatedEmbedCrossPackageNone {
  val: Embed1[];
}

export interface RepeatedMin {
  val: Embed[];
}

export interface RepeatedMax {
  val: number[];
}

export interface RepeatedMinMax {
  val: number[];
}

export interface RepeatedExact {
  val: number[];
}

export interface RepeatedUnique {
  val: string[];
}

export interface RepeatedItemRule {
  val: number[];
}

export interface RepeatedItemPattern {
  val: string[];
}

export interface RepeatedEmbedSkip {
  val: Embed[];
}

export interface RepeatedItemIn {
  val: string[];
}

export interface RepeatedItemNotIn {
  val: string[];
}

export interface RepeatedEnumIn {
  val: AnEnum[];
}

export interface RepeatedEnumNotIn {
  val: AnEnum[];
}

export interface RepeatedEmbeddedEnumIn {
  val: RepeatedEmbeddedEnumIn_AnotherInEnum[];
}

export enum RepeatedEmbeddedEnumIn_AnotherInEnum {
  A = 0,
  B = 1,
  UNRECOGNIZED = -1,
}

export function repeatedEmbeddedEnumIn_AnotherInEnumFromJSON(object: any): RepeatedEmbeddedEnumIn_AnotherInEnum {
  switch (object) {
    case 0:
    case "A":
      return RepeatedEmbeddedEnumIn_AnotherInEnum.A;
    case 1:
    case "B":
      return RepeatedEmbeddedEnumIn_AnotherInEnum.B;
    case -1:
    case "UNRECOGNIZED":
    default:
      return RepeatedEmbeddedEnumIn_AnotherInEnum.UNRECOGNIZED;
  }
}

export function repeatedEmbeddedEnumIn_AnotherInEnumToJSON(object: RepeatedEmbeddedEnumIn_AnotherInEnum): string {
  switch (object) {
    case RepeatedEmbeddedEnumIn_AnotherInEnum.A:
      return "A";
    case RepeatedEmbeddedEnumIn_AnotherInEnum.B:
      return "B";
    case RepeatedEmbeddedEnumIn_AnotherInEnum.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface RepeatedEmbeddedEnumNotIn {
  val: RepeatedEmbeddedEnumNotIn_AnotherNotInEnum[];
}

export enum RepeatedEmbeddedEnumNotIn_AnotherNotInEnum {
  A = 0,
  B = 1,
  UNRECOGNIZED = -1,
}

export function repeatedEmbeddedEnumNotIn_AnotherNotInEnumFromJSON(
  object: any,
): RepeatedEmbeddedEnumNotIn_AnotherNotInEnum {
  switch (object) {
    case 0:
    case "A":
      return RepeatedEmbeddedEnumNotIn_AnotherNotInEnum.A;
    case 1:
    case "B":
      return RepeatedEmbeddedEnumNotIn_AnotherNotInEnum.B;
    case -1:
    case "UNRECOGNIZED":
    default:
      return RepeatedEmbeddedEnumNotIn_AnotherNotInEnum.UNRECOGNIZED;
  }
}

export function repeatedEmbeddedEnumNotIn_AnotherNotInEnumToJSON(
  object: RepeatedEmbeddedEnumNotIn_AnotherNotInEnum,
): string {
  switch (object) {
    case RepeatedEmbeddedEnumNotIn_AnotherNotInEnum.A:
      return "A";
    case RepeatedEmbeddedEnumNotIn_AnotherNotInEnum.B:
      return "B";
    case RepeatedEmbeddedEnumNotIn_AnotherNotInEnum.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface RepeatedAnyIn {
  val: Any[];
}

export interface RepeatedAnyNotIn {
  val: Any[];
}

export interface RepeatedMinAndItemLen {
  val: string[];
}

export interface RepeatedMinAndMaxItemLen {
  val: string[];
}

export interface RepeatedDuration {
  val: Duration[];
}

export interface RepeatedExactIgnore {
  val: number[];
}

function createBaseEmbed(): Embed {
  return { val: Long.ZERO };
}

export const Embed: MessageFns<Embed> = {
  encode(message: Embed, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (!message.val.equals(Long.ZERO)) {
      writer.uint32(8).int64(message.val.toString());
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Embed {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEmbed();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.val = Long.fromString(reader.int64().toString());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Embed {
    return { val: isSet(object.val) ? Long.fromValue(object.val) : Long.ZERO };
  },

  toJSON(message: Embed): unknown {
    const obj: any = {};
    if (!message.val.equals(Long.ZERO)) {
      obj.val = (message.val || Long.ZERO).toString();
    }
    return obj;
  },

  create(base?: DeepPartial<Embed>): Embed {
    return Embed.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Embed>): Embed {
    const message = createBaseEmbed();
    message.val = (object.val !== undefined && object.val !== null) ? Long.fromValue(object.val) : Long.ZERO;
    return message;
  },
};

function createBaseRepeatedNone(): RepeatedNone {
  return { val: [] };
}

export const RepeatedNone: MessageFns<RepeatedNone> = {
  encode(message: RepeatedNone, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    writer.uint32(10).fork();
    for (const v of message.val) {
      writer.int64(v.toString());
    }
    writer.join();
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RepeatedNone {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRepeatedNone();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag === 8) {
            message.val.push(Long.fromString(reader.int64().toString()));

            continue;
          }

          if (tag === 10) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.val.push(Long.fromString(reader.int64().toString()));
            }

            continue;
          }

          break;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RepeatedNone {
    return { val: globalThis.Array.isArray(object?.val) ? object.val.map((e: any) => Long.fromValue(e)) : [] };
  },

  toJSON(message: RepeatedNone): unknown {
    const obj: any = {};
    if (message.val?.length) {
      obj.val = message.val.map((e) => (e || Long.ZERO).toString());
    }
    return obj;
  },

  create(base?: DeepPartial<RepeatedNone>): RepeatedNone {
    return RepeatedNone.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RepeatedNone>): RepeatedNone {
    const message = createBaseRepeatedNone();
    message.val = object.val?.map((e) => Long.fromValue(e)) || [];
    return message;
  },
};

function createBaseRepeatedEmbedNone(): RepeatedEmbedNone {
  return { val: [] };
}

export const RepeatedEmbedNone: MessageFns<RepeatedEmbedNone> = {
  encode(message: RepeatedEmbedNone, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.val) {
      Embed.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RepeatedEmbedNone {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRepeatedEmbedNone();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.val.push(Embed.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RepeatedEmbedNone {
    return { val: globalThis.Array.isArray(object?.val) ? object.val.map((e: any) => Embed.fromJSON(e)) : [] };
  },

  toJSON(message: RepeatedEmbedNone): unknown {
    const obj: any = {};
    if (message.val?.length) {
      obj.val = message.val.map((e) => Embed.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<RepeatedEmbedNone>): RepeatedEmbedNone {
    return RepeatedEmbedNone.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RepeatedEmbedNone>): RepeatedEmbedNone {
    const message = createBaseRepeatedEmbedNone();
    message.val = object.val?.map((e) => Embed.fromPartial(e)) || [];
    return message;
  },
};

function createBaseRepeatedEmbedCrossPackageNone(): RepeatedEmbedCrossPackageNone {
  return { val: [] };
}

export const RepeatedEmbedCrossPackageNone: MessageFns<RepeatedEmbedCrossPackageNone> = {
  encode(message: RepeatedEmbedCrossPackageNone, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.val) {
      Embed1.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RepeatedEmbedCrossPackageNone {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRepeatedEmbedCrossPackageNone();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.val.push(Embed1.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RepeatedEmbedCrossPackageNone {
    return { val: globalThis.Array.isArray(object?.val) ? object.val.map((e: any) => Embed1.fromJSON(e)) : [] };
  },

  toJSON(message: RepeatedEmbedCrossPackageNone): unknown {
    const obj: any = {};
    if (message.val?.length) {
      obj.val = message.val.map((e) => Embed1.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<RepeatedEmbedCrossPackageNone>): RepeatedEmbedCrossPackageNone {
    return RepeatedEmbedCrossPackageNone.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RepeatedEmbedCrossPackageNone>): RepeatedEmbedCrossPackageNone {
    const message = createBaseRepeatedEmbedCrossPackageNone();
    message.val = object.val?.map((e) => Embed1.fromPartial(e)) || [];
    return message;
  },
};

function createBaseRepeatedMin(): RepeatedMin {
  return { val: [] };
}

export const RepeatedMin: MessageFns<RepeatedMin> = {
  encode(message: RepeatedMin, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.val) {
      Embed.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RepeatedMin {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRepeatedMin();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.val.push(Embed.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RepeatedMin {
    return { val: globalThis.Array.isArray(object?.val) ? object.val.map((e: any) => Embed.fromJSON(e)) : [] };
  },

  toJSON(message: RepeatedMin): unknown {
    const obj: any = {};
    if (message.val?.length) {
      obj.val = message.val.map((e) => Embed.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<RepeatedMin>): RepeatedMin {
    return RepeatedMin.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RepeatedMin>): RepeatedMin {
    const message = createBaseRepeatedMin();
    message.val = object.val?.map((e) => Embed.fromPartial(e)) || [];
    return message;
  },
};

function createBaseRepeatedMax(): RepeatedMax {
  return { val: [] };
}

export const RepeatedMax: MessageFns<RepeatedMax> = {
  encode(message: RepeatedMax, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    writer.uint32(10).fork();
    for (const v of message.val) {
      writer.double(v);
    }
    writer.join();
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RepeatedMax {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRepeatedMax();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag === 9) {
            message.val.push(reader.double());

            continue;
          }

          if (tag === 10) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.val.push(reader.double());
            }

            continue;
          }

          break;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RepeatedMax {
    return { val: globalThis.Array.isArray(object?.val) ? object.val.map((e: any) => globalThis.Number(e)) : [] };
  },

  toJSON(message: RepeatedMax): unknown {
    const obj: any = {};
    if (message.val?.length) {
      obj.val = message.val;
    }
    return obj;
  },

  create(base?: DeepPartial<RepeatedMax>): RepeatedMax {
    return RepeatedMax.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RepeatedMax>): RepeatedMax {
    const message = createBaseRepeatedMax();
    message.val = object.val?.map((e) => e) || [];
    return message;
  },
};

function createBaseRepeatedMinMax(): RepeatedMinMax {
  return { val: [] };
}

export const RepeatedMinMax: MessageFns<RepeatedMinMax> = {
  encode(message: RepeatedMinMax, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    writer.uint32(10).fork();
    for (const v of message.val) {
      writer.sfixed32(v);
    }
    writer.join();
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RepeatedMinMax {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRepeatedMinMax();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag === 13) {
            message.val.push(reader.sfixed32());

            continue;
          }

          if (tag === 10) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.val.push(reader.sfixed32());
            }

            continue;
          }

          break;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RepeatedMinMax {
    return { val: globalThis.Array.isArray(object?.val) ? object.val.map((e: any) => globalThis.Number(e)) : [] };
  },

  toJSON(message: RepeatedMinMax): unknown {
    const obj: any = {};
    if (message.val?.length) {
      obj.val = message.val.map((e) => Math.round(e));
    }
    return obj;
  },

  create(base?: DeepPartial<RepeatedMinMax>): RepeatedMinMax {
    return RepeatedMinMax.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RepeatedMinMax>): RepeatedMinMax {
    const message = createBaseRepeatedMinMax();
    message.val = object.val?.map((e) => e) || [];
    return message;
  },
};

function createBaseRepeatedExact(): RepeatedExact {
  return { val: [] };
}

export const RepeatedExact: MessageFns<RepeatedExact> = {
  encode(message: RepeatedExact, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    writer.uint32(10).fork();
    for (const v of message.val) {
      writer.uint32(v);
    }
    writer.join();
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RepeatedExact {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRepeatedExact();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag === 8) {
            message.val.push(reader.uint32());

            continue;
          }

          if (tag === 10) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.val.push(reader.uint32());
            }

            continue;
          }

          break;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RepeatedExact {
    return { val: globalThis.Array.isArray(object?.val) ? object.val.map((e: any) => globalThis.Number(e)) : [] };
  },

  toJSON(message: RepeatedExact): unknown {
    const obj: any = {};
    if (message.val?.length) {
      obj.val = message.val.map((e) => Math.round(e));
    }
    return obj;
  },

  create(base?: DeepPartial<RepeatedExact>): RepeatedExact {
    return RepeatedExact.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RepeatedExact>): RepeatedExact {
    const message = createBaseRepeatedExact();
    message.val = object.val?.map((e) => e) || [];
    return message;
  },
};

function createBaseRepeatedUnique(): RepeatedUnique {
  return { val: [] };
}

export const RepeatedUnique: MessageFns<RepeatedUnique> = {
  encode(message: RepeatedUnique, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.val) {
      writer.uint32(10).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RepeatedUnique {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRepeatedUnique();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.val.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RepeatedUnique {
    return { val: globalThis.Array.isArray(object?.val) ? object.val.map((e: any) => globalThis.String(e)) : [] };
  },

  toJSON(message: RepeatedUnique): unknown {
    const obj: any = {};
    if (message.val?.length) {
      obj.val = message.val;
    }
    return obj;
  },

  create(base?: DeepPartial<RepeatedUnique>): RepeatedUnique {
    return RepeatedUnique.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RepeatedUnique>): RepeatedUnique {
    const message = createBaseRepeatedUnique();
    message.val = object.val?.map((e) => e) || [];
    return message;
  },
};

function createBaseRepeatedItemRule(): RepeatedItemRule {
  return { val: [] };
}

export const RepeatedItemRule: MessageFns<RepeatedItemRule> = {
  encode(message: RepeatedItemRule, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    writer.uint32(10).fork();
    for (const v of message.val) {
      writer.float(v);
    }
    writer.join();
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RepeatedItemRule {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRepeatedItemRule();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag === 13) {
            message.val.push(reader.float());

            continue;
          }

          if (tag === 10) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.val.push(reader.float());
            }

            continue;
          }

          break;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RepeatedItemRule {
    return { val: globalThis.Array.isArray(object?.val) ? object.val.map((e: any) => globalThis.Number(e)) : [] };
  },

  toJSON(message: RepeatedItemRule): unknown {
    const obj: any = {};
    if (message.val?.length) {
      obj.val = message.val;
    }
    return obj;
  },

  create(base?: DeepPartial<RepeatedItemRule>): RepeatedItemRule {
    return RepeatedItemRule.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RepeatedItemRule>): RepeatedItemRule {
    const message = createBaseRepeatedItemRule();
    message.val = object.val?.map((e) => e) || [];
    return message;
  },
};

function createBaseRepeatedItemPattern(): RepeatedItemPattern {
  return { val: [] };
}

export const RepeatedItemPattern: MessageFns<RepeatedItemPattern> = {
  encode(message: RepeatedItemPattern, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.val) {
      writer.uint32(10).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RepeatedItemPattern {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRepeatedItemPattern();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.val.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RepeatedItemPattern {
    return { val: globalThis.Array.isArray(object?.val) ? object.val.map((e: any) => globalThis.String(e)) : [] };
  },

  toJSON(message: RepeatedItemPattern): unknown {
    const obj: any = {};
    if (message.val?.length) {
      obj.val = message.val;
    }
    return obj;
  },

  create(base?: DeepPartial<RepeatedItemPattern>): RepeatedItemPattern {
    return RepeatedItemPattern.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RepeatedItemPattern>): RepeatedItemPattern {
    const message = createBaseRepeatedItemPattern();
    message.val = object.val?.map((e) => e) || [];
    return message;
  },
};

function createBaseRepeatedEmbedSkip(): RepeatedEmbedSkip {
  return { val: [] };
}

export const RepeatedEmbedSkip: MessageFns<RepeatedEmbedSkip> = {
  encode(message: RepeatedEmbedSkip, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.val) {
      Embed.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RepeatedEmbedSkip {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRepeatedEmbedSkip();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.val.push(Embed.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RepeatedEmbedSkip {
    return { val: globalThis.Array.isArray(object?.val) ? object.val.map((e: any) => Embed.fromJSON(e)) : [] };
  },

  toJSON(message: RepeatedEmbedSkip): unknown {
    const obj: any = {};
    if (message.val?.length) {
      obj.val = message.val.map((e) => Embed.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<RepeatedEmbedSkip>): RepeatedEmbedSkip {
    return RepeatedEmbedSkip.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RepeatedEmbedSkip>): RepeatedEmbedSkip {
    const message = createBaseRepeatedEmbedSkip();
    message.val = object.val?.map((e) => Embed.fromPartial(e)) || [];
    return message;
  },
};

function createBaseRepeatedItemIn(): RepeatedItemIn {
  return { val: [] };
}

export const RepeatedItemIn: MessageFns<RepeatedItemIn> = {
  encode(message: RepeatedItemIn, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.val) {
      writer.uint32(10).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RepeatedItemIn {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRepeatedItemIn();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.val.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RepeatedItemIn {
    return { val: globalThis.Array.isArray(object?.val) ? object.val.map((e: any) => globalThis.String(e)) : [] };
  },

  toJSON(message: RepeatedItemIn): unknown {
    const obj: any = {};
    if (message.val?.length) {
      obj.val = message.val;
    }
    return obj;
  },

  create(base?: DeepPartial<RepeatedItemIn>): RepeatedItemIn {
    return RepeatedItemIn.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RepeatedItemIn>): RepeatedItemIn {
    const message = createBaseRepeatedItemIn();
    message.val = object.val?.map((e) => e) || [];
    return message;
  },
};

function createBaseRepeatedItemNotIn(): RepeatedItemNotIn {
  return { val: [] };
}

export const RepeatedItemNotIn: MessageFns<RepeatedItemNotIn> = {
  encode(message: RepeatedItemNotIn, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.val) {
      writer.uint32(10).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RepeatedItemNotIn {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRepeatedItemNotIn();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.val.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RepeatedItemNotIn {
    return { val: globalThis.Array.isArray(object?.val) ? object.val.map((e: any) => globalThis.String(e)) : [] };
  },

  toJSON(message: RepeatedItemNotIn): unknown {
    const obj: any = {};
    if (message.val?.length) {
      obj.val = message.val;
    }
    return obj;
  },

  create(base?: DeepPartial<RepeatedItemNotIn>): RepeatedItemNotIn {
    return RepeatedItemNotIn.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RepeatedItemNotIn>): RepeatedItemNotIn {
    const message = createBaseRepeatedItemNotIn();
    message.val = object.val?.map((e) => e) || [];
    return message;
  },
};

function createBaseRepeatedEnumIn(): RepeatedEnumIn {
  return { val: [] };
}

export const RepeatedEnumIn: MessageFns<RepeatedEnumIn> = {
  encode(message: RepeatedEnumIn, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    writer.uint32(10).fork();
    for (const v of message.val) {
      writer.int32(v);
    }
    writer.join();
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RepeatedEnumIn {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRepeatedEnumIn();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag === 8) {
            message.val.push(reader.int32() as any);

            continue;
          }

          if (tag === 10) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.val.push(reader.int32() as any);
            }

            continue;
          }

          break;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RepeatedEnumIn {
    return { val: globalThis.Array.isArray(object?.val) ? object.val.map((e: any) => anEnumFromJSON(e)) : [] };
  },

  toJSON(message: RepeatedEnumIn): unknown {
    const obj: any = {};
    if (message.val?.length) {
      obj.val = message.val.map((e) => anEnumToJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<RepeatedEnumIn>): RepeatedEnumIn {
    return RepeatedEnumIn.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RepeatedEnumIn>): RepeatedEnumIn {
    const message = createBaseRepeatedEnumIn();
    message.val = object.val?.map((e) => e) || [];
    return message;
  },
};

function createBaseRepeatedEnumNotIn(): RepeatedEnumNotIn {
  return { val: [] };
}

export const RepeatedEnumNotIn: MessageFns<RepeatedEnumNotIn> = {
  encode(message: RepeatedEnumNotIn, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    writer.uint32(10).fork();
    for (const v of message.val) {
      writer.int32(v);
    }
    writer.join();
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RepeatedEnumNotIn {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRepeatedEnumNotIn();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag === 8) {
            message.val.push(reader.int32() as any);

            continue;
          }

          if (tag === 10) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.val.push(reader.int32() as any);
            }

            continue;
          }

          break;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RepeatedEnumNotIn {
    return { val: globalThis.Array.isArray(object?.val) ? object.val.map((e: any) => anEnumFromJSON(e)) : [] };
  },

  toJSON(message: RepeatedEnumNotIn): unknown {
    const obj: any = {};
    if (message.val?.length) {
      obj.val = message.val.map((e) => anEnumToJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<RepeatedEnumNotIn>): RepeatedEnumNotIn {
    return RepeatedEnumNotIn.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RepeatedEnumNotIn>): RepeatedEnumNotIn {
    const message = createBaseRepeatedEnumNotIn();
    message.val = object.val?.map((e) => e) || [];
    return message;
  },
};

function createBaseRepeatedEmbeddedEnumIn(): RepeatedEmbeddedEnumIn {
  return { val: [] };
}

export const RepeatedEmbeddedEnumIn: MessageFns<RepeatedEmbeddedEnumIn> = {
  encode(message: RepeatedEmbeddedEnumIn, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    writer.uint32(10).fork();
    for (const v of message.val) {
      writer.int32(v);
    }
    writer.join();
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RepeatedEmbeddedEnumIn {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRepeatedEmbeddedEnumIn();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag === 8) {
            message.val.push(reader.int32() as any);

            continue;
          }

          if (tag === 10) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.val.push(reader.int32() as any);
            }

            continue;
          }

          break;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RepeatedEmbeddedEnumIn {
    return {
      val: globalThis.Array.isArray(object?.val)
        ? object.val.map((e: any) => repeatedEmbeddedEnumIn_AnotherInEnumFromJSON(e))
        : [],
    };
  },

  toJSON(message: RepeatedEmbeddedEnumIn): unknown {
    const obj: any = {};
    if (message.val?.length) {
      obj.val = message.val.map((e) => repeatedEmbeddedEnumIn_AnotherInEnumToJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<RepeatedEmbeddedEnumIn>): RepeatedEmbeddedEnumIn {
    return RepeatedEmbeddedEnumIn.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RepeatedEmbeddedEnumIn>): RepeatedEmbeddedEnumIn {
    const message = createBaseRepeatedEmbeddedEnumIn();
    message.val = object.val?.map((e) => e) || [];
    return message;
  },
};

function createBaseRepeatedEmbeddedEnumNotIn(): RepeatedEmbeddedEnumNotIn {
  return { val: [] };
}

export const RepeatedEmbeddedEnumNotIn: MessageFns<RepeatedEmbeddedEnumNotIn> = {
  encode(message: RepeatedEmbeddedEnumNotIn, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    writer.uint32(10).fork();
    for (const v of message.val) {
      writer.int32(v);
    }
    writer.join();
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RepeatedEmbeddedEnumNotIn {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRepeatedEmbeddedEnumNotIn();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag === 8) {
            message.val.push(reader.int32() as any);

            continue;
          }

          if (tag === 10) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.val.push(reader.int32() as any);
            }

            continue;
          }

          break;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RepeatedEmbeddedEnumNotIn {
    return {
      val: globalThis.Array.isArray(object?.val)
        ? object.val.map((e: any) => repeatedEmbeddedEnumNotIn_AnotherNotInEnumFromJSON(e))
        : [],
    };
  },

  toJSON(message: RepeatedEmbeddedEnumNotIn): unknown {
    const obj: any = {};
    if (message.val?.length) {
      obj.val = message.val.map((e) => repeatedEmbeddedEnumNotIn_AnotherNotInEnumToJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<RepeatedEmbeddedEnumNotIn>): RepeatedEmbeddedEnumNotIn {
    return RepeatedEmbeddedEnumNotIn.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RepeatedEmbeddedEnumNotIn>): RepeatedEmbeddedEnumNotIn {
    const message = createBaseRepeatedEmbeddedEnumNotIn();
    message.val = object.val?.map((e) => e) || [];
    return message;
  },
};

function createBaseRepeatedAnyIn(): RepeatedAnyIn {
  return { val: [] };
}

export const RepeatedAnyIn: MessageFns<RepeatedAnyIn> = {
  encode(message: RepeatedAnyIn, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.val) {
      Any.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RepeatedAnyIn {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRepeatedAnyIn();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.val.push(Any.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RepeatedAnyIn {
    return { val: globalThis.Array.isArray(object?.val) ? object.val.map((e: any) => Any.fromJSON(e)) : [] };
  },

  toJSON(message: RepeatedAnyIn): unknown {
    const obj: any = {};
    if (message.val?.length) {
      obj.val = message.val.map((e) => Any.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<RepeatedAnyIn>): RepeatedAnyIn {
    return RepeatedAnyIn.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RepeatedAnyIn>): RepeatedAnyIn {
    const message = createBaseRepeatedAnyIn();
    message.val = object.val?.map((e) => Any.fromPartial(e)) || [];
    return message;
  },
};

function createBaseRepeatedAnyNotIn(): RepeatedAnyNotIn {
  return { val: [] };
}

export const RepeatedAnyNotIn: MessageFns<RepeatedAnyNotIn> = {
  encode(message: RepeatedAnyNotIn, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.val) {
      Any.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RepeatedAnyNotIn {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRepeatedAnyNotIn();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.val.push(Any.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RepeatedAnyNotIn {
    return { val: globalThis.Array.isArray(object?.val) ? object.val.map((e: any) => Any.fromJSON(e)) : [] };
  },

  toJSON(message: RepeatedAnyNotIn): unknown {
    const obj: any = {};
    if (message.val?.length) {
      obj.val = message.val.map((e) => Any.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<RepeatedAnyNotIn>): RepeatedAnyNotIn {
    return RepeatedAnyNotIn.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RepeatedAnyNotIn>): RepeatedAnyNotIn {
    const message = createBaseRepeatedAnyNotIn();
    message.val = object.val?.map((e) => Any.fromPartial(e)) || [];
    return message;
  },
};

function createBaseRepeatedMinAndItemLen(): RepeatedMinAndItemLen {
  return { val: [] };
}

export const RepeatedMinAndItemLen: MessageFns<RepeatedMinAndItemLen> = {
  encode(message: RepeatedMinAndItemLen, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.val) {
      writer.uint32(10).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RepeatedMinAndItemLen {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRepeatedMinAndItemLen();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.val.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RepeatedMinAndItemLen {
    return { val: globalThis.Array.isArray(object?.val) ? object.val.map((e: any) => globalThis.String(e)) : [] };
  },

  toJSON(message: RepeatedMinAndItemLen): unknown {
    const obj: any = {};
    if (message.val?.length) {
      obj.val = message.val;
    }
    return obj;
  },

  create(base?: DeepPartial<RepeatedMinAndItemLen>): RepeatedMinAndItemLen {
    return RepeatedMinAndItemLen.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RepeatedMinAndItemLen>): RepeatedMinAndItemLen {
    const message = createBaseRepeatedMinAndItemLen();
    message.val = object.val?.map((e) => e) || [];
    return message;
  },
};

function createBaseRepeatedMinAndMaxItemLen(): RepeatedMinAndMaxItemLen {
  return { val: [] };
}

export const RepeatedMinAndMaxItemLen: MessageFns<RepeatedMinAndMaxItemLen> = {
  encode(message: RepeatedMinAndMaxItemLen, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.val) {
      writer.uint32(10).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RepeatedMinAndMaxItemLen {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRepeatedMinAndMaxItemLen();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.val.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RepeatedMinAndMaxItemLen {
    return { val: globalThis.Array.isArray(object?.val) ? object.val.map((e: any) => globalThis.String(e)) : [] };
  },

  toJSON(message: RepeatedMinAndMaxItemLen): unknown {
    const obj: any = {};
    if (message.val?.length) {
      obj.val = message.val;
    }
    return obj;
  },

  create(base?: DeepPartial<RepeatedMinAndMaxItemLen>): RepeatedMinAndMaxItemLen {
    return RepeatedMinAndMaxItemLen.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RepeatedMinAndMaxItemLen>): RepeatedMinAndMaxItemLen {
    const message = createBaseRepeatedMinAndMaxItemLen();
    message.val = object.val?.map((e) => e) || [];
    return message;
  },
};

function createBaseRepeatedDuration(): RepeatedDuration {
  return { val: [] };
}

export const RepeatedDuration: MessageFns<RepeatedDuration> = {
  encode(message: RepeatedDuration, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.val) {
      Duration.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RepeatedDuration {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRepeatedDuration();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.val.push(Duration.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RepeatedDuration {
    return { val: globalThis.Array.isArray(object?.val) ? object.val.map((e: any) => Duration.fromJSON(e)) : [] };
  },

  toJSON(message: RepeatedDuration): unknown {
    const obj: any = {};
    if (message.val?.length) {
      obj.val = message.val.map((e) => Duration.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<RepeatedDuration>): RepeatedDuration {
    return RepeatedDuration.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RepeatedDuration>): RepeatedDuration {
    const message = createBaseRepeatedDuration();
    message.val = object.val?.map((e) => Duration.fromPartial(e)) || [];
    return message;
  },
};

function createBaseRepeatedExactIgnore(): RepeatedExactIgnore {
  return { val: [] };
}

export const RepeatedExactIgnore: MessageFns<RepeatedExactIgnore> = {
  encode(message: RepeatedExactIgnore, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    writer.uint32(10).fork();
    for (const v of message.val) {
      writer.uint32(v);
    }
    writer.join();
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RepeatedExactIgnore {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRepeatedExactIgnore();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag === 8) {
            message.val.push(reader.uint32());

            continue;
          }

          if (tag === 10) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.val.push(reader.uint32());
            }

            continue;
          }

          break;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RepeatedExactIgnore {
    return { val: globalThis.Array.isArray(object?.val) ? object.val.map((e: any) => globalThis.Number(e)) : [] };
  },

  toJSON(message: RepeatedExactIgnore): unknown {
    const obj: any = {};
    if (message.val?.length) {
      obj.val = message.val.map((e) => Math.round(e));
    }
    return obj;
  },

  create(base?: DeepPartial<RepeatedExactIgnore>): RepeatedExactIgnore {
    return RepeatedExactIgnore.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RepeatedExactIgnore>): RepeatedExactIgnore {
    const message = createBaseRepeatedExactIgnore();
    message.val = object.val?.map((e) => e) || [];
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
