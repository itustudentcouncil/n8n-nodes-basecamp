// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: java/pgv-java-stub/src/test/proto/embedded.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "io.envoyproxy.pvg.cases";

export interface TokenUse {
  payload: TokenUse_Payload | undefined;
}

export interface TokenUse_Payload {
  token: TokenUse_Payload_Token | undefined;
}

export interface TokenUse_Payload_Token {
  value: string;
}

function createBaseTokenUse(): TokenUse {
  return { payload: undefined };
}

export const TokenUse: MessageFns<TokenUse> = {
  encode(message: TokenUse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.payload !== undefined) {
      TokenUse_Payload.encode(message.payload, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TokenUse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTokenUse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.payload = TokenUse_Payload.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TokenUse {
    return { payload: isSet(object.payload) ? TokenUse_Payload.fromJSON(object.payload) : undefined };
  },

  toJSON(message: TokenUse): unknown {
    const obj: any = {};
    if (message.payload !== undefined) {
      obj.payload = TokenUse_Payload.toJSON(message.payload);
    }
    return obj;
  },

  create(base?: DeepPartial<TokenUse>): TokenUse {
    return TokenUse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<TokenUse>): TokenUse {
    const message = createBaseTokenUse();
    message.payload = (object.payload !== undefined && object.payload !== null)
      ? TokenUse_Payload.fromPartial(object.payload)
      : undefined;
    return message;
  },
};

function createBaseTokenUse_Payload(): TokenUse_Payload {
  return { token: undefined };
}

export const TokenUse_Payload: MessageFns<TokenUse_Payload> = {
  encode(message: TokenUse_Payload, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.token !== undefined) {
      TokenUse_Payload_Token.encode(message.token, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TokenUse_Payload {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTokenUse_Payload();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.token = TokenUse_Payload_Token.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TokenUse_Payload {
    return { token: isSet(object.token) ? TokenUse_Payload_Token.fromJSON(object.token) : undefined };
  },

  toJSON(message: TokenUse_Payload): unknown {
    const obj: any = {};
    if (message.token !== undefined) {
      obj.token = TokenUse_Payload_Token.toJSON(message.token);
    }
    return obj;
  },

  create(base?: DeepPartial<TokenUse_Payload>): TokenUse_Payload {
    return TokenUse_Payload.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<TokenUse_Payload>): TokenUse_Payload {
    const message = createBaseTokenUse_Payload();
    message.token = (object.token !== undefined && object.token !== null)
      ? TokenUse_Payload_Token.fromPartial(object.token)
      : undefined;
    return message;
  },
};

function createBaseTokenUse_Payload_Token(): TokenUse_Payload_Token {
  return { value: "" };
}

export const TokenUse_Payload_Token: MessageFns<TokenUse_Payload_Token> = {
  encode(message: TokenUse_Payload_Token, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.value !== "") {
      writer.uint32(10).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TokenUse_Payload_Token {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTokenUse_Payload_Token();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TokenUse_Payload_Token {
    return { value: isSet(object.value) ? globalThis.String(object.value) : "" };
  },

  toJSON(message: TokenUse_Payload_Token): unknown {
    const obj: any = {};
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create(base?: DeepPartial<TokenUse_Payload_Token>): TokenUse_Payload_Token {
    return TokenUse_Payload_Token.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<TokenUse_Payload_Token>): TokenUse_Payload_Token {
    const message = createBaseTokenUse_Payload_Token();
    message.value = object.value ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
