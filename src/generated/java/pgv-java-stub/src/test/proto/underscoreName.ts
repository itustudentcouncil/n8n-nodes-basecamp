// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: java/pgv-java-stub/src/test/proto/underscoreName.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "io.envoyproxy.pgv.grpc";

export interface MessageNameWithUnderscore {
  v: string;
}

export interface AnotherMessageNameWithUnderscore {
  v: string;
}

export interface MessageNameWithTwoUnderscore {
  v: string;
}

function createBaseMessageNameWithUnderscore(): MessageNameWithUnderscore {
  return { v: "" };
}

export const MessageNameWithUnderscore: MessageFns<MessageNameWithUnderscore> = {
  encode(message: MessageNameWithUnderscore, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.v !== "") {
      writer.uint32(10).string(message.v);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MessageNameWithUnderscore {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMessageNameWithUnderscore();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.v = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MessageNameWithUnderscore {
    return { v: isSet(object.v) ? globalThis.String(object.v) : "" };
  },

  toJSON(message: MessageNameWithUnderscore): unknown {
    const obj: any = {};
    if (message.v !== "") {
      obj.v = message.v;
    }
    return obj;
  },

  create(base?: DeepPartial<MessageNameWithUnderscore>): MessageNameWithUnderscore {
    return MessageNameWithUnderscore.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MessageNameWithUnderscore>): MessageNameWithUnderscore {
    const message = createBaseMessageNameWithUnderscore();
    message.v = object.v ?? "";
    return message;
  },
};

function createBaseAnotherMessageNameWithUnderscore(): AnotherMessageNameWithUnderscore {
  return { v: "" };
}

export const AnotherMessageNameWithUnderscore: MessageFns<AnotherMessageNameWithUnderscore> = {
  encode(message: AnotherMessageNameWithUnderscore, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.v !== "") {
      writer.uint32(10).string(message.v);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AnotherMessageNameWithUnderscore {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAnotherMessageNameWithUnderscore();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.v = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AnotherMessageNameWithUnderscore {
    return { v: isSet(object.v) ? globalThis.String(object.v) : "" };
  },

  toJSON(message: AnotherMessageNameWithUnderscore): unknown {
    const obj: any = {};
    if (message.v !== "") {
      obj.v = message.v;
    }
    return obj;
  },

  create(base?: DeepPartial<AnotherMessageNameWithUnderscore>): AnotherMessageNameWithUnderscore {
    return AnotherMessageNameWithUnderscore.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AnotherMessageNameWithUnderscore>): AnotherMessageNameWithUnderscore {
    const message = createBaseAnotherMessageNameWithUnderscore();
    message.v = object.v ?? "";
    return message;
  },
};

function createBaseMessageNameWithTwoUnderscore(): MessageNameWithTwoUnderscore {
  return { v: "" };
}

export const MessageNameWithTwoUnderscore: MessageFns<MessageNameWithTwoUnderscore> = {
  encode(message: MessageNameWithTwoUnderscore, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.v !== "") {
      writer.uint32(10).string(message.v);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MessageNameWithTwoUnderscore {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMessageNameWithTwoUnderscore();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.v = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MessageNameWithTwoUnderscore {
    return { v: isSet(object.v) ? globalThis.String(object.v) : "" };
  },

  toJSON(message: MessageNameWithTwoUnderscore): unknown {
    const obj: any = {};
    if (message.v !== "") {
      obj.v = message.v;
    }
    return obj;
  },

  create(base?: DeepPartial<MessageNameWithTwoUnderscore>): MessageNameWithTwoUnderscore {
    return MessageNameWithTwoUnderscore.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MessageNameWithTwoUnderscore>): MessageNameWithTwoUnderscore {
    const message = createBaseMessageNameWithTwoUnderscore();
    message.v = object.v ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
