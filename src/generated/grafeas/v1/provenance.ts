// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: grafeas/v1/provenance.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Timestamp } from "../../google/protobuf/timestamp.js";

export const protobufPackage = "grafeas.v1";

/**
 * Provenance of a build. Contains all information needed to verify the full
 * details about the build from source to completion.
 */
export interface BuildProvenance {
  /** Required. Unique identifier of the build. */
  id: string;
  /** ID of the project. */
  projectId: string;
  /** Commands requested by the build. */
  commands: Command[];
  /** Output of the build. */
  builtArtifacts: Artifact[];
  /** Time at which the build was created. */
  createTime:
    | Date
    | undefined;
  /** Time at which execution of the build was started. */
  startTime:
    | Date
    | undefined;
  /** Time at which execution of the build was finished. */
  endTime:
    | Date
    | undefined;
  /**
   * E-mail address of the user who initiated this build. Note that this was the
   * user's e-mail address at the time the build was initiated; this address may
   * not represent the same end-user for all time.
   */
  creator: string;
  /** URI where any logs for this provenance were written. */
  logsUri: string;
  /** Details of the Source input to the build. */
  sourceProvenance:
    | Source
    | undefined;
  /** Trigger identifier if the build was triggered automatically; empty if not. */
  triggerId: string;
  /**
   * Special options applied to this build. This is a catch-all field where
   * build providers can enter any desired additional details.
   */
  buildOptions: { [key: string]: string };
  /** Version string of the builder at the time this build was executed. */
  builderVersion: string;
}

export interface BuildProvenance_BuildOptionsEntry {
  key: string;
  value: string;
}

/** Source describes the location of the source used for the build. */
export interface Source {
  /**
   * If provided, the input binary artifacts for the build came from this
   * location.
   */
  artifactStorageSourceUri: string;
  /**
   * Hash(es) of the build source, which can be used to verify that the original
   * source integrity was maintained in the build.
   *
   * The keys to this map are file paths used as build source and the values
   * contain the hash values for those files.
   *
   * If the build source came in a single package such as a gzipped tarfile
   * (.tar.gz), the FileHash will be for the single path to that file.
   */
  fileHashes: { [key: string]: FileHashes };
  /** If provided, the source code used for the build came from this location. */
  context:
    | SourceContext
    | undefined;
  /**
   * If provided, some of the source code used for the build may be found in
   * these locations, in the case where the source repository had multiple
   * remotes or submodules. This list will not include the context specified in
   * the context field.
   */
  additionalContexts: SourceContext[];
}

export interface Source_FileHashesEntry {
  key: string;
  value: FileHashes | undefined;
}

/**
 * Container message for hashes of byte content of files, used in source
 * messages to verify integrity of source input to the build.
 */
export interface FileHashes {
  /** Required. Collection of file hashes. */
  fileHash: Hash[];
}

/** Container message for hash values. */
export interface Hash {
  /** Required. The type of hash that was performed, e.g. "SHA-256". */
  type: string;
  /** Required. The hash value. */
  value: Buffer;
}

/** Command describes a step performed as part of the build pipeline. */
export interface Command {
  /**
   * Required. Name of the command, as presented on the command line, or if the
   * command is packaged as a Docker container, as presented to `docker pull`.
   */
  name: string;
  /** Environment variables set before running this command. */
  env: string[];
  /** Command-line arguments used when executing this command. */
  args: string[];
  /**
   * Working directory (relative to project source root) used when running this
   * command.
   */
  dir: string;
  /**
   * Optional unique identifier for this command, used in wait_for to reference
   * this command as a dependency.
   */
  id: string;
  /** The ID(s) of the command(s) that this command depends on. */
  waitFor: string[];
}

/** Artifact describes a build product. */
export interface Artifact {
  /**
   * Hash or checksum value of a binary, or Docker Registry 2.0 digest of a
   * container.
   */
  checksum: string;
  /**
   * Artifact ID, if any; for container images, this will be a URL by digest
   * like `gcr.io/projectID/imagename@sha256:123456`.
   */
  id: string;
  /**
   * Related artifact names. This may be the path to a binary or jar file, or in
   * the case of a container build, the name used to push the container image to
   * Google Container Registry, as presented to `docker push`. Note that a
   * single Artifact ID can have multiple names, for example if two tags are
   * applied to one image.
   */
  names: string[];
}

/**
 * A SourceContext is a reference to a tree of files. A SourceContext together
 * with a path point to a unique revision of a single file or directory.
 */
export interface SourceContext {
  /** A SourceContext referring to a revision in a Google Cloud Source Repo. */
  cloudRepo?:
    | CloudRepoSourceContext
    | undefined;
  /** A SourceContext referring to a Gerrit project. */
  gerrit?:
    | GerritSourceContext
    | undefined;
  /** A SourceContext referring to any third party Git repo (e.g., GitHub). */
  git?:
    | GitSourceContext
    | undefined;
  /** Labels with user defined metadata. */
  labels: { [key: string]: string };
}

export interface SourceContext_LabelsEntry {
  key: string;
  value: string;
}

/** An alias to a repo revision. */
export interface AliasContext {
  /** The alias kind. */
  kind: AliasContext_Kind;
  /** The alias name. */
  name: string;
}

/** The type of an alias. */
export enum AliasContext_Kind {
  /** KIND_UNSPECIFIED - Unknown. */
  KIND_UNSPECIFIED = 0,
  /** FIXED - Git tag. */
  FIXED = 1,
  /** MOVABLE - Git branch. */
  MOVABLE = 2,
  /**
   * OTHER - Used to specify non-standard aliases. For example, if a Git repo has a
   * ref named "refs/foo/bar".
   */
  OTHER = 4,
  UNRECOGNIZED = -1,
}

export function aliasContext_KindFromJSON(object: any): AliasContext_Kind {
  switch (object) {
    case 0:
    case "KIND_UNSPECIFIED":
      return AliasContext_Kind.KIND_UNSPECIFIED;
    case 1:
    case "FIXED":
      return AliasContext_Kind.FIXED;
    case 2:
    case "MOVABLE":
      return AliasContext_Kind.MOVABLE;
    case 4:
    case "OTHER":
      return AliasContext_Kind.OTHER;
    case -1:
    case "UNRECOGNIZED":
    default:
      return AliasContext_Kind.UNRECOGNIZED;
  }
}

export function aliasContext_KindToJSON(object: AliasContext_Kind): string {
  switch (object) {
    case AliasContext_Kind.KIND_UNSPECIFIED:
      return "KIND_UNSPECIFIED";
    case AliasContext_Kind.FIXED:
      return "FIXED";
    case AliasContext_Kind.MOVABLE:
      return "MOVABLE";
    case AliasContext_Kind.OTHER:
      return "OTHER";
    case AliasContext_Kind.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/**
 * A CloudRepoSourceContext denotes a particular revision in a Google Cloud
 * Source Repo.
 */
export interface CloudRepoSourceContext {
  /** The ID of the repo. */
  repoId:
    | RepoId
    | undefined;
  /** A revision ID. */
  revisionId?:
    | string
    | undefined;
  /** An alias, which may be a branch or tag. */
  aliasContext?: AliasContext | undefined;
}

/** A SourceContext referring to a Gerrit project. */
export interface GerritSourceContext {
  /** The URI of a running Gerrit instance. */
  hostUri: string;
  /**
   * The full project name within the host. Projects may be nested, so
   * "project/subproject" is a valid project name. The "repo name" is the
   * hostURI/project.
   */
  gerritProject: string;
  /** A revision (commit) ID. */
  revisionId?:
    | string
    | undefined;
  /** An alias, which may be a branch or tag. */
  aliasContext?: AliasContext | undefined;
}

/**
 * A GitSourceContext denotes a particular revision in a third party Git
 * repository (e.g., GitHub).
 */
export interface GitSourceContext {
  /** Git repository URL. */
  url: string;
  /** Git commit hash. */
  revisionId: string;
}

/** A unique identifier for a Cloud Repo. */
export interface RepoId {
  /** A combination of a project ID and a repo name. */
  projectRepoId?:
    | ProjectRepoId
    | undefined;
  /** A server-assigned, globally unique identifier. */
  uid?: string | undefined;
}

/**
 * Selects a repo using a Google Cloud Platform project ID (e.g.,
 * winged-cargo-31) and a repo name within that project.
 */
export interface ProjectRepoId {
  /** The ID of the project. */
  projectId: string;
  /** The name of the repo. Leave empty for the default repo. */
  repoName: string;
}

function createBaseBuildProvenance(): BuildProvenance {
  return {
    id: "",
    projectId: "",
    commands: [],
    builtArtifacts: [],
    createTime: undefined,
    startTime: undefined,
    endTime: undefined,
    creator: "",
    logsUri: "",
    sourceProvenance: undefined,
    triggerId: "",
    buildOptions: {},
    builderVersion: "",
  };
}

export const BuildProvenance: MessageFns<BuildProvenance> = {
  encode(message: BuildProvenance, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.projectId !== "") {
      writer.uint32(18).string(message.projectId);
    }
    for (const v of message.commands) {
      Command.encode(v!, writer.uint32(26).fork()).join();
    }
    for (const v of message.builtArtifacts) {
      Artifact.encode(v!, writer.uint32(34).fork()).join();
    }
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(42).fork()).join();
    }
    if (message.startTime !== undefined) {
      Timestamp.encode(toTimestamp(message.startTime), writer.uint32(50).fork()).join();
    }
    if (message.endTime !== undefined) {
      Timestamp.encode(toTimestamp(message.endTime), writer.uint32(58).fork()).join();
    }
    if (message.creator !== "") {
      writer.uint32(66).string(message.creator);
    }
    if (message.logsUri !== "") {
      writer.uint32(74).string(message.logsUri);
    }
    if (message.sourceProvenance !== undefined) {
      Source.encode(message.sourceProvenance, writer.uint32(82).fork()).join();
    }
    if (message.triggerId !== "") {
      writer.uint32(90).string(message.triggerId);
    }
    Object.entries(message.buildOptions).forEach(([key, value]) => {
      BuildProvenance_BuildOptionsEntry.encode({ key: key as any, value }, writer.uint32(98).fork()).join();
    });
    if (message.builderVersion !== "") {
      writer.uint32(106).string(message.builderVersion);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BuildProvenance {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBuildProvenance();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.projectId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.commands.push(Command.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.builtArtifacts.push(Artifact.decode(reader, reader.uint32()));
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.startTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.endTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.creator = reader.string();
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.logsUri = reader.string();
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.sourceProvenance = Source.decode(reader, reader.uint32());
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.triggerId = reader.string();
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }

          const entry12 = BuildProvenance_BuildOptionsEntry.decode(reader, reader.uint32());
          if (entry12.value !== undefined) {
            message.buildOptions[entry12.key] = entry12.value;
          }
          continue;
        case 13:
          if (tag !== 106) {
            break;
          }

          message.builderVersion = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BuildProvenance {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      projectId: isSet(object.projectId) ? globalThis.String(object.projectId) : "",
      commands: globalThis.Array.isArray(object?.commands) ? object.commands.map((e: any) => Command.fromJSON(e)) : [],
      builtArtifacts: globalThis.Array.isArray(object?.builtArtifacts)
        ? object.builtArtifacts.map((e: any) => Artifact.fromJSON(e))
        : [],
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      startTime: isSet(object.startTime) ? fromJsonTimestamp(object.startTime) : undefined,
      endTime: isSet(object.endTime) ? fromJsonTimestamp(object.endTime) : undefined,
      creator: isSet(object.creator) ? globalThis.String(object.creator) : "",
      logsUri: isSet(object.logsUri) ? globalThis.String(object.logsUri) : "",
      sourceProvenance: isSet(object.sourceProvenance) ? Source.fromJSON(object.sourceProvenance) : undefined,
      triggerId: isSet(object.triggerId) ? globalThis.String(object.triggerId) : "",
      buildOptions: isObject(object.buildOptions)
        ? Object.entries(object.buildOptions).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
      builderVersion: isSet(object.builderVersion) ? globalThis.String(object.builderVersion) : "",
    };
  },

  toJSON(message: BuildProvenance): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.projectId !== "") {
      obj.projectId = message.projectId;
    }
    if (message.commands?.length) {
      obj.commands = message.commands.map((e) => Command.toJSON(e));
    }
    if (message.builtArtifacts?.length) {
      obj.builtArtifacts = message.builtArtifacts.map((e) => Artifact.toJSON(e));
    }
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.startTime !== undefined) {
      obj.startTime = message.startTime.toISOString();
    }
    if (message.endTime !== undefined) {
      obj.endTime = message.endTime.toISOString();
    }
    if (message.creator !== "") {
      obj.creator = message.creator;
    }
    if (message.logsUri !== "") {
      obj.logsUri = message.logsUri;
    }
    if (message.sourceProvenance !== undefined) {
      obj.sourceProvenance = Source.toJSON(message.sourceProvenance);
    }
    if (message.triggerId !== "") {
      obj.triggerId = message.triggerId;
    }
    if (message.buildOptions) {
      const entries = Object.entries(message.buildOptions);
      if (entries.length > 0) {
        obj.buildOptions = {};
        entries.forEach(([k, v]) => {
          obj.buildOptions[k] = v;
        });
      }
    }
    if (message.builderVersion !== "") {
      obj.builderVersion = message.builderVersion;
    }
    return obj;
  },

  create(base?: DeepPartial<BuildProvenance>): BuildProvenance {
    return BuildProvenance.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<BuildProvenance>): BuildProvenance {
    const message = createBaseBuildProvenance();
    message.id = object.id ?? "";
    message.projectId = object.projectId ?? "";
    message.commands = object.commands?.map((e) => Command.fromPartial(e)) || [];
    message.builtArtifacts = object.builtArtifacts?.map((e) => Artifact.fromPartial(e)) || [];
    message.createTime = object.createTime ?? undefined;
    message.startTime = object.startTime ?? undefined;
    message.endTime = object.endTime ?? undefined;
    message.creator = object.creator ?? "";
    message.logsUri = object.logsUri ?? "";
    message.sourceProvenance = (object.sourceProvenance !== undefined && object.sourceProvenance !== null)
      ? Source.fromPartial(object.sourceProvenance)
      : undefined;
    message.triggerId = object.triggerId ?? "";
    message.buildOptions = Object.entries(object.buildOptions ?? {}).reduce<{ [key: string]: string }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = globalThis.String(value);
        }
        return acc;
      },
      {},
    );
    message.builderVersion = object.builderVersion ?? "";
    return message;
  },
};

function createBaseBuildProvenance_BuildOptionsEntry(): BuildProvenance_BuildOptionsEntry {
  return { key: "", value: "" };
}

export const BuildProvenance_BuildOptionsEntry: MessageFns<BuildProvenance_BuildOptionsEntry> = {
  encode(message: BuildProvenance_BuildOptionsEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BuildProvenance_BuildOptionsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBuildProvenance_BuildOptionsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BuildProvenance_BuildOptionsEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: BuildProvenance_BuildOptionsEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create(base?: DeepPartial<BuildProvenance_BuildOptionsEntry>): BuildProvenance_BuildOptionsEntry {
    return BuildProvenance_BuildOptionsEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<BuildProvenance_BuildOptionsEntry>): BuildProvenance_BuildOptionsEntry {
    const message = createBaseBuildProvenance_BuildOptionsEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseSource(): Source {
  return { artifactStorageSourceUri: "", fileHashes: {}, context: undefined, additionalContexts: [] };
}

export const Source: MessageFns<Source> = {
  encode(message: Source, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.artifactStorageSourceUri !== "") {
      writer.uint32(10).string(message.artifactStorageSourceUri);
    }
    Object.entries(message.fileHashes).forEach(([key, value]) => {
      Source_FileHashesEntry.encode({ key: key as any, value }, writer.uint32(18).fork()).join();
    });
    if (message.context !== undefined) {
      SourceContext.encode(message.context, writer.uint32(26).fork()).join();
    }
    for (const v of message.additionalContexts) {
      SourceContext.encode(v!, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Source {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSource();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.artifactStorageSourceUri = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          const entry2 = Source_FileHashesEntry.decode(reader, reader.uint32());
          if (entry2.value !== undefined) {
            message.fileHashes[entry2.key] = entry2.value;
          }
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.context = SourceContext.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.additionalContexts.push(SourceContext.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Source {
    return {
      artifactStorageSourceUri: isSet(object.artifactStorageSourceUri)
        ? globalThis.String(object.artifactStorageSourceUri)
        : "",
      fileHashes: isObject(object.fileHashes)
        ? Object.entries(object.fileHashes).reduce<{ [key: string]: FileHashes }>((acc, [key, value]) => {
          acc[key] = FileHashes.fromJSON(value);
          return acc;
        }, {})
        : {},
      context: isSet(object.context) ? SourceContext.fromJSON(object.context) : undefined,
      additionalContexts: globalThis.Array.isArray(object?.additionalContexts)
        ? object.additionalContexts.map((e: any) => SourceContext.fromJSON(e))
        : [],
    };
  },

  toJSON(message: Source): unknown {
    const obj: any = {};
    if (message.artifactStorageSourceUri !== "") {
      obj.artifactStorageSourceUri = message.artifactStorageSourceUri;
    }
    if (message.fileHashes) {
      const entries = Object.entries(message.fileHashes);
      if (entries.length > 0) {
        obj.fileHashes = {};
        entries.forEach(([k, v]) => {
          obj.fileHashes[k] = FileHashes.toJSON(v);
        });
      }
    }
    if (message.context !== undefined) {
      obj.context = SourceContext.toJSON(message.context);
    }
    if (message.additionalContexts?.length) {
      obj.additionalContexts = message.additionalContexts.map((e) => SourceContext.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<Source>): Source {
    return Source.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Source>): Source {
    const message = createBaseSource();
    message.artifactStorageSourceUri = object.artifactStorageSourceUri ?? "";
    message.fileHashes = Object.entries(object.fileHashes ?? {}).reduce<{ [key: string]: FileHashes }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = FileHashes.fromPartial(value);
        }
        return acc;
      },
      {},
    );
    message.context = (object.context !== undefined && object.context !== null)
      ? SourceContext.fromPartial(object.context)
      : undefined;
    message.additionalContexts = object.additionalContexts?.map((e) => SourceContext.fromPartial(e)) || [];
    return message;
  },
};

function createBaseSource_FileHashesEntry(): Source_FileHashesEntry {
  return { key: "", value: undefined };
}

export const Source_FileHashesEntry: MessageFns<Source_FileHashesEntry> = {
  encode(message: Source_FileHashesEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== undefined) {
      FileHashes.encode(message.value, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Source_FileHashesEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSource_FileHashesEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = FileHashes.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Source_FileHashesEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? FileHashes.fromJSON(object.value) : undefined,
    };
  },

  toJSON(message: Source_FileHashesEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== undefined) {
      obj.value = FileHashes.toJSON(message.value);
    }
    return obj;
  },

  create(base?: DeepPartial<Source_FileHashesEntry>): Source_FileHashesEntry {
    return Source_FileHashesEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Source_FileHashesEntry>): Source_FileHashesEntry {
    const message = createBaseSource_FileHashesEntry();
    message.key = object.key ?? "";
    message.value = (object.value !== undefined && object.value !== null)
      ? FileHashes.fromPartial(object.value)
      : undefined;
    return message;
  },
};

function createBaseFileHashes(): FileHashes {
  return { fileHash: [] };
}

export const FileHashes: MessageFns<FileHashes> = {
  encode(message: FileHashes, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.fileHash) {
      Hash.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FileHashes {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFileHashes();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.fileHash.push(Hash.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FileHashes {
    return {
      fileHash: globalThis.Array.isArray(object?.fileHash) ? object.fileHash.map((e: any) => Hash.fromJSON(e)) : [],
    };
  },

  toJSON(message: FileHashes): unknown {
    const obj: any = {};
    if (message.fileHash?.length) {
      obj.fileHash = message.fileHash.map((e) => Hash.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<FileHashes>): FileHashes {
    return FileHashes.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<FileHashes>): FileHashes {
    const message = createBaseFileHashes();
    message.fileHash = object.fileHash?.map((e) => Hash.fromPartial(e)) || [];
    return message;
  },
};

function createBaseHash(): Hash {
  return { type: "", value: Buffer.alloc(0) };
}

export const Hash: MessageFns<Hash> = {
  encode(message: Hash, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.type !== "") {
      writer.uint32(10).string(message.type);
    }
    if (message.value.length !== 0) {
      writer.uint32(18).bytes(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Hash {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHash();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.type = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = Buffer.from(reader.bytes());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Hash {
    return {
      type: isSet(object.type) ? globalThis.String(object.type) : "",
      value: isSet(object.value) ? Buffer.from(bytesFromBase64(object.value)) : Buffer.alloc(0),
    };
  },

  toJSON(message: Hash): unknown {
    const obj: any = {};
    if (message.type !== "") {
      obj.type = message.type;
    }
    if (message.value.length !== 0) {
      obj.value = base64FromBytes(message.value);
    }
    return obj;
  },

  create(base?: DeepPartial<Hash>): Hash {
    return Hash.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Hash>): Hash {
    const message = createBaseHash();
    message.type = object.type ?? "";
    message.value = object.value ?? Buffer.alloc(0);
    return message;
  },
};

function createBaseCommand(): Command {
  return { name: "", env: [], args: [], dir: "", id: "", waitFor: [] };
}

export const Command: MessageFns<Command> = {
  encode(message: Command, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    for (const v of message.env) {
      writer.uint32(18).string(v!);
    }
    for (const v of message.args) {
      writer.uint32(26).string(v!);
    }
    if (message.dir !== "") {
      writer.uint32(34).string(message.dir);
    }
    if (message.id !== "") {
      writer.uint32(42).string(message.id);
    }
    for (const v of message.waitFor) {
      writer.uint32(50).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Command {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCommand();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.env.push(reader.string());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.args.push(reader.string());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.dir = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.id = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.waitFor.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Command {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      env: globalThis.Array.isArray(object?.env) ? object.env.map((e: any) => globalThis.String(e)) : [],
      args: globalThis.Array.isArray(object?.args) ? object.args.map((e: any) => globalThis.String(e)) : [],
      dir: isSet(object.dir) ? globalThis.String(object.dir) : "",
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      waitFor: globalThis.Array.isArray(object?.waitFor) ? object.waitFor.map((e: any) => globalThis.String(e)) : [],
    };
  },

  toJSON(message: Command): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.env?.length) {
      obj.env = message.env;
    }
    if (message.args?.length) {
      obj.args = message.args;
    }
    if (message.dir !== "") {
      obj.dir = message.dir;
    }
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.waitFor?.length) {
      obj.waitFor = message.waitFor;
    }
    return obj;
  },

  create(base?: DeepPartial<Command>): Command {
    return Command.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Command>): Command {
    const message = createBaseCommand();
    message.name = object.name ?? "";
    message.env = object.env?.map((e) => e) || [];
    message.args = object.args?.map((e) => e) || [];
    message.dir = object.dir ?? "";
    message.id = object.id ?? "";
    message.waitFor = object.waitFor?.map((e) => e) || [];
    return message;
  },
};

function createBaseArtifact(): Artifact {
  return { checksum: "", id: "", names: [] };
}

export const Artifact: MessageFns<Artifact> = {
  encode(message: Artifact, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.checksum !== "") {
      writer.uint32(10).string(message.checksum);
    }
    if (message.id !== "") {
      writer.uint32(18).string(message.id);
    }
    for (const v of message.names) {
      writer.uint32(26).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Artifact {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseArtifact();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.checksum = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.id = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.names.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Artifact {
    return {
      checksum: isSet(object.checksum) ? globalThis.String(object.checksum) : "",
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      names: globalThis.Array.isArray(object?.names) ? object.names.map((e: any) => globalThis.String(e)) : [],
    };
  },

  toJSON(message: Artifact): unknown {
    const obj: any = {};
    if (message.checksum !== "") {
      obj.checksum = message.checksum;
    }
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.names?.length) {
      obj.names = message.names;
    }
    return obj;
  },

  create(base?: DeepPartial<Artifact>): Artifact {
    return Artifact.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Artifact>): Artifact {
    const message = createBaseArtifact();
    message.checksum = object.checksum ?? "";
    message.id = object.id ?? "";
    message.names = object.names?.map((e) => e) || [];
    return message;
  },
};

function createBaseSourceContext(): SourceContext {
  return { cloudRepo: undefined, gerrit: undefined, git: undefined, labels: {} };
}

export const SourceContext: MessageFns<SourceContext> = {
  encode(message: SourceContext, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.cloudRepo !== undefined) {
      CloudRepoSourceContext.encode(message.cloudRepo, writer.uint32(10).fork()).join();
    }
    if (message.gerrit !== undefined) {
      GerritSourceContext.encode(message.gerrit, writer.uint32(18).fork()).join();
    }
    if (message.git !== undefined) {
      GitSourceContext.encode(message.git, writer.uint32(26).fork()).join();
    }
    Object.entries(message.labels).forEach(([key, value]) => {
      SourceContext_LabelsEntry.encode({ key: key as any, value }, writer.uint32(34).fork()).join();
    });
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SourceContext {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSourceContext();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.cloudRepo = CloudRepoSourceContext.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.gerrit = GerritSourceContext.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.git = GitSourceContext.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          const entry4 = SourceContext_LabelsEntry.decode(reader, reader.uint32());
          if (entry4.value !== undefined) {
            message.labels[entry4.key] = entry4.value;
          }
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SourceContext {
    return {
      cloudRepo: isSet(object.cloudRepo) ? CloudRepoSourceContext.fromJSON(object.cloudRepo) : undefined,
      gerrit: isSet(object.gerrit) ? GerritSourceContext.fromJSON(object.gerrit) : undefined,
      git: isSet(object.git) ? GitSourceContext.fromJSON(object.git) : undefined,
      labels: isObject(object.labels)
        ? Object.entries(object.labels).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
    };
  },

  toJSON(message: SourceContext): unknown {
    const obj: any = {};
    if (message.cloudRepo !== undefined) {
      obj.cloudRepo = CloudRepoSourceContext.toJSON(message.cloudRepo);
    }
    if (message.gerrit !== undefined) {
      obj.gerrit = GerritSourceContext.toJSON(message.gerrit);
    }
    if (message.git !== undefined) {
      obj.git = GitSourceContext.toJSON(message.git);
    }
    if (message.labels) {
      const entries = Object.entries(message.labels);
      if (entries.length > 0) {
        obj.labels = {};
        entries.forEach(([k, v]) => {
          obj.labels[k] = v;
        });
      }
    }
    return obj;
  },

  create(base?: DeepPartial<SourceContext>): SourceContext {
    return SourceContext.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SourceContext>): SourceContext {
    const message = createBaseSourceContext();
    message.cloudRepo = (object.cloudRepo !== undefined && object.cloudRepo !== null)
      ? CloudRepoSourceContext.fromPartial(object.cloudRepo)
      : undefined;
    message.gerrit = (object.gerrit !== undefined && object.gerrit !== null)
      ? GerritSourceContext.fromPartial(object.gerrit)
      : undefined;
    message.git = (object.git !== undefined && object.git !== null)
      ? GitSourceContext.fromPartial(object.git)
      : undefined;
    message.labels = Object.entries(object.labels ?? {}).reduce<{ [key: string]: string }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = globalThis.String(value);
      }
      return acc;
    }, {});
    return message;
  },
};

function createBaseSourceContext_LabelsEntry(): SourceContext_LabelsEntry {
  return { key: "", value: "" };
}

export const SourceContext_LabelsEntry: MessageFns<SourceContext_LabelsEntry> = {
  encode(message: SourceContext_LabelsEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SourceContext_LabelsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSourceContext_LabelsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SourceContext_LabelsEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: SourceContext_LabelsEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create(base?: DeepPartial<SourceContext_LabelsEntry>): SourceContext_LabelsEntry {
    return SourceContext_LabelsEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SourceContext_LabelsEntry>): SourceContext_LabelsEntry {
    const message = createBaseSourceContext_LabelsEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseAliasContext(): AliasContext {
  return { kind: 0, name: "" };
}

export const AliasContext: MessageFns<AliasContext> = {
  encode(message: AliasContext, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.kind !== 0) {
      writer.uint32(8).int32(message.kind);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AliasContext {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAliasContext();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.kind = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AliasContext {
    return {
      kind: isSet(object.kind) ? aliasContext_KindFromJSON(object.kind) : 0,
      name: isSet(object.name) ? globalThis.String(object.name) : "",
    };
  },

  toJSON(message: AliasContext): unknown {
    const obj: any = {};
    if (message.kind !== 0) {
      obj.kind = aliasContext_KindToJSON(message.kind);
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<AliasContext>): AliasContext {
    return AliasContext.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AliasContext>): AliasContext {
    const message = createBaseAliasContext();
    message.kind = object.kind ?? 0;
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseCloudRepoSourceContext(): CloudRepoSourceContext {
  return { repoId: undefined, revisionId: undefined, aliasContext: undefined };
}

export const CloudRepoSourceContext: MessageFns<CloudRepoSourceContext> = {
  encode(message: CloudRepoSourceContext, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.repoId !== undefined) {
      RepoId.encode(message.repoId, writer.uint32(10).fork()).join();
    }
    if (message.revisionId !== undefined) {
      writer.uint32(18).string(message.revisionId);
    }
    if (message.aliasContext !== undefined) {
      AliasContext.encode(message.aliasContext, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CloudRepoSourceContext {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCloudRepoSourceContext();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.repoId = RepoId.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.revisionId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.aliasContext = AliasContext.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CloudRepoSourceContext {
    return {
      repoId: isSet(object.repoId) ? RepoId.fromJSON(object.repoId) : undefined,
      revisionId: isSet(object.revisionId) ? globalThis.String(object.revisionId) : undefined,
      aliasContext: isSet(object.aliasContext) ? AliasContext.fromJSON(object.aliasContext) : undefined,
    };
  },

  toJSON(message: CloudRepoSourceContext): unknown {
    const obj: any = {};
    if (message.repoId !== undefined) {
      obj.repoId = RepoId.toJSON(message.repoId);
    }
    if (message.revisionId !== undefined) {
      obj.revisionId = message.revisionId;
    }
    if (message.aliasContext !== undefined) {
      obj.aliasContext = AliasContext.toJSON(message.aliasContext);
    }
    return obj;
  },

  create(base?: DeepPartial<CloudRepoSourceContext>): CloudRepoSourceContext {
    return CloudRepoSourceContext.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CloudRepoSourceContext>): CloudRepoSourceContext {
    const message = createBaseCloudRepoSourceContext();
    message.repoId = (object.repoId !== undefined && object.repoId !== null)
      ? RepoId.fromPartial(object.repoId)
      : undefined;
    message.revisionId = object.revisionId ?? undefined;
    message.aliasContext = (object.aliasContext !== undefined && object.aliasContext !== null)
      ? AliasContext.fromPartial(object.aliasContext)
      : undefined;
    return message;
  },
};

function createBaseGerritSourceContext(): GerritSourceContext {
  return { hostUri: "", gerritProject: "", revisionId: undefined, aliasContext: undefined };
}

export const GerritSourceContext: MessageFns<GerritSourceContext> = {
  encode(message: GerritSourceContext, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.hostUri !== "") {
      writer.uint32(10).string(message.hostUri);
    }
    if (message.gerritProject !== "") {
      writer.uint32(18).string(message.gerritProject);
    }
    if (message.revisionId !== undefined) {
      writer.uint32(26).string(message.revisionId);
    }
    if (message.aliasContext !== undefined) {
      AliasContext.encode(message.aliasContext, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GerritSourceContext {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGerritSourceContext();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.hostUri = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.gerritProject = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.revisionId = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.aliasContext = AliasContext.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GerritSourceContext {
    return {
      hostUri: isSet(object.hostUri) ? globalThis.String(object.hostUri) : "",
      gerritProject: isSet(object.gerritProject) ? globalThis.String(object.gerritProject) : "",
      revisionId: isSet(object.revisionId) ? globalThis.String(object.revisionId) : undefined,
      aliasContext: isSet(object.aliasContext) ? AliasContext.fromJSON(object.aliasContext) : undefined,
    };
  },

  toJSON(message: GerritSourceContext): unknown {
    const obj: any = {};
    if (message.hostUri !== "") {
      obj.hostUri = message.hostUri;
    }
    if (message.gerritProject !== "") {
      obj.gerritProject = message.gerritProject;
    }
    if (message.revisionId !== undefined) {
      obj.revisionId = message.revisionId;
    }
    if (message.aliasContext !== undefined) {
      obj.aliasContext = AliasContext.toJSON(message.aliasContext);
    }
    return obj;
  },

  create(base?: DeepPartial<GerritSourceContext>): GerritSourceContext {
    return GerritSourceContext.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GerritSourceContext>): GerritSourceContext {
    const message = createBaseGerritSourceContext();
    message.hostUri = object.hostUri ?? "";
    message.gerritProject = object.gerritProject ?? "";
    message.revisionId = object.revisionId ?? undefined;
    message.aliasContext = (object.aliasContext !== undefined && object.aliasContext !== null)
      ? AliasContext.fromPartial(object.aliasContext)
      : undefined;
    return message;
  },
};

function createBaseGitSourceContext(): GitSourceContext {
  return { url: "", revisionId: "" };
}

export const GitSourceContext: MessageFns<GitSourceContext> = {
  encode(message: GitSourceContext, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.url !== "") {
      writer.uint32(10).string(message.url);
    }
    if (message.revisionId !== "") {
      writer.uint32(18).string(message.revisionId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GitSourceContext {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGitSourceContext();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.url = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.revisionId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GitSourceContext {
    return {
      url: isSet(object.url) ? globalThis.String(object.url) : "",
      revisionId: isSet(object.revisionId) ? globalThis.String(object.revisionId) : "",
    };
  },

  toJSON(message: GitSourceContext): unknown {
    const obj: any = {};
    if (message.url !== "") {
      obj.url = message.url;
    }
    if (message.revisionId !== "") {
      obj.revisionId = message.revisionId;
    }
    return obj;
  },

  create(base?: DeepPartial<GitSourceContext>): GitSourceContext {
    return GitSourceContext.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GitSourceContext>): GitSourceContext {
    const message = createBaseGitSourceContext();
    message.url = object.url ?? "";
    message.revisionId = object.revisionId ?? "";
    return message;
  },
};

function createBaseRepoId(): RepoId {
  return { projectRepoId: undefined, uid: undefined };
}

export const RepoId: MessageFns<RepoId> = {
  encode(message: RepoId, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.projectRepoId !== undefined) {
      ProjectRepoId.encode(message.projectRepoId, writer.uint32(10).fork()).join();
    }
    if (message.uid !== undefined) {
      writer.uint32(18).string(message.uid);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RepoId {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRepoId();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.projectRepoId = ProjectRepoId.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.uid = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RepoId {
    return {
      projectRepoId: isSet(object.projectRepoId) ? ProjectRepoId.fromJSON(object.projectRepoId) : undefined,
      uid: isSet(object.uid) ? globalThis.String(object.uid) : undefined,
    };
  },

  toJSON(message: RepoId): unknown {
    const obj: any = {};
    if (message.projectRepoId !== undefined) {
      obj.projectRepoId = ProjectRepoId.toJSON(message.projectRepoId);
    }
    if (message.uid !== undefined) {
      obj.uid = message.uid;
    }
    return obj;
  },

  create(base?: DeepPartial<RepoId>): RepoId {
    return RepoId.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RepoId>): RepoId {
    const message = createBaseRepoId();
    message.projectRepoId = (object.projectRepoId !== undefined && object.projectRepoId !== null)
      ? ProjectRepoId.fromPartial(object.projectRepoId)
      : undefined;
    message.uid = object.uid ?? undefined;
    return message;
  },
};

function createBaseProjectRepoId(): ProjectRepoId {
  return { projectId: "", repoName: "" };
}

export const ProjectRepoId: MessageFns<ProjectRepoId> = {
  encode(message: ProjectRepoId, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.projectId !== "") {
      writer.uint32(10).string(message.projectId);
    }
    if (message.repoName !== "") {
      writer.uint32(18).string(message.repoName);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ProjectRepoId {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProjectRepoId();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.projectId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.repoName = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ProjectRepoId {
    return {
      projectId: isSet(object.projectId) ? globalThis.String(object.projectId) : "",
      repoName: isSet(object.repoName) ? globalThis.String(object.repoName) : "",
    };
  },

  toJSON(message: ProjectRepoId): unknown {
    const obj: any = {};
    if (message.projectId !== "") {
      obj.projectId = message.projectId;
    }
    if (message.repoName !== "") {
      obj.repoName = message.repoName;
    }
    return obj;
  },

  create(base?: DeepPartial<ProjectRepoId>): ProjectRepoId {
    return ProjectRepoId.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ProjectRepoId>): ProjectRepoId {
    const message = createBaseProjectRepoId();
    message.projectId = object.projectId ?? "";
    message.repoName = object.repoName ?? "";
    return message;
  },
};

function bytesFromBase64(b64: string): Uint8Array {
  return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
}

function base64FromBytes(arr: Uint8Array): string {
  return globalThis.Buffer.from(arr).toString("base64");
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
