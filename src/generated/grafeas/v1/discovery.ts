// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: grafeas/v1/discovery.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Timestamp } from "../../google/protobuf/timestamp.js";
import { Status } from "../../google/rpc/status.js";
import { NoteKind, noteKindFromJSON, noteKindToJSON } from "./common.js";

export const protobufPackage = "grafeas.v1";

/**
 * A note that indicates a type of analysis a provider would perform. This note
 * exists in a provider's project. A `Discovery` occurrence is created in a
 * consumer's project at the start of analysis.
 */
export interface DiscoveryNote {
  /**
   * Required. Immutable. The kind of analysis that is handled by this
   * discovery.
   */
  analysisKind: NoteKind;
}

/** Provides information about the analysis status of a discovered resource. */
export interface DiscoveryOccurrence {
  /** Whether the resource is continuously analyzed. */
  continuousAnalysis: DiscoveryOccurrence_ContinuousAnalysis;
  /** The status of discovery for the resource. */
  analysisStatus: DiscoveryOccurrence_AnalysisStatus;
  analysisCompleted:
    | DiscoveryOccurrence_AnalysisCompleted
    | undefined;
  /**
   * Indicates any errors encountered during analysis of a resource. There
   * could be 0 or more of these errors.
   */
  analysisError: Status[];
  /**
   * When an error is encountered this will contain a LocalizedMessage under
   * details to show to the user. The LocalizedMessage is output only and
   * populated by the API.
   */
  analysisStatusError:
    | Status
    | undefined;
  /** The CPE of the resource being scanned. */
  cpe: string;
  /** The last time this resource was scanned. */
  lastScanTime:
    | Date
    | undefined;
  /** The time occurrences related to this discovery occurrence were archived. */
  archiveTime:
    | Date
    | undefined;
  /** The status of an SBOM generation. */
  sbomStatus:
    | DiscoveryOccurrence_SBOMStatus
    | undefined;
  /** The status of an vulnerability attestation generation. */
  vulnerabilityAttestation: DiscoveryOccurrence_VulnerabilityAttestation | undefined;
}

/** Whether the resource is continuously analyzed. */
export enum DiscoveryOccurrence_ContinuousAnalysis {
  /** CONTINUOUS_ANALYSIS_UNSPECIFIED - Unknown. */
  CONTINUOUS_ANALYSIS_UNSPECIFIED = 0,
  /** ACTIVE - The resource is continuously analyzed. */
  ACTIVE = 1,
  /** INACTIVE - The resource is ignored for continuous analysis. */
  INACTIVE = 2,
  UNRECOGNIZED = -1,
}

export function discoveryOccurrence_ContinuousAnalysisFromJSON(object: any): DiscoveryOccurrence_ContinuousAnalysis {
  switch (object) {
    case 0:
    case "CONTINUOUS_ANALYSIS_UNSPECIFIED":
      return DiscoveryOccurrence_ContinuousAnalysis.CONTINUOUS_ANALYSIS_UNSPECIFIED;
    case 1:
    case "ACTIVE":
      return DiscoveryOccurrence_ContinuousAnalysis.ACTIVE;
    case 2:
    case "INACTIVE":
      return DiscoveryOccurrence_ContinuousAnalysis.INACTIVE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return DiscoveryOccurrence_ContinuousAnalysis.UNRECOGNIZED;
  }
}

export function discoveryOccurrence_ContinuousAnalysisToJSON(object: DiscoveryOccurrence_ContinuousAnalysis): string {
  switch (object) {
    case DiscoveryOccurrence_ContinuousAnalysis.CONTINUOUS_ANALYSIS_UNSPECIFIED:
      return "CONTINUOUS_ANALYSIS_UNSPECIFIED";
    case DiscoveryOccurrence_ContinuousAnalysis.ACTIVE:
      return "ACTIVE";
    case DiscoveryOccurrence_ContinuousAnalysis.INACTIVE:
      return "INACTIVE";
    case DiscoveryOccurrence_ContinuousAnalysis.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/**
 * Analysis status for a resource. Currently for initial analysis only (not
 * updated in continuous analysis).
 */
export enum DiscoveryOccurrence_AnalysisStatus {
  /** ANALYSIS_STATUS_UNSPECIFIED - Unknown. */
  ANALYSIS_STATUS_UNSPECIFIED = 0,
  /** PENDING - Resource is known but no action has been taken yet. */
  PENDING = 1,
  /** SCANNING - Resource is being analyzed. */
  SCANNING = 2,
  /** FINISHED_SUCCESS - Analysis has finished successfully. */
  FINISHED_SUCCESS = 3,
  /** COMPLETE - Analysis has completed. */
  COMPLETE = 3,
  /**
   * FINISHED_FAILED - Analysis has finished unsuccessfully, the analysis itself is in a bad
   * state.
   */
  FINISHED_FAILED = 4,
  /** FINISHED_UNSUPPORTED - The resource is known not to be supported. */
  FINISHED_UNSUPPORTED = 5,
  UNRECOGNIZED = -1,
}

export function discoveryOccurrence_AnalysisStatusFromJSON(object: any): DiscoveryOccurrence_AnalysisStatus {
  switch (object) {
    case 0:
    case "ANALYSIS_STATUS_UNSPECIFIED":
      return DiscoveryOccurrence_AnalysisStatus.ANALYSIS_STATUS_UNSPECIFIED;
    case 1:
    case "PENDING":
      return DiscoveryOccurrence_AnalysisStatus.PENDING;
    case 2:
    case "SCANNING":
      return DiscoveryOccurrence_AnalysisStatus.SCANNING;
    case 3:
    case "FINISHED_SUCCESS":
      return DiscoveryOccurrence_AnalysisStatus.FINISHED_SUCCESS;
    case 3:
    case "COMPLETE":
      return DiscoveryOccurrence_AnalysisStatus.COMPLETE;
    case 4:
    case "FINISHED_FAILED":
      return DiscoveryOccurrence_AnalysisStatus.FINISHED_FAILED;
    case 5:
    case "FINISHED_UNSUPPORTED":
      return DiscoveryOccurrence_AnalysisStatus.FINISHED_UNSUPPORTED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return DiscoveryOccurrence_AnalysisStatus.UNRECOGNIZED;
  }
}

export function discoveryOccurrence_AnalysisStatusToJSON(object: DiscoveryOccurrence_AnalysisStatus): string {
  switch (object) {
    case DiscoveryOccurrence_AnalysisStatus.ANALYSIS_STATUS_UNSPECIFIED:
      return "ANALYSIS_STATUS_UNSPECIFIED";
    case DiscoveryOccurrence_AnalysisStatus.PENDING:
      return "PENDING";
    case DiscoveryOccurrence_AnalysisStatus.SCANNING:
      return "SCANNING";
    case DiscoveryOccurrence_AnalysisStatus.FINISHED_SUCCESS:
      return "FINISHED_SUCCESS";
    case DiscoveryOccurrence_AnalysisStatus.COMPLETE:
      return "COMPLETE";
    case DiscoveryOccurrence_AnalysisStatus.FINISHED_FAILED:
      return "FINISHED_FAILED";
    case DiscoveryOccurrence_AnalysisStatus.FINISHED_UNSUPPORTED:
      return "FINISHED_UNSUPPORTED";
    case DiscoveryOccurrence_AnalysisStatus.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/**
 * Indicates which analysis completed successfully. Multiple types of
 * analysis can be performed on a single resource.
 */
export interface DiscoveryOccurrence_AnalysisCompleted {
  analysisType: string[];
}

/** The status of an SBOM generation. */
export interface DiscoveryOccurrence_SBOMStatus {
  /** The progress of the SBOM generation. */
  sbomState: DiscoveryOccurrence_SBOMStatus_SBOMState;
  /**
   * If there was an error generating an SBOM, this will indicate what that
   * error was.
   */
  error: string;
}

/** An enum indicating the progress of the SBOM generation. */
export enum DiscoveryOccurrence_SBOMStatus_SBOMState {
  /** SBOM_STATE_UNSPECIFIED - Default unknown state. */
  SBOM_STATE_UNSPECIFIED = 0,
  /** PENDING - SBOM scanning is pending. */
  PENDING = 1,
  /** COMPLETE - SBOM scanning has completed. */
  COMPLETE = 2,
  UNRECOGNIZED = -1,
}

export function discoveryOccurrence_SBOMStatus_SBOMStateFromJSON(
  object: any,
): DiscoveryOccurrence_SBOMStatus_SBOMState {
  switch (object) {
    case 0:
    case "SBOM_STATE_UNSPECIFIED":
      return DiscoveryOccurrence_SBOMStatus_SBOMState.SBOM_STATE_UNSPECIFIED;
    case 1:
    case "PENDING":
      return DiscoveryOccurrence_SBOMStatus_SBOMState.PENDING;
    case 2:
    case "COMPLETE":
      return DiscoveryOccurrence_SBOMStatus_SBOMState.COMPLETE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return DiscoveryOccurrence_SBOMStatus_SBOMState.UNRECOGNIZED;
  }
}

export function discoveryOccurrence_SBOMStatus_SBOMStateToJSON(
  object: DiscoveryOccurrence_SBOMStatus_SBOMState,
): string {
  switch (object) {
    case DiscoveryOccurrence_SBOMStatus_SBOMState.SBOM_STATE_UNSPECIFIED:
      return "SBOM_STATE_UNSPECIFIED";
    case DiscoveryOccurrence_SBOMStatus_SBOMState.PENDING:
      return "PENDING";
    case DiscoveryOccurrence_SBOMStatus_SBOMState.COMPLETE:
      return "COMPLETE";
    case DiscoveryOccurrence_SBOMStatus_SBOMState.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** The status of an vulnerability attestation generation. */
export interface DiscoveryOccurrence_VulnerabilityAttestation {
  /** The last time we attempted to generate an attestation. */
  lastAttemptTime:
    | Date
    | undefined;
  /** The success/failure state of the latest attestation attempt. */
  state: DiscoveryOccurrence_VulnerabilityAttestation_VulnerabilityAttestationState;
  /** If failure, the error reason for why the attestation generation failed. */
  error: string;
}

/** An enum indicating the state of the attestation generation. */
export enum DiscoveryOccurrence_VulnerabilityAttestation_VulnerabilityAttestationState {
  /** VULNERABILITY_ATTESTATION_STATE_UNSPECIFIED - Default unknown state. */
  VULNERABILITY_ATTESTATION_STATE_UNSPECIFIED = 0,
  /** SUCCESS - Attestation was successfully generated and stored. */
  SUCCESS = 1,
  /** FAILURE - Attestation was unsuccessfully generated and stored. */
  FAILURE = 2,
  UNRECOGNIZED = -1,
}

export function discoveryOccurrence_VulnerabilityAttestation_VulnerabilityAttestationStateFromJSON(
  object: any,
): DiscoveryOccurrence_VulnerabilityAttestation_VulnerabilityAttestationState {
  switch (object) {
    case 0:
    case "VULNERABILITY_ATTESTATION_STATE_UNSPECIFIED":
      return DiscoveryOccurrence_VulnerabilityAttestation_VulnerabilityAttestationState
        .VULNERABILITY_ATTESTATION_STATE_UNSPECIFIED;
    case 1:
    case "SUCCESS":
      return DiscoveryOccurrence_VulnerabilityAttestation_VulnerabilityAttestationState.SUCCESS;
    case 2:
    case "FAILURE":
      return DiscoveryOccurrence_VulnerabilityAttestation_VulnerabilityAttestationState.FAILURE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return DiscoveryOccurrence_VulnerabilityAttestation_VulnerabilityAttestationState.UNRECOGNIZED;
  }
}

export function discoveryOccurrence_VulnerabilityAttestation_VulnerabilityAttestationStateToJSON(
  object: DiscoveryOccurrence_VulnerabilityAttestation_VulnerabilityAttestationState,
): string {
  switch (object) {
    case DiscoveryOccurrence_VulnerabilityAttestation_VulnerabilityAttestationState
      .VULNERABILITY_ATTESTATION_STATE_UNSPECIFIED:
      return "VULNERABILITY_ATTESTATION_STATE_UNSPECIFIED";
    case DiscoveryOccurrence_VulnerabilityAttestation_VulnerabilityAttestationState.SUCCESS:
      return "SUCCESS";
    case DiscoveryOccurrence_VulnerabilityAttestation_VulnerabilityAttestationState.FAILURE:
      return "FAILURE";
    case DiscoveryOccurrence_VulnerabilityAttestation_VulnerabilityAttestationState.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

function createBaseDiscoveryNote(): DiscoveryNote {
  return { analysisKind: 0 };
}

export const DiscoveryNote: MessageFns<DiscoveryNote> = {
  encode(message: DiscoveryNote, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.analysisKind !== 0) {
      writer.uint32(8).int32(message.analysisKind);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DiscoveryNote {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDiscoveryNote();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.analysisKind = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DiscoveryNote {
    return { analysisKind: isSet(object.analysisKind) ? noteKindFromJSON(object.analysisKind) : 0 };
  },

  toJSON(message: DiscoveryNote): unknown {
    const obj: any = {};
    if (message.analysisKind !== 0) {
      obj.analysisKind = noteKindToJSON(message.analysisKind);
    }
    return obj;
  },

  create(base?: DeepPartial<DiscoveryNote>): DiscoveryNote {
    return DiscoveryNote.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DiscoveryNote>): DiscoveryNote {
    const message = createBaseDiscoveryNote();
    message.analysisKind = object.analysisKind ?? 0;
    return message;
  },
};

function createBaseDiscoveryOccurrence(): DiscoveryOccurrence {
  return {
    continuousAnalysis: 0,
    analysisStatus: 0,
    analysisCompleted: undefined,
    analysisError: [],
    analysisStatusError: undefined,
    cpe: "",
    lastScanTime: undefined,
    archiveTime: undefined,
    sbomStatus: undefined,
    vulnerabilityAttestation: undefined,
  };
}

export const DiscoveryOccurrence: MessageFns<DiscoveryOccurrence> = {
  encode(message: DiscoveryOccurrence, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.continuousAnalysis !== 0) {
      writer.uint32(8).int32(message.continuousAnalysis);
    }
    if (message.analysisStatus !== 0) {
      writer.uint32(16).int32(message.analysisStatus);
    }
    if (message.analysisCompleted !== undefined) {
      DiscoveryOccurrence_AnalysisCompleted.encode(message.analysisCompleted, writer.uint32(58).fork()).join();
    }
    for (const v of message.analysisError) {
      Status.encode(v!, writer.uint32(66).fork()).join();
    }
    if (message.analysisStatusError !== undefined) {
      Status.encode(message.analysisStatusError, writer.uint32(26).fork()).join();
    }
    if (message.cpe !== "") {
      writer.uint32(34).string(message.cpe);
    }
    if (message.lastScanTime !== undefined) {
      Timestamp.encode(toTimestamp(message.lastScanTime), writer.uint32(42).fork()).join();
    }
    if (message.archiveTime !== undefined) {
      Timestamp.encode(toTimestamp(message.archiveTime), writer.uint32(50).fork()).join();
    }
    if (message.sbomStatus !== undefined) {
      DiscoveryOccurrence_SBOMStatus.encode(message.sbomStatus, writer.uint32(74).fork()).join();
    }
    if (message.vulnerabilityAttestation !== undefined) {
      DiscoveryOccurrence_VulnerabilityAttestation.encode(message.vulnerabilityAttestation, writer.uint32(82).fork())
        .join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DiscoveryOccurrence {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDiscoveryOccurrence();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.continuousAnalysis = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.analysisStatus = reader.int32() as any;
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.analysisCompleted = DiscoveryOccurrence_AnalysisCompleted.decode(reader, reader.uint32());
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.analysisError.push(Status.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.analysisStatusError = Status.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.cpe = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.lastScanTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.archiveTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.sbomStatus = DiscoveryOccurrence_SBOMStatus.decode(reader, reader.uint32());
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.vulnerabilityAttestation = DiscoveryOccurrence_VulnerabilityAttestation.decode(
            reader,
            reader.uint32(),
          );
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DiscoveryOccurrence {
    return {
      continuousAnalysis: isSet(object.continuousAnalysis)
        ? discoveryOccurrence_ContinuousAnalysisFromJSON(object.continuousAnalysis)
        : 0,
      analysisStatus: isSet(object.analysisStatus)
        ? discoveryOccurrence_AnalysisStatusFromJSON(object.analysisStatus)
        : 0,
      analysisCompleted: isSet(object.analysisCompleted)
        ? DiscoveryOccurrence_AnalysisCompleted.fromJSON(object.analysisCompleted)
        : undefined,
      analysisError: globalThis.Array.isArray(object?.analysisError)
        ? object.analysisError.map((e: any) => Status.fromJSON(e))
        : [],
      analysisStatusError: isSet(object.analysisStatusError) ? Status.fromJSON(object.analysisStatusError) : undefined,
      cpe: isSet(object.cpe) ? globalThis.String(object.cpe) : "",
      lastScanTime: isSet(object.lastScanTime) ? fromJsonTimestamp(object.lastScanTime) : undefined,
      archiveTime: isSet(object.archiveTime) ? fromJsonTimestamp(object.archiveTime) : undefined,
      sbomStatus: isSet(object.sbomStatus) ? DiscoveryOccurrence_SBOMStatus.fromJSON(object.sbomStatus) : undefined,
      vulnerabilityAttestation: isSet(object.vulnerabilityAttestation)
        ? DiscoveryOccurrence_VulnerabilityAttestation.fromJSON(object.vulnerabilityAttestation)
        : undefined,
    };
  },

  toJSON(message: DiscoveryOccurrence): unknown {
    const obj: any = {};
    if (message.continuousAnalysis !== 0) {
      obj.continuousAnalysis = discoveryOccurrence_ContinuousAnalysisToJSON(message.continuousAnalysis);
    }
    if (message.analysisStatus !== 0) {
      obj.analysisStatus = discoveryOccurrence_AnalysisStatusToJSON(message.analysisStatus);
    }
    if (message.analysisCompleted !== undefined) {
      obj.analysisCompleted = DiscoveryOccurrence_AnalysisCompleted.toJSON(message.analysisCompleted);
    }
    if (message.analysisError?.length) {
      obj.analysisError = message.analysisError.map((e) => Status.toJSON(e));
    }
    if (message.analysisStatusError !== undefined) {
      obj.analysisStatusError = Status.toJSON(message.analysisStatusError);
    }
    if (message.cpe !== "") {
      obj.cpe = message.cpe;
    }
    if (message.lastScanTime !== undefined) {
      obj.lastScanTime = message.lastScanTime.toISOString();
    }
    if (message.archiveTime !== undefined) {
      obj.archiveTime = message.archiveTime.toISOString();
    }
    if (message.sbomStatus !== undefined) {
      obj.sbomStatus = DiscoveryOccurrence_SBOMStatus.toJSON(message.sbomStatus);
    }
    if (message.vulnerabilityAttestation !== undefined) {
      obj.vulnerabilityAttestation = DiscoveryOccurrence_VulnerabilityAttestation.toJSON(
        message.vulnerabilityAttestation,
      );
    }
    return obj;
  },

  create(base?: DeepPartial<DiscoveryOccurrence>): DiscoveryOccurrence {
    return DiscoveryOccurrence.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DiscoveryOccurrence>): DiscoveryOccurrence {
    const message = createBaseDiscoveryOccurrence();
    message.continuousAnalysis = object.continuousAnalysis ?? 0;
    message.analysisStatus = object.analysisStatus ?? 0;
    message.analysisCompleted = (object.analysisCompleted !== undefined && object.analysisCompleted !== null)
      ? DiscoveryOccurrence_AnalysisCompleted.fromPartial(object.analysisCompleted)
      : undefined;
    message.analysisError = object.analysisError?.map((e) => Status.fromPartial(e)) || [];
    message.analysisStatusError = (object.analysisStatusError !== undefined && object.analysisStatusError !== null)
      ? Status.fromPartial(object.analysisStatusError)
      : undefined;
    message.cpe = object.cpe ?? "";
    message.lastScanTime = object.lastScanTime ?? undefined;
    message.archiveTime = object.archiveTime ?? undefined;
    message.sbomStatus = (object.sbomStatus !== undefined && object.sbomStatus !== null)
      ? DiscoveryOccurrence_SBOMStatus.fromPartial(object.sbomStatus)
      : undefined;
    message.vulnerabilityAttestation =
      (object.vulnerabilityAttestation !== undefined && object.vulnerabilityAttestation !== null)
        ? DiscoveryOccurrence_VulnerabilityAttestation.fromPartial(object.vulnerabilityAttestation)
        : undefined;
    return message;
  },
};

function createBaseDiscoveryOccurrence_AnalysisCompleted(): DiscoveryOccurrence_AnalysisCompleted {
  return { analysisType: [] };
}

export const DiscoveryOccurrence_AnalysisCompleted: MessageFns<DiscoveryOccurrence_AnalysisCompleted> = {
  encode(message: DiscoveryOccurrence_AnalysisCompleted, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.analysisType) {
      writer.uint32(10).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DiscoveryOccurrence_AnalysisCompleted {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDiscoveryOccurrence_AnalysisCompleted();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.analysisType.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DiscoveryOccurrence_AnalysisCompleted {
    return {
      analysisType: globalThis.Array.isArray(object?.analysisType)
        ? object.analysisType.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: DiscoveryOccurrence_AnalysisCompleted): unknown {
    const obj: any = {};
    if (message.analysisType?.length) {
      obj.analysisType = message.analysisType;
    }
    return obj;
  },

  create(base?: DeepPartial<DiscoveryOccurrence_AnalysisCompleted>): DiscoveryOccurrence_AnalysisCompleted {
    return DiscoveryOccurrence_AnalysisCompleted.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DiscoveryOccurrence_AnalysisCompleted>): DiscoveryOccurrence_AnalysisCompleted {
    const message = createBaseDiscoveryOccurrence_AnalysisCompleted();
    message.analysisType = object.analysisType?.map((e) => e) || [];
    return message;
  },
};

function createBaseDiscoveryOccurrence_SBOMStatus(): DiscoveryOccurrence_SBOMStatus {
  return { sbomState: 0, error: "" };
}

export const DiscoveryOccurrence_SBOMStatus: MessageFns<DiscoveryOccurrence_SBOMStatus> = {
  encode(message: DiscoveryOccurrence_SBOMStatus, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.sbomState !== 0) {
      writer.uint32(8).int32(message.sbomState);
    }
    if (message.error !== "") {
      writer.uint32(18).string(message.error);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DiscoveryOccurrence_SBOMStatus {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDiscoveryOccurrence_SBOMStatus();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.sbomState = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.error = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DiscoveryOccurrence_SBOMStatus {
    return {
      sbomState: isSet(object.sbomState) ? discoveryOccurrence_SBOMStatus_SBOMStateFromJSON(object.sbomState) : 0,
      error: isSet(object.error) ? globalThis.String(object.error) : "",
    };
  },

  toJSON(message: DiscoveryOccurrence_SBOMStatus): unknown {
    const obj: any = {};
    if (message.sbomState !== 0) {
      obj.sbomState = discoveryOccurrence_SBOMStatus_SBOMStateToJSON(message.sbomState);
    }
    if (message.error !== "") {
      obj.error = message.error;
    }
    return obj;
  },

  create(base?: DeepPartial<DiscoveryOccurrence_SBOMStatus>): DiscoveryOccurrence_SBOMStatus {
    return DiscoveryOccurrence_SBOMStatus.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DiscoveryOccurrence_SBOMStatus>): DiscoveryOccurrence_SBOMStatus {
    const message = createBaseDiscoveryOccurrence_SBOMStatus();
    message.sbomState = object.sbomState ?? 0;
    message.error = object.error ?? "";
    return message;
  },
};

function createBaseDiscoveryOccurrence_VulnerabilityAttestation(): DiscoveryOccurrence_VulnerabilityAttestation {
  return { lastAttemptTime: undefined, state: 0, error: "" };
}

export const DiscoveryOccurrence_VulnerabilityAttestation: MessageFns<DiscoveryOccurrence_VulnerabilityAttestation> = {
  encode(
    message: DiscoveryOccurrence_VulnerabilityAttestation,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.lastAttemptTime !== undefined) {
      Timestamp.encode(toTimestamp(message.lastAttemptTime), writer.uint32(10).fork()).join();
    }
    if (message.state !== 0) {
      writer.uint32(16).int32(message.state);
    }
    if (message.error !== "") {
      writer.uint32(26).string(message.error);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DiscoveryOccurrence_VulnerabilityAttestation {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDiscoveryOccurrence_VulnerabilityAttestation();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.lastAttemptTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.state = reader.int32() as any;
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.error = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DiscoveryOccurrence_VulnerabilityAttestation {
    return {
      lastAttemptTime: isSet(object.lastAttemptTime) ? fromJsonTimestamp(object.lastAttemptTime) : undefined,
      state: isSet(object.state)
        ? discoveryOccurrence_VulnerabilityAttestation_VulnerabilityAttestationStateFromJSON(object.state)
        : 0,
      error: isSet(object.error) ? globalThis.String(object.error) : "",
    };
  },

  toJSON(message: DiscoveryOccurrence_VulnerabilityAttestation): unknown {
    const obj: any = {};
    if (message.lastAttemptTime !== undefined) {
      obj.lastAttemptTime = message.lastAttemptTime.toISOString();
    }
    if (message.state !== 0) {
      obj.state = discoveryOccurrence_VulnerabilityAttestation_VulnerabilityAttestationStateToJSON(message.state);
    }
    if (message.error !== "") {
      obj.error = message.error;
    }
    return obj;
  },

  create(
    base?: DeepPartial<DiscoveryOccurrence_VulnerabilityAttestation>,
  ): DiscoveryOccurrence_VulnerabilityAttestation {
    return DiscoveryOccurrence_VulnerabilityAttestation.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<DiscoveryOccurrence_VulnerabilityAttestation>,
  ): DiscoveryOccurrence_VulnerabilityAttestation {
    const message = createBaseDiscoveryOccurrence_VulnerabilityAttestation();
    message.lastAttemptTime = object.lastAttemptTime ?? undefined;
    message.state = object.state ?? 0;
    message.error = object.error ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
