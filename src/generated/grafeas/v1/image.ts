// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: grafeas/v1/image.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "grafeas.v1";

/** Layer holds metadata specific to a layer of a Docker image. */
export interface Layer {
  /**
   * Required. The recovered Dockerfile directive used to construct this layer.
   * See https://docs.docker.com/engine/reference/builder/ for more information.
   */
  directive: string;
  /** The recovered arguments to the Dockerfile directive. */
  arguments: string;
}

/** A set of properties that uniquely identify a given Docker image. */
export interface Fingerprint {
  /**
   * Required. The layer ID of the final layer in the Docker image's v1
   * representation.
   */
  v1Name: string;
  /** Required. The ordered list of v2 blobs that represent a given image. */
  v2Blob: string[];
  /**
   * Output only. The name of the image's v2 blobs computed via:
   *   [bottom] := v2_blob[bottom]
   *   [N] := sha256(v2_blob[N] + " " + v2_name[N+1])
   * Only the name of the final blob is kept.
   */
  v2Name: string;
}

/**
 * Basis describes the base image portion (Note) of the DockerImage
 * relationship. Linked occurrences are derived from this or an equivalent image
 * via:
 *   FROM <Basis.resource_url>
 * Or an equivalent reference, e.g., a tag of the resource_url.
 */
export interface ImageNote {
  /**
   * Required. Immutable. The resource_url for the resource representing the
   * basis of associated occurrence images.
   */
  resourceUrl: string;
  /** Required. Immutable. The fingerprint of the base image. */
  fingerprint: Fingerprint | undefined;
}

/**
 * Details of the derived image portion of the DockerImage relationship. This
 * image would be produced from a Dockerfile with FROM <DockerImage.Basis in
 * attached Note>.
 */
export interface ImageOccurrence {
  /** Required. The fingerprint of the derived image. */
  fingerprint:
    | Fingerprint
    | undefined;
  /**
   * Output only. The number of layers by which this image differs from the
   * associated image basis.
   */
  distance: number;
  /**
   * This contains layer-specific metadata, if populated it has length
   * "distance" and is ordered with [distance] being the layer immediately
   * following the base image and [1] being the final layer.
   */
  layerInfo: Layer[];
  /**
   * Output only. This contains the base image URL for the derived image
   * occurrence.
   */
  baseResourceUrl: string;
}

function createBaseLayer(): Layer {
  return { directive: "", arguments: "" };
}

export const Layer: MessageFns<Layer> = {
  encode(message: Layer, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.directive !== "") {
      writer.uint32(10).string(message.directive);
    }
    if (message.arguments !== "") {
      writer.uint32(18).string(message.arguments);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Layer {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLayer();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.directive = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.arguments = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Layer {
    return {
      directive: isSet(object.directive) ? globalThis.String(object.directive) : "",
      arguments: isSet(object.arguments) ? globalThis.String(object.arguments) : "",
    };
  },

  toJSON(message: Layer): unknown {
    const obj: any = {};
    if (message.directive !== "") {
      obj.directive = message.directive;
    }
    if (message.arguments !== "") {
      obj.arguments = message.arguments;
    }
    return obj;
  },

  create(base?: DeepPartial<Layer>): Layer {
    return Layer.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Layer>): Layer {
    const message = createBaseLayer();
    message.directive = object.directive ?? "";
    message.arguments = object.arguments ?? "";
    return message;
  },
};

function createBaseFingerprint(): Fingerprint {
  return { v1Name: "", v2Blob: [], v2Name: "" };
}

export const Fingerprint: MessageFns<Fingerprint> = {
  encode(message: Fingerprint, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.v1Name !== "") {
      writer.uint32(10).string(message.v1Name);
    }
    for (const v of message.v2Blob) {
      writer.uint32(18).string(v!);
    }
    if (message.v2Name !== "") {
      writer.uint32(26).string(message.v2Name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Fingerprint {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFingerprint();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.v1Name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.v2Blob.push(reader.string());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.v2Name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Fingerprint {
    return {
      v1Name: isSet(object.v1Name) ? globalThis.String(object.v1Name) : "",
      v2Blob: globalThis.Array.isArray(object?.v2Blob) ? object.v2Blob.map((e: any) => globalThis.String(e)) : [],
      v2Name: isSet(object.v2Name) ? globalThis.String(object.v2Name) : "",
    };
  },

  toJSON(message: Fingerprint): unknown {
    const obj: any = {};
    if (message.v1Name !== "") {
      obj.v1Name = message.v1Name;
    }
    if (message.v2Blob?.length) {
      obj.v2Blob = message.v2Blob;
    }
    if (message.v2Name !== "") {
      obj.v2Name = message.v2Name;
    }
    return obj;
  },

  create(base?: DeepPartial<Fingerprint>): Fingerprint {
    return Fingerprint.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Fingerprint>): Fingerprint {
    const message = createBaseFingerprint();
    message.v1Name = object.v1Name ?? "";
    message.v2Blob = object.v2Blob?.map((e) => e) || [];
    message.v2Name = object.v2Name ?? "";
    return message;
  },
};

function createBaseImageNote(): ImageNote {
  return { resourceUrl: "", fingerprint: undefined };
}

export const ImageNote: MessageFns<ImageNote> = {
  encode(message: ImageNote, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.resourceUrl !== "") {
      writer.uint32(10).string(message.resourceUrl);
    }
    if (message.fingerprint !== undefined) {
      Fingerprint.encode(message.fingerprint, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ImageNote {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseImageNote();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.resourceUrl = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.fingerprint = Fingerprint.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ImageNote {
    return {
      resourceUrl: isSet(object.resourceUrl) ? globalThis.String(object.resourceUrl) : "",
      fingerprint: isSet(object.fingerprint) ? Fingerprint.fromJSON(object.fingerprint) : undefined,
    };
  },

  toJSON(message: ImageNote): unknown {
    const obj: any = {};
    if (message.resourceUrl !== "") {
      obj.resourceUrl = message.resourceUrl;
    }
    if (message.fingerprint !== undefined) {
      obj.fingerprint = Fingerprint.toJSON(message.fingerprint);
    }
    return obj;
  },

  create(base?: DeepPartial<ImageNote>): ImageNote {
    return ImageNote.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ImageNote>): ImageNote {
    const message = createBaseImageNote();
    message.resourceUrl = object.resourceUrl ?? "";
    message.fingerprint = (object.fingerprint !== undefined && object.fingerprint !== null)
      ? Fingerprint.fromPartial(object.fingerprint)
      : undefined;
    return message;
  },
};

function createBaseImageOccurrence(): ImageOccurrence {
  return { fingerprint: undefined, distance: 0, layerInfo: [], baseResourceUrl: "" };
}

export const ImageOccurrence: MessageFns<ImageOccurrence> = {
  encode(message: ImageOccurrence, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.fingerprint !== undefined) {
      Fingerprint.encode(message.fingerprint, writer.uint32(10).fork()).join();
    }
    if (message.distance !== 0) {
      writer.uint32(16).int32(message.distance);
    }
    for (const v of message.layerInfo) {
      Layer.encode(v!, writer.uint32(26).fork()).join();
    }
    if (message.baseResourceUrl !== "") {
      writer.uint32(34).string(message.baseResourceUrl);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ImageOccurrence {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseImageOccurrence();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.fingerprint = Fingerprint.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.distance = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.layerInfo.push(Layer.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.baseResourceUrl = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ImageOccurrence {
    return {
      fingerprint: isSet(object.fingerprint) ? Fingerprint.fromJSON(object.fingerprint) : undefined,
      distance: isSet(object.distance) ? globalThis.Number(object.distance) : 0,
      layerInfo: globalThis.Array.isArray(object?.layerInfo) ? object.layerInfo.map((e: any) => Layer.fromJSON(e)) : [],
      baseResourceUrl: isSet(object.baseResourceUrl) ? globalThis.String(object.baseResourceUrl) : "",
    };
  },

  toJSON(message: ImageOccurrence): unknown {
    const obj: any = {};
    if (message.fingerprint !== undefined) {
      obj.fingerprint = Fingerprint.toJSON(message.fingerprint);
    }
    if (message.distance !== 0) {
      obj.distance = Math.round(message.distance);
    }
    if (message.layerInfo?.length) {
      obj.layerInfo = message.layerInfo.map((e) => Layer.toJSON(e));
    }
    if (message.baseResourceUrl !== "") {
      obj.baseResourceUrl = message.baseResourceUrl;
    }
    return obj;
  },

  create(base?: DeepPartial<ImageOccurrence>): ImageOccurrence {
    return ImageOccurrence.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ImageOccurrence>): ImageOccurrence {
    const message = createBaseImageOccurrence();
    message.fingerprint = (object.fingerprint !== undefined && object.fingerprint !== null)
      ? Fingerprint.fromPartial(object.fingerprint)
      : undefined;
    message.distance = object.distance ?? 0;
    message.layerInfo = object.layerInfo?.map((e) => Layer.fromPartial(e)) || [];
    message.baseResourceUrl = object.baseResourceUrl ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
