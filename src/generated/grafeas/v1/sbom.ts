// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: grafeas/v1/sbom.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { EnvelopeSignature } from "./common.js";
import { Subject } from "./intoto_statement.js";

export const protobufPackage = "grafeas.v1";

/** The note representing an SBOM reference. */
export interface SBOMReferenceNote {
  /** The format that SBOM takes. E.g. may be spdx, cyclonedx, etc... */
  format: string;
  /**
   * The version of the format that the SBOM takes. E.g. if the format
   * is spdx, the version may be 2.3.
   */
  version: string;
}

/**
 * The occurrence representing an SBOM reference as applied to a specific
 * resource. The occurrence follows the DSSE specification. See
 * https://github.com/secure-systems-lab/dsse/blob/master/envelope.md for more
 * details.
 */
export interface SBOMReferenceOccurrence {
  /** The actual payload that contains the SBOM reference data. */
  payload:
    | SbomReferenceIntotoPayload
    | undefined;
  /**
   * The kind of payload that SbomReferenceIntotoPayload takes. Since it's in
   * the intoto format, this value is expected to be
   * 'application/vnd.in-toto+json'.
   */
  payloadType: string;
  /** The signatures over the payload. */
  signatures: EnvelopeSignature[];
}

/**
 * The actual payload that contains the SBOM Reference data.
 * The payload follows the intoto statement specification. See
 * https://github.com/in-toto/attestation/blob/main/spec/v1.0/statement.md
 * for more details.
 */
export interface SbomReferenceIntotoPayload {
  /** Identifier for the schema of the Statement. */
  type: string;
  /** URI identifying the type of the Predicate. */
  predicateType: string;
  /**
   * Set of software artifacts that the attestation applies to. Each element
   * represents a single software artifact.
   */
  subject: Subject[];
  /**
   * Additional parameters of the Predicate. Includes the actual data about the
   * SBOM.
   */
  predicate: SbomReferenceIntotoPredicate | undefined;
}

/** A predicate which describes the SBOM being referenced. */
export interface SbomReferenceIntotoPredicate {
  /** The person or system referring this predicate to the consumer. */
  referrerId: string;
  /** The location of the SBOM. */
  location: string;
  /** The mime type of the SBOM. */
  mimeType: string;
  /** A map of algorithm to digest of the contents of the SBOM. */
  digest: { [key: string]: string };
}

export interface SbomReferenceIntotoPredicate_DigestEntry {
  key: string;
  value: string;
}

function createBaseSBOMReferenceNote(): SBOMReferenceNote {
  return { format: "", version: "" };
}

export const SBOMReferenceNote: MessageFns<SBOMReferenceNote> = {
  encode(message: SBOMReferenceNote, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.format !== "") {
      writer.uint32(10).string(message.format);
    }
    if (message.version !== "") {
      writer.uint32(18).string(message.version);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SBOMReferenceNote {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSBOMReferenceNote();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.format = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.version = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SBOMReferenceNote {
    return {
      format: isSet(object.format) ? globalThis.String(object.format) : "",
      version: isSet(object.version) ? globalThis.String(object.version) : "",
    };
  },

  toJSON(message: SBOMReferenceNote): unknown {
    const obj: any = {};
    if (message.format !== "") {
      obj.format = message.format;
    }
    if (message.version !== "") {
      obj.version = message.version;
    }
    return obj;
  },

  create(base?: DeepPartial<SBOMReferenceNote>): SBOMReferenceNote {
    return SBOMReferenceNote.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SBOMReferenceNote>): SBOMReferenceNote {
    const message = createBaseSBOMReferenceNote();
    message.format = object.format ?? "";
    message.version = object.version ?? "";
    return message;
  },
};

function createBaseSBOMReferenceOccurrence(): SBOMReferenceOccurrence {
  return { payload: undefined, payloadType: "", signatures: [] };
}

export const SBOMReferenceOccurrence: MessageFns<SBOMReferenceOccurrence> = {
  encode(message: SBOMReferenceOccurrence, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.payload !== undefined) {
      SbomReferenceIntotoPayload.encode(message.payload, writer.uint32(10).fork()).join();
    }
    if (message.payloadType !== "") {
      writer.uint32(18).string(message.payloadType);
    }
    for (const v of message.signatures) {
      EnvelopeSignature.encode(v!, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SBOMReferenceOccurrence {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSBOMReferenceOccurrence();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.payload = SbomReferenceIntotoPayload.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.payloadType = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.signatures.push(EnvelopeSignature.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SBOMReferenceOccurrence {
    return {
      payload: isSet(object.payload) ? SbomReferenceIntotoPayload.fromJSON(object.payload) : undefined,
      payloadType: isSet(object.payloadType) ? globalThis.String(object.payloadType) : "",
      signatures: globalThis.Array.isArray(object?.signatures)
        ? object.signatures.map((e: any) => EnvelopeSignature.fromJSON(e))
        : [],
    };
  },

  toJSON(message: SBOMReferenceOccurrence): unknown {
    const obj: any = {};
    if (message.payload !== undefined) {
      obj.payload = SbomReferenceIntotoPayload.toJSON(message.payload);
    }
    if (message.payloadType !== "") {
      obj.payloadType = message.payloadType;
    }
    if (message.signatures?.length) {
      obj.signatures = message.signatures.map((e) => EnvelopeSignature.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<SBOMReferenceOccurrence>): SBOMReferenceOccurrence {
    return SBOMReferenceOccurrence.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SBOMReferenceOccurrence>): SBOMReferenceOccurrence {
    const message = createBaseSBOMReferenceOccurrence();
    message.payload = (object.payload !== undefined && object.payload !== null)
      ? SbomReferenceIntotoPayload.fromPartial(object.payload)
      : undefined;
    message.payloadType = object.payloadType ?? "";
    message.signatures = object.signatures?.map((e) => EnvelopeSignature.fromPartial(e)) || [];
    return message;
  },
};

function createBaseSbomReferenceIntotoPayload(): SbomReferenceIntotoPayload {
  return { type: "", predicateType: "", subject: [], predicate: undefined };
}

export const SbomReferenceIntotoPayload: MessageFns<SbomReferenceIntotoPayload> = {
  encode(message: SbomReferenceIntotoPayload, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.type !== "") {
      writer.uint32(10).string(message.type);
    }
    if (message.predicateType !== "") {
      writer.uint32(18).string(message.predicateType);
    }
    for (const v of message.subject) {
      Subject.encode(v!, writer.uint32(26).fork()).join();
    }
    if (message.predicate !== undefined) {
      SbomReferenceIntotoPredicate.encode(message.predicate, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SbomReferenceIntotoPayload {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSbomReferenceIntotoPayload();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.type = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.predicateType = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.subject.push(Subject.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.predicate = SbomReferenceIntotoPredicate.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SbomReferenceIntotoPayload {
    return {
      type: isSet(object._type) ? globalThis.String(object._type) : "",
      predicateType: isSet(object.predicateType) ? globalThis.String(object.predicateType) : "",
      subject: globalThis.Array.isArray(object?.subject) ? object.subject.map((e: any) => Subject.fromJSON(e)) : [],
      predicate: isSet(object.predicate) ? SbomReferenceIntotoPredicate.fromJSON(object.predicate) : undefined,
    };
  },

  toJSON(message: SbomReferenceIntotoPayload): unknown {
    const obj: any = {};
    if (message.type !== "") {
      obj._type = message.type;
    }
    if (message.predicateType !== "") {
      obj.predicateType = message.predicateType;
    }
    if (message.subject?.length) {
      obj.subject = message.subject.map((e) => Subject.toJSON(e));
    }
    if (message.predicate !== undefined) {
      obj.predicate = SbomReferenceIntotoPredicate.toJSON(message.predicate);
    }
    return obj;
  },

  create(base?: DeepPartial<SbomReferenceIntotoPayload>): SbomReferenceIntotoPayload {
    return SbomReferenceIntotoPayload.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SbomReferenceIntotoPayload>): SbomReferenceIntotoPayload {
    const message = createBaseSbomReferenceIntotoPayload();
    message.type = object.type ?? "";
    message.predicateType = object.predicateType ?? "";
    message.subject = object.subject?.map((e) => Subject.fromPartial(e)) || [];
    message.predicate = (object.predicate !== undefined && object.predicate !== null)
      ? SbomReferenceIntotoPredicate.fromPartial(object.predicate)
      : undefined;
    return message;
  },
};

function createBaseSbomReferenceIntotoPredicate(): SbomReferenceIntotoPredicate {
  return { referrerId: "", location: "", mimeType: "", digest: {} };
}

export const SbomReferenceIntotoPredicate: MessageFns<SbomReferenceIntotoPredicate> = {
  encode(message: SbomReferenceIntotoPredicate, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.referrerId !== "") {
      writer.uint32(10).string(message.referrerId);
    }
    if (message.location !== "") {
      writer.uint32(18).string(message.location);
    }
    if (message.mimeType !== "") {
      writer.uint32(26).string(message.mimeType);
    }
    Object.entries(message.digest).forEach(([key, value]) => {
      SbomReferenceIntotoPredicate_DigestEntry.encode({ key: key as any, value }, writer.uint32(34).fork()).join();
    });
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SbomReferenceIntotoPredicate {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSbomReferenceIntotoPredicate();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.referrerId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.location = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.mimeType = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          const entry4 = SbomReferenceIntotoPredicate_DigestEntry.decode(reader, reader.uint32());
          if (entry4.value !== undefined) {
            message.digest[entry4.key] = entry4.value;
          }
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SbomReferenceIntotoPredicate {
    return {
      referrerId: isSet(object.referrerId) ? globalThis.String(object.referrerId) : "",
      location: isSet(object.location) ? globalThis.String(object.location) : "",
      mimeType: isSet(object.mimeType) ? globalThis.String(object.mimeType) : "",
      digest: isObject(object.digest)
        ? Object.entries(object.digest).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
    };
  },

  toJSON(message: SbomReferenceIntotoPredicate): unknown {
    const obj: any = {};
    if (message.referrerId !== "") {
      obj.referrerId = message.referrerId;
    }
    if (message.location !== "") {
      obj.location = message.location;
    }
    if (message.mimeType !== "") {
      obj.mimeType = message.mimeType;
    }
    if (message.digest) {
      const entries = Object.entries(message.digest);
      if (entries.length > 0) {
        obj.digest = {};
        entries.forEach(([k, v]) => {
          obj.digest[k] = v;
        });
      }
    }
    return obj;
  },

  create(base?: DeepPartial<SbomReferenceIntotoPredicate>): SbomReferenceIntotoPredicate {
    return SbomReferenceIntotoPredicate.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SbomReferenceIntotoPredicate>): SbomReferenceIntotoPredicate {
    const message = createBaseSbomReferenceIntotoPredicate();
    message.referrerId = object.referrerId ?? "";
    message.location = object.location ?? "";
    message.mimeType = object.mimeType ?? "";
    message.digest = Object.entries(object.digest ?? {}).reduce<{ [key: string]: string }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = globalThis.String(value);
      }
      return acc;
    }, {});
    return message;
  },
};

function createBaseSbomReferenceIntotoPredicate_DigestEntry(): SbomReferenceIntotoPredicate_DigestEntry {
  return { key: "", value: "" };
}

export const SbomReferenceIntotoPredicate_DigestEntry: MessageFns<SbomReferenceIntotoPredicate_DigestEntry> = {
  encode(message: SbomReferenceIntotoPredicate_DigestEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SbomReferenceIntotoPredicate_DigestEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSbomReferenceIntotoPredicate_DigestEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SbomReferenceIntotoPredicate_DigestEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: SbomReferenceIntotoPredicate_DigestEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create(base?: DeepPartial<SbomReferenceIntotoPredicate_DigestEntry>): SbomReferenceIntotoPredicate_DigestEntry {
    return SbomReferenceIntotoPredicate_DigestEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SbomReferenceIntotoPredicate_DigestEntry>): SbomReferenceIntotoPredicate_DigestEntry {
    const message = createBaseSbomReferenceIntotoPredicate_DigestEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
